{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Principe \u00b6 Ce programme a pour but de g\u00e9rer les tournois et joueurs d'un club d'\u00e9checs. Le programme est utilis\u00e9 en ligne de commande. Une base de donn\u00e9es l\u00e9g\u00e8re permet de stocker les informations des joueurs et des tournois. Les tournois peuvent \u00eatre arr\u00eat\u00e9s et repris \u00e0 n'importe quel moment. Divers rapports peuvent \u00eatre g\u00e9n\u00e9r\u00e9s et export\u00e9s. Pr\u00e9requis \u00b6 L'installation via pip installera pour vous les d\u00e9pendances situ\u00e9es dans requirements.txt . Les deux d\u00e9pendances principales sont tinydb pour la gestion de la base de donn\u00e9es au format JSON et typer pour la gestion de la partie CLI de l'application. Ce dernier, bas\u00e9 sur click va permettre un fonctionnement cross-OS. Votre syst\u00e8me d'exploitation et votre terminal ne devraient pas poser de probl\u00e8me de compatibilit\u00e9. Votre version de Python doit \u00eatre >= 3.9 . Notamment du fait de l'utilisation native de type hints de g\u00e9n\u00e9riques sans passer par la librairie typing . Fonctionnalit\u00e9 introduite dans le PEP 585 . Installation \u00b6 $ python3 _m pip install oc_chess_club Utilisation \u00b6 Rendez-vous dans le tutoriel pour apprendre \u00e0 utiliser le programme.","title":"Pr\u00e9sentation"},{"location":"#principe","text":"Ce programme a pour but de g\u00e9rer les tournois et joueurs d'un club d'\u00e9checs. Le programme est utilis\u00e9 en ligne de commande. Une base de donn\u00e9es l\u00e9g\u00e8re permet de stocker les informations des joueurs et des tournois. Les tournois peuvent \u00eatre arr\u00eat\u00e9s et repris \u00e0 n'importe quel moment. Divers rapports peuvent \u00eatre g\u00e9n\u00e9r\u00e9s et export\u00e9s.","title":" Principe"},{"location":"#prerequis","text":"L'installation via pip installera pour vous les d\u00e9pendances situ\u00e9es dans requirements.txt . Les deux d\u00e9pendances principales sont tinydb pour la gestion de la base de donn\u00e9es au format JSON et typer pour la gestion de la partie CLI de l'application. Ce dernier, bas\u00e9 sur click va permettre un fonctionnement cross-OS. Votre syst\u00e8me d'exploitation et votre terminal ne devraient pas poser de probl\u00e8me de compatibilit\u00e9. Votre version de Python doit \u00eatre >= 3.9 . Notamment du fait de l'utilisation native de type hints de g\u00e9n\u00e9riques sans passer par la librairie typing . Fonctionnalit\u00e9 introduite dans le PEP 585 .","title":" Pr\u00e9requis"},{"location":"#installation","text":"$ python3 _m pip install oc_chess_club","title":" Installation"},{"location":"#utilisation","text":"Rendez-vous dans le tutoriel pour apprendre \u00e0 utiliser le programme.","title":" Utilisation"},{"location":"game/","text":"Pour commencer ou reprendre un tournoi, vous pouvez naviguer via le menu principal ou taper directement python3 -m oc_chess_club tournament load . Astuce Pour charger directement un tournoi avec son id vous pouvez utiliser python3 -m oc_chess_club tournament load [id] . $ python3 -m oc_chess_club tournament load 1 - - Tournoi 1 - Round 1 - Match 1 - - Joueur 1: Bill Gates (410) vs Joueur 2: Robert Martin (620) Entrez le gagnant (1, 2, ou nul): $ 1 - - Tournoi 1 - Round 1 - Match 2 - - Joueur 1: Tim Berners-Lee (470) vs Joueur 2: Ken Thompson (650) Entrez le gagnant (1, 2, ou nul): $ 2 - - Tournoi 1 - Round 1 - Match 3 - - Joueur 1: Steve Jobs (520) vs Joueur 2: Linus Torvalds (680) Entrez le gagnant (1, 2, ou nul): $ nul - - Tournoi 1 - Round 1 - Match 4 - - Joueur 1: Dennis Ritchie (530) vs Joueur 2: Guido van Rossum (710) Entrez le gagnant (1, 2, ou nul): $ 1 - - Tournoi 1 - Round 2 - Match 1 - - Joueur 1: Bill Gates (410) vs Joueur 2: Ken Thompson (650) Entrez le gagnant (1, 2, ou nul): $ 1 - - Tournoi 1 - Round 2 - Match 2 - - Joueur 1: Dennis Ritchie (530) vs Joueur 2: Linus Torvalds (680) Entrez le gagnant (1, 2, ou nul): $ nul - - Tournoi 1 - Round 2 - Match 3 - - Joueur 1: Steve Jobs (520) vs Joueur 2: Guido van Rossum (710) Entrez le gagnant (1, 2, ou nul): $ 2 - - Tournoi 1 - Round 2 - Match 4 - - Joueur 1: Robert Martin (620) vs Joueur 2: Tim Berners-Lee (470) Entrez le gagnant (1, 2, ou nul): $ 2 - - Tournoi 1 - Round 3 - Match 1 - - Joueur 1: Bill Gates (410) vs Joueur 2: Dennis Ritchie (530) Entrez le gagnant (1, 2, ou nul): $ nul - - Tournoi 1 - Round 3 - Match 2 - - Joueur 1: Linus Torvalds (680) vs Joueur 2: Ken Thompson (650) Entrez le gagnant (1, 2, ou nul): $ 1 - - Tournoi 1 - Round 3 - Match 3 - - Joueur 1: Guido van Rossum (710) vs Joueur 2: Tim Berners-Lee (470) Entrez le gagnant (1, 2, ou nul): $ 1 - - Tournoi 1 - Round 3 - Match 4 - - Joueur 1: Steve Jobs (520) vs Joueur 2: Robert Martin (620) Entrez le gagnant (1, 2, ou nul): $ 2 - - Tournoi 1 - Round 4 - Match 1 - - Joueur 1: Bill Gates (410) vs Joueur 2: Linus Torvalds (680) Entrez le gagnant (1, 2, ou nul): $ nul - - Tournoi 1 - Round 4 - Match 2 - - Joueur 1: Dennis Ritchie (530) vs Joueur 2: Guido van Rossum (710) Entrez le gagnant (1, 2, ou nul): $ 1 - - Tournoi 1 - Round 4 - Match 3 - - Joueur 1: Ken Thompson (650) vs Joueur 2: Robert Martin (620) Entrez le gagnant (1, 2, ou nul): $ 1 - - Tournoi 1 - Round 4 - Match 4 - - Joueur 1: Tim Berners-Lee (470) vs Joueur 2: Steve Jobs (520) Entrez le gagnant (1, 2, ou nul): $ 2 > Tournoi termin\u00e9 - Classement final: 1 - Bill Gates (3 points) 2 - Dennis Ritchie (3 points) 3 - Linus Torvalds (2.5 points) 4 - Ken Thompson (2 points) 5 - Guido van Rossum (2 points) 6 - Steve Jobs (1.5 points) 7 - Robert Martin (1 points) 8 - Tim Berners-Lee (1 points)","title":"Jouer"},{"location":"players/","text":"Astuce Pour acc\u00e8der directement au menu des joueurs entrez oc_chess_club player . Cr\u00e9er un joueur \u00b6 $ python3 -m oc_chess_club player new - CR\u00c9ATION D'UN JOUEUR - - Entrez les informations du joueur Pr\u00e9nom du joueur: $ Jake Nom de famille du joueur: $ Mate Date de naissance (JJ/MM/AAAA): $ 16 /07/1993 Genre (H/F): $ H ELO: $ 750 - Informations du joueur: Pr\u00e9nom: Jake Nom de famille: Mate Date de naissance: 16/07/1993 Genre: H ELO: 750 Souhaitez vous confirmer la cr\u00e9ation de ce joueur ? [y/N]: $ y > Le joueur a \u00e9t\u00e9 cr\u00e9\u00e9 avec le num\u00e9ro 9. Editer un joueur \u00b6 $ python3 -m oc_chess_club player edit - MODIFICATION D'UN JOUEUR - - Liste des joueurs existants: 1. Bill Gates 2. Linus Torvalds 3. Steve Jobs 4. Ken Thompson 5. Dennis Ritchie 6. Guido van Rossum 7. Robert Martin 8. Tim Berners-Lee 9. Jake Mate S\u00e9lectionnez un joueur: $ 9 - Informations actuelles du joueur: Pr\u00e9nom: Jake Modifier cette information? [y/N]: $ n Nom de famille: Mate Modifier cette information? [y/N]: $ n Date de naissance: 16/07/1993 Modifier cette information? [y/N]: $ n Genre: H Modifier cette information? [y/N]: $ n ELO: 750 Modifier cette information? [y/N]: $ y Entrez une nouvelle valeur pour 'ELO': $ 800 - Nouvelles informations du joueur: Pr\u00e9nom: Jake Nom de famille: Mate Date de naissance: 16/07/1993 Genre: H ELO: 800 Souhaitez vous confirmer la modification de ce joueur ? [y/N]: $ y > Le joueur n\u00b09 a \u00e9t\u00e9 modifi\u00e9. Supprimer un joueur \u00b6 $ python3 -m oc_chess_club player delete * SUPPRESSION D'UN JOUEUR - * Liste des joueurs existants: 1. Billie Gates 2. Linus Torvalds 3. Steve Jobs 4. Ken Thompson 5. Dennis Ritchie 6. Guido van Rossum 7. Robert Martin 8. Tim Berners-Lee 9. Jake Mate S\u00e9lectionnez un joueur: $ 9 VOUS ALLEZ SUPPRIMER D\u00c9FINITIVEMENT 'JAKE MATE' Confirmer la suppression ? [y/N]: $ y","title":"G\u00e9rer les joueurs"},{"location":"players/#creer-un-joueur","text":"$ python3 -m oc_chess_club player new - CR\u00c9ATION D'UN JOUEUR - - Entrez les informations du joueur Pr\u00e9nom du joueur: $ Jake Nom de famille du joueur: $ Mate Date de naissance (JJ/MM/AAAA): $ 16 /07/1993 Genre (H/F): $ H ELO: $ 750 - Informations du joueur: Pr\u00e9nom: Jake Nom de famille: Mate Date de naissance: 16/07/1993 Genre: H ELO: 750 Souhaitez vous confirmer la cr\u00e9ation de ce joueur ? [y/N]: $ y > Le joueur a \u00e9t\u00e9 cr\u00e9\u00e9 avec le num\u00e9ro 9.","title":"Cr\u00e9er un joueur"},{"location":"players/#editer-un-joueur","text":"$ python3 -m oc_chess_club player edit - MODIFICATION D'UN JOUEUR - - Liste des joueurs existants: 1. Bill Gates 2. Linus Torvalds 3. Steve Jobs 4. Ken Thompson 5. Dennis Ritchie 6. Guido van Rossum 7. Robert Martin 8. Tim Berners-Lee 9. Jake Mate S\u00e9lectionnez un joueur: $ 9 - Informations actuelles du joueur: Pr\u00e9nom: Jake Modifier cette information? [y/N]: $ n Nom de famille: Mate Modifier cette information? [y/N]: $ n Date de naissance: 16/07/1993 Modifier cette information? [y/N]: $ n Genre: H Modifier cette information? [y/N]: $ n ELO: 750 Modifier cette information? [y/N]: $ y Entrez une nouvelle valeur pour 'ELO': $ 800 - Nouvelles informations du joueur: Pr\u00e9nom: Jake Nom de famille: Mate Date de naissance: 16/07/1993 Genre: H ELO: 800 Souhaitez vous confirmer la modification de ce joueur ? [y/N]: $ y > Le joueur n\u00b09 a \u00e9t\u00e9 modifi\u00e9.","title":"Editer un joueur"},{"location":"players/#supprimer-un-joueur","text":"$ python3 -m oc_chess_club player delete * SUPPRESSION D'UN JOUEUR - * Liste des joueurs existants: 1. Billie Gates 2. Linus Torvalds 3. Steve Jobs 4. Ken Thompson 5. Dennis Ritchie 6. Guido van Rossum 7. Robert Martin 8. Tim Berners-Lee 9. Jake Mate S\u00e9lectionnez un joueur: $ 9 VOUS ALLEZ SUPPRIMER D\u00c9FINITIVEMENT 'JAKE MATE' Confirmer la suppression ? [y/N]: $ y","title":"Supprimer un joueur"},{"location":"reports/","text":"Pour acc\u00e8der menu des rapports entrez oc_chess_club report . Depuis ce menu vous pouvez g\u00e9n\u00e9rer les rapports suivants: Liste de tous les joueurs: par ordre alphab\u00e9tique par classement Liste de tous les joueurs d'un tournoi par ordre alphab\u00e9tique par classement Liste de tous les tournois Liste de tous les tours d'un tournoi Liste de tous les matchs d'un tournoi Le rapport choisi va s'afficher dans la console. Vous aurez alors la possibilit\u00e9 de l'exporter dans un fichier. Les formats support\u00e9s sont le format texte et le format csv. Le fichier g\u00e9n\u00e9r\u00e9 se trouvera alors dans l'emplacement renseign\u00e9 dans votre fichier config.yaml","title":"Rapports"},{"location":"start/","text":"D\u00e9marrer le programme \u00b6 $ python3 -m oc_chess_club - MENU PRINCIPAL - 1. Tournois 2. G\u00e9rer les joueurs 3. G\u00e9n\u00e9rer un rapport 0. Quitter Entrez votre s\u00e9lection: : // Vous pouvez \u00e9galement simplement utiliser 'oc_chess_club' si vous avez install\u00e9 via pip. // Maintenant utilisez l'argument --help $ oc_chess_club --help Gestion des tournois et joueurs pour club d'\u00e9checs. Options: --install-completion [bash|zsh|fish|powershell|pwsh] Install completion for the specified shell. --show-completion [bash|zsh|fish|powershell|pwsh] Show completion for the specified shell, to copy it or customize the installation. --help Show this message and exit. Commands: player Affiche le menu des joueurs report Affiche le menu des rapports tournament Affiche le menu des tournois // Vous pouvez utiliser l'argument --help pour chaque commande. // Vous pouvez par exemple essayer oc_chess_club player --help V\u00e9rifier la configuration \u00b6 Le programme a besoin de deux param\u00e8tres: Un fichier .json qui sera la base de donn\u00e9es. Un chemin o\u00f9 sauvegarder les rapports g\u00e9n\u00e9r\u00e9s. Pour configurer le programme, tapez: $ python3 -m oc_chess_club config Souhaitez vous modifier la configuration actuelle ? [y/N]: $ y Base de donn\u00e9es actuelle: /home/pablo/oc_chess_club/bdd.json Modifier ? [y/N]: $ n Emplacement de sauvegarde des rapports actuel: /tmp/ Modifier ? [y/N]: $ y Entrez un nouvel emplacement: $ /home/pablo/mes_rapports/ > La configuration ne comporte aucune erreur. Installer l'autocompl\u00e9tion \u00b6 L'utilisation de typer permet l'autocompl\u00e9tion des commandes. Pour l'installer tapez python3 -m oc_chess_club --install-completion Si vous avez install\u00e9 le programme via pip , la d\u00e9pendance shellingham a \u00e9t\u00e9 install\u00e9e et la commande ci-dessus fonctionnera. Dans le cas contraire vous devez pr\u00e9ciser votre shell. Les choix possibles sont bash, zsh, fish, powershell et pwsh. Tapez donc par exemple python3 -m oc_chess_club --install-completion bash . Jouer \u00b6 G\u00e9rer les tournois \u00b6 G\u00e9rer les joueurs \u00b6 G\u00e9n\u00e9rer un rapport \u00b6","title":"D\u00e9marrage"},{"location":"start/#demarrer-le-programme","text":"$ python3 -m oc_chess_club - MENU PRINCIPAL - 1. Tournois 2. G\u00e9rer les joueurs 3. G\u00e9n\u00e9rer un rapport 0. Quitter Entrez votre s\u00e9lection: : // Vous pouvez \u00e9galement simplement utiliser 'oc_chess_club' si vous avez install\u00e9 via pip. // Maintenant utilisez l'argument --help $ oc_chess_club --help Gestion des tournois et joueurs pour club d'\u00e9checs. Options: --install-completion [bash|zsh|fish|powershell|pwsh] Install completion for the specified shell. --show-completion [bash|zsh|fish|powershell|pwsh] Show completion for the specified shell, to copy it or customize the installation. --help Show this message and exit. Commands: player Affiche le menu des joueurs report Affiche le menu des rapports tournament Affiche le menu des tournois // Vous pouvez utiliser l'argument --help pour chaque commande. // Vous pouvez par exemple essayer oc_chess_club player --help","title":" D\u00e9marrer le programme"},{"location":"start/#verifier-la-configuration","text":"Le programme a besoin de deux param\u00e8tres: Un fichier .json qui sera la base de donn\u00e9es. Un chemin o\u00f9 sauvegarder les rapports g\u00e9n\u00e9r\u00e9s. Pour configurer le programme, tapez: $ python3 -m oc_chess_club config Souhaitez vous modifier la configuration actuelle ? [y/N]: $ y Base de donn\u00e9es actuelle: /home/pablo/oc_chess_club/bdd.json Modifier ? [y/N]: $ n Emplacement de sauvegarde des rapports actuel: /tmp/ Modifier ? [y/N]: $ y Entrez un nouvel emplacement: $ /home/pablo/mes_rapports/ > La configuration ne comporte aucune erreur.","title":" V\u00e9rifier la configuration"},{"location":"start/#installer-lautocompletion","text":"L'utilisation de typer permet l'autocompl\u00e9tion des commandes. Pour l'installer tapez python3 -m oc_chess_club --install-completion Si vous avez install\u00e9 le programme via pip , la d\u00e9pendance shellingham a \u00e9t\u00e9 install\u00e9e et la commande ci-dessus fonctionnera. Dans le cas contraire vous devez pr\u00e9ciser votre shell. Les choix possibles sont bash, zsh, fish, powershell et pwsh. Tapez donc par exemple python3 -m oc_chess_club --install-completion bash .","title":" Installer l'autocompl\u00e9tion"},{"location":"start/#jouer","text":"","title":" Jouer"},{"location":"start/#gerer-les-tournois","text":"","title":" G\u00e9rer les tournois"},{"location":"start/#gerer-les-joueurs","text":"","title":" G\u00e9rer les joueurs"},{"location":"start/#generer-un-rapport","text":"","title":" G\u00e9n\u00e9rer un rapport"},{"location":"tournaments/","text":"Astuce Pour acc\u00e8der directement au menu des tournois entrez oc_chess_club tournament . Cr\u00e9er un tournoi \u00b6 $ python3 -m oc_chess_club tournament new - CR\u00c9ATION D'UN TOURNOI - - Entrez les informations du tournoi. Nom du tournoi: $ Tournoi du si\u00e8cle Lieu: $ Batcave Date (JJ/MM/AAAA): $ 01 /01/1970 Nombre de round: $ 4 Contr\u00f4le du temps: $ blitz Description: $ Le grand tournoi des champions Entrez le num\u00e9ro d'un joueur \u00e0 ajouter - Liste des joueurs existants: 1. Bill Gates 2. Linus Torvalds 3. Steve Jobs 4. Ken Thompson 5. Dennis Ritchie 6. Guido van Rossum 7. Robert Martin 8. Tim Berners-Lee Joueur (0/8): $ 1 Joueur (1/8): $ 2 Joueur (2/8): $ 3 Joueur (3/8): $ 4 Joueur (4/8): $ 5 Joueur (5/8): $ 6 Joueur (6/8): $ 7 Joueur (7/8): $ 8 - Param\u00e8tres du tournoi: Nom: Tournoi du si\u00e8cle Lieu: Batcave Date: 01/01/1970 Nombre de rounds: 4 Contr\u00f4le du temps: Blitz Description: Le grand tournoi des champions - Liste des joueurs: - Bill Gates - Linus Torvalds - Steve Jobs - Ken Thompson - Dennis Ritchie - Guido van Rossum - Robert Martin - Tim Berners-Lee Souhaitez vous confirmer la cr\u00e9ation de ce tournoi ? [y/N]: $ y > Le tournoi a \u00e9t\u00e9 cr\u00e9\u00e9. Editer un tournoi \u00b6 $ python3 -m oc_chess_club tournament edit - MODIFICATION D'UN TOURNOI - - Liste des tournois existants: 1. Le tournoi du si\u00e8cle - 01/01/1970 S\u00e9lectionnez un tournoi: $ 1 - Informations actuelles du tournoi: Nom: Le tournoi du si\u00e8cle Modifier cette information? [y/N]: $ y Entrez une nouvelle valeur pour 'Nom': $ Tournoi du jour Lieu: Batcave Modifier cette information? [y/N]: $ n Date: 01/01/1970 Modifier cette information? [y/N]: $ n Description: Le grand tournoi des champion Modifier cette information? [y/N]: $ y Entrez une nouvelle valeur pour 'Description': $ Le petit tournoi des champions - Nouvelles informations du tournoi: Nom: Tournoi du jour Lieu: Batcave Date: 01/01/1970 Description: Le petit tournoi des champions Souhaitez vous confirmer la modification de ce tournoi ? [y/N]: $ y > Le tournoi n\u00b01 a \u00e9t\u00e9 modifi\u00e9. Supprimer un tournoi \u00b6 $ python3 -m oc_chess_club tournament delete - SUPPRESSION D'UN TOURNOI - - Liste des tournois existants: 1. Tournoi du jour - 01/01/1970 S\u00e9lectionnez un tournoi: $ 1 VOUS ALLEZ SUPPRIMER D\u00c9FINITIVEMENT LE TOURNOI 'TOURNOI DU JOUR' Confirmer la suppression ? [y/N]: $ y","title":"G\u00e9rer les tournois"},{"location":"tournaments/#creer-un-tournoi","text":"$ python3 -m oc_chess_club tournament new - CR\u00c9ATION D'UN TOURNOI - - Entrez les informations du tournoi. Nom du tournoi: $ Tournoi du si\u00e8cle Lieu: $ Batcave Date (JJ/MM/AAAA): $ 01 /01/1970 Nombre de round: $ 4 Contr\u00f4le du temps: $ blitz Description: $ Le grand tournoi des champions Entrez le num\u00e9ro d'un joueur \u00e0 ajouter - Liste des joueurs existants: 1. Bill Gates 2. Linus Torvalds 3. Steve Jobs 4. Ken Thompson 5. Dennis Ritchie 6. Guido van Rossum 7. Robert Martin 8. Tim Berners-Lee Joueur (0/8): $ 1 Joueur (1/8): $ 2 Joueur (2/8): $ 3 Joueur (3/8): $ 4 Joueur (4/8): $ 5 Joueur (5/8): $ 6 Joueur (6/8): $ 7 Joueur (7/8): $ 8 - Param\u00e8tres du tournoi: Nom: Tournoi du si\u00e8cle Lieu: Batcave Date: 01/01/1970 Nombre de rounds: 4 Contr\u00f4le du temps: Blitz Description: Le grand tournoi des champions - Liste des joueurs: - Bill Gates - Linus Torvalds - Steve Jobs - Ken Thompson - Dennis Ritchie - Guido van Rossum - Robert Martin - Tim Berners-Lee Souhaitez vous confirmer la cr\u00e9ation de ce tournoi ? [y/N]: $ y > Le tournoi a \u00e9t\u00e9 cr\u00e9\u00e9.","title":"Cr\u00e9er un tournoi"},{"location":"tournaments/#editer-un-tournoi","text":"$ python3 -m oc_chess_club tournament edit - MODIFICATION D'UN TOURNOI - - Liste des tournois existants: 1. Le tournoi du si\u00e8cle - 01/01/1970 S\u00e9lectionnez un tournoi: $ 1 - Informations actuelles du tournoi: Nom: Le tournoi du si\u00e8cle Modifier cette information? [y/N]: $ y Entrez une nouvelle valeur pour 'Nom': $ Tournoi du jour Lieu: Batcave Modifier cette information? [y/N]: $ n Date: 01/01/1970 Modifier cette information? [y/N]: $ n Description: Le grand tournoi des champion Modifier cette information? [y/N]: $ y Entrez une nouvelle valeur pour 'Description': $ Le petit tournoi des champions - Nouvelles informations du tournoi: Nom: Tournoi du jour Lieu: Batcave Date: 01/01/1970 Description: Le petit tournoi des champions Souhaitez vous confirmer la modification de ce tournoi ? [y/N]: $ y > Le tournoi n\u00b01 a \u00e9t\u00e9 modifi\u00e9.","title":"Editer un tournoi"},{"location":"tournaments/#supprimer-un-tournoi","text":"$ python3 -m oc_chess_club tournament delete - SUPPRESSION D'UN TOURNOI - - Liste des tournois existants: 1. Tournoi du jour - 01/01/1970 S\u00e9lectionnez un tournoi: $ 1 VOUS ALLEZ SUPPRIMER D\u00c9FINITIVEMENT LE TOURNOI 'TOURNOI DU JOUR' Confirmer la suppression ? [y/N]: $ y","title":"Supprimer un tournoi"},{"location":"reference/__init__/","text":"","title":"  init  "},{"location":"reference/__main__/","text":"","title":"  main  "},{"location":"reference/dev/","text":"","title":"Dev"},{"location":"reference/controller/config_loader/","text":"ConfigLoader \u00b6 Loader for YAML configuration file. Attributes: Name Type Description config dict Configuration settings loaded from file. __init__ ( self ) special \u00b6 Constructor for ConfigLoader. Source code in controller/config_loader.py def __init__ ( self ): \"\"\"Constructor for ConfigLoader.\"\"\" self . load_settings ()","title":"config_loader.py"},{"location":"reference/controller/config_loader/#controller.config_loader.ConfigLoader","text":"Loader for YAML configuration file. Attributes: Name Type Description config dict Configuration settings loaded from file.","title":"ConfigLoader"},{"location":"reference/controller/config_loader/#controller.config_loader.ConfigLoader.__init__","text":"Constructor for ConfigLoader. Source code in controller/config_loader.py def __init__ ( self ): \"\"\"Constructor for ConfigLoader.\"\"\" self . load_settings ()","title":"__init__()"},{"location":"reference/controller/database_handler/","text":"DatabaseHandler \u00b6 Handles all operations related to the database including CRUD for the different db elements. Attributes: Name Type Description database Database Object encapsulating the database in TinyDB format and usable tournament related objects. helper DatabaseHelper Object with helper methods to manipulate and transform db objects. players_table table.Table Instance of TinyDB \"Players\" Table. tournaments_table table.Table Instance of TinyDB \"Tournaments\" Table. rounds_table table.Table Instance of TinyDB \"Rounds\" Table. matches_table table.Table Instance of TinyDB \"Matches\" Table. __init__ ( self ) special \u00b6 Constructor for DatabaseHandler Class. Initiates database loading. Source code in controller/database_handler.py def __init__ ( self ): \"\"\"Constructor for DatabaseHandler Class. Initiates database loading.\"\"\" self . database = Database ( _CONFIG . config [ \"database_file\" ]) self . helper = DatabaseHelper ( database = self . database ) self . players_table = None self . tournaments_table = None self . rounds_table = None self . matches_table = None self . load_database () create_match ( self , players , tournament_id , round_id , winner , id_num = 0 , no_db_save = False ) \u00b6 Creates a Match object and saves it into Database attributes. Parameters: Name Type Description Default players tuple Tuple of the two facing players. required tournament_id int Match's tournament id. required round_id int Match's round id.. required winner int Match's winner. Either 1 (first player), 2 (second player) or 0 (draw). required id_num int Match's id. Defaults to 0. 0 no_db_save bool If the object only needs to be saved in memory, not in db. Defaults to False. False Source code in controller/database_handler.py def create_match ( self , players : tuple , tournament_id : int , round_id : int , winner : int , id_num : int = 0 , no_db_save : bool = False ): \"\"\"Creates a Match object and saves it into Database attributes. Args: players (tuple): Tuple of the two facing players. tournament_id (int): Match's tournament id. round_id (int): Match's round id.. winner (int): Match's winner. Either 1 (first player), 2 (second player) or 0 (draw). id_num (int, optional): Match's id. Defaults to 0. no_db_save (bool, optional): If the object only needs to be saved in memory, not in db. Defaults to False. \"\"\" if id_num == 0 : id_num = self . find_next_id ( self . matches_table ) match = Match ( players = players , tournament_id = tournament_id , round_id = round_id , winner = winner , id_num = id_num , ) self . save_match ( match = match , no_db_save = no_db_save ) create_player ( self , first_name , last_name , dob , gender , elo , id_num = 0 , is_deleted = False , no_db_save = False ) \u00b6 Creates a Player object and saves it into Database attributes. Parameters: Name Type Description Default first_name str Player's first name. required last_name str Player's last name. required dob str Player's date of birth. required gender str Player's gender. required elo int Player's ELO ranking. required id_num int Player's id. Defaults to 0. 0 is_deleted bool Is player deleted. Defaults to False. False no_db_save bool If the object only needs to be saved in memory, not in db. Defaults to False. False Returns: Type Description int Created player's id. Source code in controller/database_handler.py def create_player ( self , first_name : str , last_name : str , dob : str , gender : str , elo : int , id_num : int = 0 , is_deleted : bool = False , no_db_save : bool = False , ): \"\"\"Creates a Player object and saves it into Database attributes. Args: first_name (str): Player's first name. last_name (str): Player's last name. dob (str): Player's date of birth. gender (str): Player's gender. elo (int): Player's ELO ranking. id_num (int, optional): Player's id. Defaults to 0. is_deleted (bool, optional): Is player deleted. Defaults to False. no_db_save (bool, optional): If the object only needs to be saved in memory, not in db. Defaults to False. Returns: int: Created player's id. \"\"\" if id_num == 0 : id_num = self . find_next_id ( self . players_table ) player = Player ( first_name , last_name , dob , gender . upper (), elo , id_num , is_deleted ) self . save_player ( player = player , no_db_save = no_db_save ) return id_num create_round ( self , round_number , tournament_id , id_num = 0 , no_db_save = False ) \u00b6 Creates a Round object and saves it into Database attributes. Parameters: Name Type Description Default round_number int Ordered round number. required tournament_id int Round's tournament id. required id_num int Round id. Defaults to 0. 0 no_db_save bool If the object only needs to be saved in memory, not in db. Defaults to False. False Returns: Type Description int Created round id. Source code in controller/database_handler.py def create_round ( self , round_number : int , tournament_id : int , id_num : int = 0 , no_db_save : bool = False ): \"\"\"Creates a Round object and saves it into Database attributes. Args: round_number (int): Ordered round number. tournament_id (int): Round's tournament id. id_num (int, optional): Round id. Defaults to 0. no_db_save (bool, optional): If the object only needs to be saved in memory, not in db. Defaults to False. Returns: int: Created round id. \"\"\" if id_num == 0 : id_num = self . find_next_id ( self . rounds_table ) created_round = Round ( round_number = round_number , tournament_id = tournament_id , id_num = id_num ) self . save_round ( round_ = created_round , no_db_save = no_db_save ) return id_num create_tournament ( self , name , location , date , number_of_rounds , time_control , description , players , leaderboard , id_num = 0 , is_finished = False , no_db_save = False ) \u00b6 Creates a Tournament object and saves it into Database attributes. Parameters: Name Type Description Default name str Tournament's name. required location str Tournament's physical location. required date str Tournament's date. required number_of_rounds int Number of rounds to be played. required time_control str Type of time control chosen. required description str Tournament's description. required players list Participating players ids. required leaderboard dict Tournament's leaderboard. required id_num int Tournament's id. Defaults to 0. 0 is_finished bool Is tournament finished. Defaults to False. False no_db_save bool If the object only needs to be saved in memory, not in db. Defaults to False. False Returns: Type Description int Created tournament's id. Source code in controller/database_handler.py def create_tournament ( self , name : str , location : str , date : str , number_of_rounds : int , time_control : str , description : str , players : list [ int ], leaderboard : dict , id_num : int = 0 , is_finished : bool = False , no_db_save : bool = False , ): \"\"\"Creates a Tournament object and saves it into Database attributes. Args: name (str): Tournament's name. location (str): Tournament's physical location. date (str): Tournament's date. number_of_rounds (int): Number of rounds to be played. time_control (str): Type of time control chosen. description (str): Tournament's description. players (list[int]): Participating players ids. leaderboard (dict): Tournament's leaderboard. id_num (int, optional): Tournament's id. Defaults to 0. is_finished (bool, optional): Is tournament finished. Defaults to False. no_db_save (bool, optional): If the object only needs to be saved in memory, not in db. Defaults to False. Returns: int: Created tournament's id. \"\"\" if id_num == 0 : id_num = self . find_next_id ( self . tournaments_table ) # Create required list of Player objects from players ids. player_objects = [] for player in players : player_objects . append ( self . database . players [ player ]) # Create an empty leaderboard if it doesn't exist yet. if len ( leaderboard ) == 0 : for player in players : leaderboard [ str ( player )] = 0 tournament = Tournament ( name = name , location = location , date = date , number_of_rounds = number_of_rounds , time_control = time_control , description = description , id_num = id_num , is_finished = is_finished , players = player_objects , leaderboard = leaderboard , ) self . save_tournament ( tournament = tournament , no_db_save = no_db_save ) return id_num delete_match ( self , match ) \u00b6 Deletes a match in database. Parameters: Name Type Description Default match Match Match to be deleted. required Source code in controller/database_handler.py def delete_match ( self , match : Match ): \"\"\"Deletes a match in database. Args: match (Match): Match to be deleted. \"\"\" query = Query () self . matches_table . remove ( query . id == int ( match . id_num )) delete_player ( self , player ) \u00b6 Delete a player by setting a flag. User must persist in database for tournament history. Parameters: Name Type Description Default player Player Player to be deleted. required Source code in controller/database_handler.py def delete_player ( self , player : Player ): \"\"\"Delete a player by setting a flag. User must persist in database for tournament history. Args: player (Player): Player to be deleted. \"\"\" player . is_deleted = True self . save_player ( player = player ) delete_round ( self , round_ ) \u00b6 Deletes a round in database. Parameters: Name Type Description Default round_ Round Round to be deleted. required Source code in controller/database_handler.py def delete_round ( self , round_ : Round ): \"\"\"Deletes a round in database. Args: round_ (Round): Round to be deleted. \"\"\" for match in round_ . matches : self . delete_match ( match = round_ . matches [ match ]) query = Query () self . rounds_table . remove ( query . id == int ( round_ . id_num )) delete_tournament ( self , tournament ) \u00b6 Deletes a tournament in database. Parameters: Name Type Description Default tournament Tournament Tournament to be deleted required Source code in controller/database_handler.py def delete_tournament ( self , tournament : Tournament ): \"\"\"Deletes a tournament in database. Args: tournament (Tournament): Tournament to be deleted \"\"\" self . load_rounds ( tournament_id = tournament . id_num ) self . load_matches ( tournament_id = tournament . id_num ) for round_ in tournament . rounds : self . delete_round ( round_ = tournament . rounds [ round_ ]) query = Query () self . tournaments_table . remove ( query . id == int ( tournament . id_num )) del self . database . tournaments [ int ( tournament . id_num )] find_next_id ( self , table ) \u00b6 Searches through a TinyDB table for the next biggest id number. Parameters: Name Type Description Default table Table TinyDB table to search in. required Returns: Type Description int Next biggest id to be used. Source code in controller/database_handler.py def find_next_id ( self , table : table . Table ): \"\"\"Searches through a TinyDB table for the next biggest id number. Args: table (table.Table): TinyDB table to search in. Returns: int: Next biggest id to be used. \"\"\" if len ( table ) == 0 : return 1 query = Query () biggest = 1 while len ( table . search ( query . id >= biggest )) > 0 : biggest += 1 return biggest find_unfinished_tournaments ( self ) \u00b6 Searches through the Tournaments table for unfinished tournament. Returns: Type Description list[table.Document] Unfinished tournaments. Source code in controller/database_handler.py def find_unfinished_tournaments ( self ): \"\"\"Searches through the Tournaments table for unfinished tournament. Returns: list[table.Document]: Unfinished tournaments. \"\"\" query = Query () result = self . tournaments_table . search ( query [ \"Is Finished\" ] == False ) return result load_database ( self ) \u00b6 Instantiates the different tables in attributes and loads their content by creating corresponding objects. Source code in controller/database_handler.py def load_database ( self ): \"\"\"Instantiates the different tables in attributes and loads their content by creating corresponding objects.\"\"\" self . players_table = self . database . db . table ( \"players\" ) self . tournaments_table = self . database . db . table ( \"tournaments\" ) self . rounds_table = self . database . db . table ( \"rounds\" ) self . matches_table = self . database . db . table ( \"matches\" ) self . load_players () self . load_tournaments () load_matches ( self , tournament_id ) \u00b6 Uses TinyDB \"Matches\" table to create Match objects for one particular tournament. Parameters: Name Type Description Default tournament_id int Tournament to be considered. required Source code in controller/database_handler.py def load_matches ( self , tournament_id : int ): \"\"\"Uses TinyDB \"Matches\" table to create Match objects for one particular tournament. Args: tournament_id (int): Tournament to be considered. \"\"\" for match in self . matches_table : if match [ \"Tournament id\" ] != tournament_id : continue player_1 = self . database . players [ match [ \"Player 1\" ]] player_2 = self . database . players [ match [ \"Player 2\" ]] players = ( player_1 , player_2 ) self . create_match ( players = players , tournament_id = match [ \"Tournament id\" ], round_id = match [ \"Round id\" ], winner = match [ \"Winner\" ], id_num = match [ \"id\" ], no_db_save = True , ) load_players ( self ) \u00b6 Uses TinyDB \"Players\" table to create Player objects. Source code in controller/database_handler.py def load_players ( self ): \"\"\"Uses TinyDB \"Players\" table to create Player objects.\"\"\" for player in self . players_table : self . create_player ( first_name = player [ \"First Name\" ], last_name = player [ \"Last Name\" ], dob = player [ \"DOB\" ], gender = player [ \"Gender\" ], elo = player [ \"ELO\" ], id_num = player [ \"id\" ], is_deleted = player [ \"Is Deleted\" ], no_db_save = True , ) load_rounds ( self , tournament_id ) \u00b6 Uses TinyDB \"Rounds\" table to create Round objects for one particular tournament. Parameters: Name Type Description Default tournament_id int Tournament to be considered. required Source code in controller/database_handler.py def load_rounds ( self , tournament_id : int ): \"\"\"Uses TinyDB \"Rounds\" table to create Round objects for one particular tournament. Args: tournament_id (int): Tournament to be considered. \"\"\" for round_ in self . rounds_table : if round_ [ \"Tournament id\" ] != tournament_id : continue self . create_round ( round_number = round_ [ \"Round number\" ], tournament_id = round_ [ \"Tournament id\" ], id_num = round_ [ \"id\" ], no_db_save = True , ) load_tournaments ( self ) \u00b6 Uses TinyDB \"Tournaments\" table to create Player objects. Source code in controller/database_handler.py def load_tournaments ( self ): \"\"\"Uses TinyDB \"Tournaments\" table to create Player objects.\"\"\" for tournament in self . tournaments_table : self . create_tournament ( name = tournament [ \"Name\" ], location = tournament [ \"Location\" ], date = tournament [ \"Date\" ], number_of_rounds = tournament [ \"Number of rounds\" ], time_control = tournament [ \"Time Control\" ], description = tournament [ \"Description\" ], id_num = tournament [ \"id\" ], is_finished = tournament [ \"Is Finished\" ], players = tournament [ \"Players\" ], leaderboard = tournament [ \"Leaderboard\" ], no_db_save = True , ) save_match ( self , match , no_db_save = False ) \u00b6 Saves a Match object to memory and TinyDB. Parameters: Name Type Description Default match Match Match object to be saved. required no_db_save bool If the object only needs to be saved in memory, not in db. Defaults to False. False Source code in controller/database_handler.py def save_match ( self , match : Match , no_db_save : bool = False ): \"\"\"Saves a Match object to memory and TinyDB. Args: match (Match): Match object to be saved. no_db_save (bool, optional): If the object only needs to be saved in memory, not in db. Defaults to False. \"\"\" self . database . tournaments [ match . tournament_id ] . rounds [ match . round_id ] . matches [ match . id_num ] = match if no_db_save : return query = Query () self . matches_table . upsert ( { \"Player 1\" : match . player_1 . id_num , \"Player 2\" : match . player_2 . id_num , \"Winner\" : match . winner , \"Tournament id\" : int ( match . tournament_id ), \"Round id\" : int ( match . round_id ), \"id\" : int ( match . id_num ), }, query . id == int ( match . id_num ), ) save_player ( self , player , no_db_save = False ) \u00b6 Saves a Player object to TinyDB. Parameters: Name Type Description Default player Player Player object to be saved. required no_db_save bool If the object only needs to be saved in memory, not in db. Defaults to False. False Source code in controller/database_handler.py def save_player ( self , player : Player , no_db_save : bool = False ): \"\"\"Saves a Player object to TinyDB. Args: player (Player): Player object to be saved. no_db_save (bool, optional): If the object only needs to be saved in memory, not in db. Defaults to False. \"\"\" self . database . players [ player . id_num ] = player if no_db_save : return query = Query () self . players_table . upsert ( { \"First Name\" : player . first_name , \"Last Name\" : player . last_name , \"DOB\" : player . dob , \"Gender\" : player . gender , \"ELO\" : int ( player . elo ), \"id\" : int ( player . id_num ), \"Is Deleted\" : player . is_deleted , }, query . id == int ( player . id_num ), ) save_round ( self , round_ , no_db_save = False ) \u00b6 Saves a Round object to memory and TinyDB. Parameters: Name Type Description Default round_ Round Round object to be saved. Underscore added because of reserved keyword. required no_db_save bool If the object only needs to be saved in memory, not in db. Defaults to False. False Source code in controller/database_handler.py def save_round ( self , round_ : Round , no_db_save : bool = False ): \"\"\"Saves a Round object to memory and TinyDB. Args: round_ (Round): Round object to be saved. Underscore added because of reserved keyword. no_db_save (bool, optional): If the object only needs to be saved in memory, not in db. Defaults to False. \"\"\" self . database . tournaments [ round_ . tournament_id ] . rounds [ round_ . id_num ] = round_ if no_db_save : return query = Query () self . rounds_table . upsert ( { \"Round number\" : round_ . round_number , \"Tournament id\" : int ( round_ . tournament_id ), \"id\" : int ( round_ . id_num ), }, query . id == int ( round_ . id_num ), ) save_tournament ( self , tournament , no_db_save = False ) \u00b6 Saves a Tournament object to memory and TinyDB. Parameters: Name Type Description Default tournament Tournament Tournament object to be saved. required no_db_save bool If the object only needs to be saved in memory, not in db. Defaults to False. False Source code in controller/database_handler.py def save_tournament ( self , tournament : Tournament , no_db_save : bool = False ): \"\"\"Saves a Tournament object to memory and TinyDB. Args: tournament (Tournament): Tournament object to be saved. no_db_save (bool, optional): If the object only needs to be saved in memory, not in db. Defaults to False. \"\"\" self . database . tournaments [ tournament . id_num ] = tournament if no_db_save : return query = Query () players_id = [] for player in tournament . players : players_id . append ( player . id_num ) self . tournaments_table . upsert ( { \"Name\" : tournament . name , \"Location\" : tournament . location , \"Date\" : tournament . date , \"Number of rounds\" : int ( tournament . number_of_rounds ), \"Time Control\" : tournament . time_control , \"Description\" : tournament . description , \"Players\" : players_id , \"Leaderboard\" : tournament . leaderboard , \"Is Finished\" : tournament . is_finished , \"id\" : int ( tournament . id_num ), }, query . id == int ( tournament . id_num ), ) update_leaderboard ( self , tournament_id , player_id , points_earned ) \u00b6 Updates a tournament's leaderboard by adding points to a player. Parameters: Name Type Description Default tournament_id int Tounament's id. required player_id int Player's id. required points_earned float Points earned by the player. required Source code in controller/database_handler.py def update_leaderboard ( self , tournament_id : int , player_id : int , points_earned : float ): \"\"\"Updates a tournament's leaderboard by adding points to a player. Args: tournament_id (int): Tounament's id. player_id (int): Player's id. points_earned (float): Points earned by the player. \"\"\" tournament = self . database . tournaments [ tournament_id ] tournament . leaderboard [ str ( player_id )] += points_earned self . save_tournament ( tournament = tournament ) SingletonMeta \u00b6 Meta for singleton application. As DataHandler will be used by different modules there is no need to load the database multiple time. Singleton was kept simple and is currently not thread safe.","title":"database_handler.py"},{"location":"reference/controller/database_handler/#controller.database_handler.DatabaseHandler","text":"Handles all operations related to the database including CRUD for the different db elements. Attributes: Name Type Description database Database Object encapsulating the database in TinyDB format and usable tournament related objects. helper DatabaseHelper Object with helper methods to manipulate and transform db objects. players_table table.Table Instance of TinyDB \"Players\" Table. tournaments_table table.Table Instance of TinyDB \"Tournaments\" Table. rounds_table table.Table Instance of TinyDB \"Rounds\" Table. matches_table table.Table Instance of TinyDB \"Matches\" Table.","title":"DatabaseHandler"},{"location":"reference/controller/database_handler/#controller.database_handler.DatabaseHandler.__init__","text":"Constructor for DatabaseHandler Class. Initiates database loading. Source code in controller/database_handler.py def __init__ ( self ): \"\"\"Constructor for DatabaseHandler Class. Initiates database loading.\"\"\" self . database = Database ( _CONFIG . config [ \"database_file\" ]) self . helper = DatabaseHelper ( database = self . database ) self . players_table = None self . tournaments_table = None self . rounds_table = None self . matches_table = None self . load_database ()","title":"__init__()"},{"location":"reference/controller/database_handler/#controller.database_handler.DatabaseHandler.create_match","text":"Creates a Match object and saves it into Database attributes. Parameters: Name Type Description Default players tuple Tuple of the two facing players. required tournament_id int Match's tournament id. required round_id int Match's round id.. required winner int Match's winner. Either 1 (first player), 2 (second player) or 0 (draw). required id_num int Match's id. Defaults to 0. 0 no_db_save bool If the object only needs to be saved in memory, not in db. Defaults to False. False Source code in controller/database_handler.py def create_match ( self , players : tuple , tournament_id : int , round_id : int , winner : int , id_num : int = 0 , no_db_save : bool = False ): \"\"\"Creates a Match object and saves it into Database attributes. Args: players (tuple): Tuple of the two facing players. tournament_id (int): Match's tournament id. round_id (int): Match's round id.. winner (int): Match's winner. Either 1 (first player), 2 (second player) or 0 (draw). id_num (int, optional): Match's id. Defaults to 0. no_db_save (bool, optional): If the object only needs to be saved in memory, not in db. Defaults to False. \"\"\" if id_num == 0 : id_num = self . find_next_id ( self . matches_table ) match = Match ( players = players , tournament_id = tournament_id , round_id = round_id , winner = winner , id_num = id_num , ) self . save_match ( match = match , no_db_save = no_db_save )","title":"create_match()"},{"location":"reference/controller/database_handler/#controller.database_handler.DatabaseHandler.create_player","text":"Creates a Player object and saves it into Database attributes. Parameters: Name Type Description Default first_name str Player's first name. required last_name str Player's last name. required dob str Player's date of birth. required gender str Player's gender. required elo int Player's ELO ranking. required id_num int Player's id. Defaults to 0. 0 is_deleted bool Is player deleted. Defaults to False. False no_db_save bool If the object only needs to be saved in memory, not in db. Defaults to False. False Returns: Type Description int Created player's id. Source code in controller/database_handler.py def create_player ( self , first_name : str , last_name : str , dob : str , gender : str , elo : int , id_num : int = 0 , is_deleted : bool = False , no_db_save : bool = False , ): \"\"\"Creates a Player object and saves it into Database attributes. Args: first_name (str): Player's first name. last_name (str): Player's last name. dob (str): Player's date of birth. gender (str): Player's gender. elo (int): Player's ELO ranking. id_num (int, optional): Player's id. Defaults to 0. is_deleted (bool, optional): Is player deleted. Defaults to False. no_db_save (bool, optional): If the object only needs to be saved in memory, not in db. Defaults to False. Returns: int: Created player's id. \"\"\" if id_num == 0 : id_num = self . find_next_id ( self . players_table ) player = Player ( first_name , last_name , dob , gender . upper (), elo , id_num , is_deleted ) self . save_player ( player = player , no_db_save = no_db_save ) return id_num","title":"create_player()"},{"location":"reference/controller/database_handler/#controller.database_handler.DatabaseHandler.create_round","text":"Creates a Round object and saves it into Database attributes. Parameters: Name Type Description Default round_number int Ordered round number. required tournament_id int Round's tournament id. required id_num int Round id. Defaults to 0. 0 no_db_save bool If the object only needs to be saved in memory, not in db. Defaults to False. False Returns: Type Description int Created round id. Source code in controller/database_handler.py def create_round ( self , round_number : int , tournament_id : int , id_num : int = 0 , no_db_save : bool = False ): \"\"\"Creates a Round object and saves it into Database attributes. Args: round_number (int): Ordered round number. tournament_id (int): Round's tournament id. id_num (int, optional): Round id. Defaults to 0. no_db_save (bool, optional): If the object only needs to be saved in memory, not in db. Defaults to False. Returns: int: Created round id. \"\"\" if id_num == 0 : id_num = self . find_next_id ( self . rounds_table ) created_round = Round ( round_number = round_number , tournament_id = tournament_id , id_num = id_num ) self . save_round ( round_ = created_round , no_db_save = no_db_save ) return id_num","title":"create_round()"},{"location":"reference/controller/database_handler/#controller.database_handler.DatabaseHandler.create_tournament","text":"Creates a Tournament object and saves it into Database attributes. Parameters: Name Type Description Default name str Tournament's name. required location str Tournament's physical location. required date str Tournament's date. required number_of_rounds int Number of rounds to be played. required time_control str Type of time control chosen. required description str Tournament's description. required players list Participating players ids. required leaderboard dict Tournament's leaderboard. required id_num int Tournament's id. Defaults to 0. 0 is_finished bool Is tournament finished. Defaults to False. False no_db_save bool If the object only needs to be saved in memory, not in db. Defaults to False. False Returns: Type Description int Created tournament's id. Source code in controller/database_handler.py def create_tournament ( self , name : str , location : str , date : str , number_of_rounds : int , time_control : str , description : str , players : list [ int ], leaderboard : dict , id_num : int = 0 , is_finished : bool = False , no_db_save : bool = False , ): \"\"\"Creates a Tournament object and saves it into Database attributes. Args: name (str): Tournament's name. location (str): Tournament's physical location. date (str): Tournament's date. number_of_rounds (int): Number of rounds to be played. time_control (str): Type of time control chosen. description (str): Tournament's description. players (list[int]): Participating players ids. leaderboard (dict): Tournament's leaderboard. id_num (int, optional): Tournament's id. Defaults to 0. is_finished (bool, optional): Is tournament finished. Defaults to False. no_db_save (bool, optional): If the object only needs to be saved in memory, not in db. Defaults to False. Returns: int: Created tournament's id. \"\"\" if id_num == 0 : id_num = self . find_next_id ( self . tournaments_table ) # Create required list of Player objects from players ids. player_objects = [] for player in players : player_objects . append ( self . database . players [ player ]) # Create an empty leaderboard if it doesn't exist yet. if len ( leaderboard ) == 0 : for player in players : leaderboard [ str ( player )] = 0 tournament = Tournament ( name = name , location = location , date = date , number_of_rounds = number_of_rounds , time_control = time_control , description = description , id_num = id_num , is_finished = is_finished , players = player_objects , leaderboard = leaderboard , ) self . save_tournament ( tournament = tournament , no_db_save = no_db_save ) return id_num","title":"create_tournament()"},{"location":"reference/controller/database_handler/#controller.database_handler.DatabaseHandler.delete_match","text":"Deletes a match in database. Parameters: Name Type Description Default match Match Match to be deleted. required Source code in controller/database_handler.py def delete_match ( self , match : Match ): \"\"\"Deletes a match in database. Args: match (Match): Match to be deleted. \"\"\" query = Query () self . matches_table . remove ( query . id == int ( match . id_num ))","title":"delete_match()"},{"location":"reference/controller/database_handler/#controller.database_handler.DatabaseHandler.delete_player","text":"Delete a player by setting a flag. User must persist in database for tournament history. Parameters: Name Type Description Default player Player Player to be deleted. required Source code in controller/database_handler.py def delete_player ( self , player : Player ): \"\"\"Delete a player by setting a flag. User must persist in database for tournament history. Args: player (Player): Player to be deleted. \"\"\" player . is_deleted = True self . save_player ( player = player )","title":"delete_player()"},{"location":"reference/controller/database_handler/#controller.database_handler.DatabaseHandler.delete_round","text":"Deletes a round in database. Parameters: Name Type Description Default round_ Round Round to be deleted. required Source code in controller/database_handler.py def delete_round ( self , round_ : Round ): \"\"\"Deletes a round in database. Args: round_ (Round): Round to be deleted. \"\"\" for match in round_ . matches : self . delete_match ( match = round_ . matches [ match ]) query = Query () self . rounds_table . remove ( query . id == int ( round_ . id_num ))","title":"delete_round()"},{"location":"reference/controller/database_handler/#controller.database_handler.DatabaseHandler.delete_tournament","text":"Deletes a tournament in database. Parameters: Name Type Description Default tournament Tournament Tournament to be deleted required Source code in controller/database_handler.py def delete_tournament ( self , tournament : Tournament ): \"\"\"Deletes a tournament in database. Args: tournament (Tournament): Tournament to be deleted \"\"\" self . load_rounds ( tournament_id = tournament . id_num ) self . load_matches ( tournament_id = tournament . id_num ) for round_ in tournament . rounds : self . delete_round ( round_ = tournament . rounds [ round_ ]) query = Query () self . tournaments_table . remove ( query . id == int ( tournament . id_num )) del self . database . tournaments [ int ( tournament . id_num )]","title":"delete_tournament()"},{"location":"reference/controller/database_handler/#controller.database_handler.DatabaseHandler.find_next_id","text":"Searches through a TinyDB table for the next biggest id number. Parameters: Name Type Description Default table Table TinyDB table to search in. required Returns: Type Description int Next biggest id to be used. Source code in controller/database_handler.py def find_next_id ( self , table : table . Table ): \"\"\"Searches through a TinyDB table for the next biggest id number. Args: table (table.Table): TinyDB table to search in. Returns: int: Next biggest id to be used. \"\"\" if len ( table ) == 0 : return 1 query = Query () biggest = 1 while len ( table . search ( query . id >= biggest )) > 0 : biggest += 1 return biggest","title":"find_next_id()"},{"location":"reference/controller/database_handler/#controller.database_handler.DatabaseHandler.find_unfinished_tournaments","text":"Searches through the Tournaments table for unfinished tournament. Returns: Type Description list[table.Document] Unfinished tournaments. Source code in controller/database_handler.py def find_unfinished_tournaments ( self ): \"\"\"Searches through the Tournaments table for unfinished tournament. Returns: list[table.Document]: Unfinished tournaments. \"\"\" query = Query () result = self . tournaments_table . search ( query [ \"Is Finished\" ] == False ) return result","title":"find_unfinished_tournaments()"},{"location":"reference/controller/database_handler/#controller.database_handler.DatabaseHandler.load_database","text":"Instantiates the different tables in attributes and loads their content by creating corresponding objects. Source code in controller/database_handler.py def load_database ( self ): \"\"\"Instantiates the different tables in attributes and loads their content by creating corresponding objects.\"\"\" self . players_table = self . database . db . table ( \"players\" ) self . tournaments_table = self . database . db . table ( \"tournaments\" ) self . rounds_table = self . database . db . table ( \"rounds\" ) self . matches_table = self . database . db . table ( \"matches\" ) self . load_players () self . load_tournaments ()","title":"load_database()"},{"location":"reference/controller/database_handler/#controller.database_handler.DatabaseHandler.load_matches","text":"Uses TinyDB \"Matches\" table to create Match objects for one particular tournament. Parameters: Name Type Description Default tournament_id int Tournament to be considered. required Source code in controller/database_handler.py def load_matches ( self , tournament_id : int ): \"\"\"Uses TinyDB \"Matches\" table to create Match objects for one particular tournament. Args: tournament_id (int): Tournament to be considered. \"\"\" for match in self . matches_table : if match [ \"Tournament id\" ] != tournament_id : continue player_1 = self . database . players [ match [ \"Player 1\" ]] player_2 = self . database . players [ match [ \"Player 2\" ]] players = ( player_1 , player_2 ) self . create_match ( players = players , tournament_id = match [ \"Tournament id\" ], round_id = match [ \"Round id\" ], winner = match [ \"Winner\" ], id_num = match [ \"id\" ], no_db_save = True , )","title":"load_matches()"},{"location":"reference/controller/database_handler/#controller.database_handler.DatabaseHandler.load_players","text":"Uses TinyDB \"Players\" table to create Player objects. Source code in controller/database_handler.py def load_players ( self ): \"\"\"Uses TinyDB \"Players\" table to create Player objects.\"\"\" for player in self . players_table : self . create_player ( first_name = player [ \"First Name\" ], last_name = player [ \"Last Name\" ], dob = player [ \"DOB\" ], gender = player [ \"Gender\" ], elo = player [ \"ELO\" ], id_num = player [ \"id\" ], is_deleted = player [ \"Is Deleted\" ], no_db_save = True , )","title":"load_players()"},{"location":"reference/controller/database_handler/#controller.database_handler.DatabaseHandler.load_rounds","text":"Uses TinyDB \"Rounds\" table to create Round objects for one particular tournament. Parameters: Name Type Description Default tournament_id int Tournament to be considered. required Source code in controller/database_handler.py def load_rounds ( self , tournament_id : int ): \"\"\"Uses TinyDB \"Rounds\" table to create Round objects for one particular tournament. Args: tournament_id (int): Tournament to be considered. \"\"\" for round_ in self . rounds_table : if round_ [ \"Tournament id\" ] != tournament_id : continue self . create_round ( round_number = round_ [ \"Round number\" ], tournament_id = round_ [ \"Tournament id\" ], id_num = round_ [ \"id\" ], no_db_save = True , )","title":"load_rounds()"},{"location":"reference/controller/database_handler/#controller.database_handler.DatabaseHandler.load_tournaments","text":"Uses TinyDB \"Tournaments\" table to create Player objects. Source code in controller/database_handler.py def load_tournaments ( self ): \"\"\"Uses TinyDB \"Tournaments\" table to create Player objects.\"\"\" for tournament in self . tournaments_table : self . create_tournament ( name = tournament [ \"Name\" ], location = tournament [ \"Location\" ], date = tournament [ \"Date\" ], number_of_rounds = tournament [ \"Number of rounds\" ], time_control = tournament [ \"Time Control\" ], description = tournament [ \"Description\" ], id_num = tournament [ \"id\" ], is_finished = tournament [ \"Is Finished\" ], players = tournament [ \"Players\" ], leaderboard = tournament [ \"Leaderboard\" ], no_db_save = True , )","title":"load_tournaments()"},{"location":"reference/controller/database_handler/#controller.database_handler.DatabaseHandler.save_match","text":"Saves a Match object to memory and TinyDB. Parameters: Name Type Description Default match Match Match object to be saved. required no_db_save bool If the object only needs to be saved in memory, not in db. Defaults to False. False Source code in controller/database_handler.py def save_match ( self , match : Match , no_db_save : bool = False ): \"\"\"Saves a Match object to memory and TinyDB. Args: match (Match): Match object to be saved. no_db_save (bool, optional): If the object only needs to be saved in memory, not in db. Defaults to False. \"\"\" self . database . tournaments [ match . tournament_id ] . rounds [ match . round_id ] . matches [ match . id_num ] = match if no_db_save : return query = Query () self . matches_table . upsert ( { \"Player 1\" : match . player_1 . id_num , \"Player 2\" : match . player_2 . id_num , \"Winner\" : match . winner , \"Tournament id\" : int ( match . tournament_id ), \"Round id\" : int ( match . round_id ), \"id\" : int ( match . id_num ), }, query . id == int ( match . id_num ), )","title":"save_match()"},{"location":"reference/controller/database_handler/#controller.database_handler.DatabaseHandler.save_player","text":"Saves a Player object to TinyDB. Parameters: Name Type Description Default player Player Player object to be saved. required no_db_save bool If the object only needs to be saved in memory, not in db. Defaults to False. False Source code in controller/database_handler.py def save_player ( self , player : Player , no_db_save : bool = False ): \"\"\"Saves a Player object to TinyDB. Args: player (Player): Player object to be saved. no_db_save (bool, optional): If the object only needs to be saved in memory, not in db. Defaults to False. \"\"\" self . database . players [ player . id_num ] = player if no_db_save : return query = Query () self . players_table . upsert ( { \"First Name\" : player . first_name , \"Last Name\" : player . last_name , \"DOB\" : player . dob , \"Gender\" : player . gender , \"ELO\" : int ( player . elo ), \"id\" : int ( player . id_num ), \"Is Deleted\" : player . is_deleted , }, query . id == int ( player . id_num ), )","title":"save_player()"},{"location":"reference/controller/database_handler/#controller.database_handler.DatabaseHandler.save_round","text":"Saves a Round object to memory and TinyDB. Parameters: Name Type Description Default round_ Round Round object to be saved. Underscore added because of reserved keyword. required no_db_save bool If the object only needs to be saved in memory, not in db. Defaults to False. False Source code in controller/database_handler.py def save_round ( self , round_ : Round , no_db_save : bool = False ): \"\"\"Saves a Round object to memory and TinyDB. Args: round_ (Round): Round object to be saved. Underscore added because of reserved keyword. no_db_save (bool, optional): If the object only needs to be saved in memory, not in db. Defaults to False. \"\"\" self . database . tournaments [ round_ . tournament_id ] . rounds [ round_ . id_num ] = round_ if no_db_save : return query = Query () self . rounds_table . upsert ( { \"Round number\" : round_ . round_number , \"Tournament id\" : int ( round_ . tournament_id ), \"id\" : int ( round_ . id_num ), }, query . id == int ( round_ . id_num ), )","title":"save_round()"},{"location":"reference/controller/database_handler/#controller.database_handler.DatabaseHandler.save_tournament","text":"Saves a Tournament object to memory and TinyDB. Parameters: Name Type Description Default tournament Tournament Tournament object to be saved. required no_db_save bool If the object only needs to be saved in memory, not in db. Defaults to False. False Source code in controller/database_handler.py def save_tournament ( self , tournament : Tournament , no_db_save : bool = False ): \"\"\"Saves a Tournament object to memory and TinyDB. Args: tournament (Tournament): Tournament object to be saved. no_db_save (bool, optional): If the object only needs to be saved in memory, not in db. Defaults to False. \"\"\" self . database . tournaments [ tournament . id_num ] = tournament if no_db_save : return query = Query () players_id = [] for player in tournament . players : players_id . append ( player . id_num ) self . tournaments_table . upsert ( { \"Name\" : tournament . name , \"Location\" : tournament . location , \"Date\" : tournament . date , \"Number of rounds\" : int ( tournament . number_of_rounds ), \"Time Control\" : tournament . time_control , \"Description\" : tournament . description , \"Players\" : players_id , \"Leaderboard\" : tournament . leaderboard , \"Is Finished\" : tournament . is_finished , \"id\" : int ( tournament . id_num ), }, query . id == int ( tournament . id_num ), )","title":"save_tournament()"},{"location":"reference/controller/database_handler/#controller.database_handler.DatabaseHandler.update_leaderboard","text":"Updates a tournament's leaderboard by adding points to a player. Parameters: Name Type Description Default tournament_id int Tounament's id. required player_id int Player's id. required points_earned float Points earned by the player. required Source code in controller/database_handler.py def update_leaderboard ( self , tournament_id : int , player_id : int , points_earned : float ): \"\"\"Updates a tournament's leaderboard by adding points to a player. Args: tournament_id (int): Tounament's id. player_id (int): Player's id. points_earned (float): Points earned by the player. \"\"\" tournament = self . database . tournaments [ tournament_id ] tournament . leaderboard [ str ( player_id )] += points_earned self . save_tournament ( tournament = tournament )","title":"update_leaderboard()"},{"location":"reference/controller/database_handler/#controller.database_handler.SingletonMeta","text":"Meta for singleton application. As DataHandler will be used by different modules there is no need to load the database multiple time. Singleton was kept simple and is currently not thread safe.","title":"SingletonMeta"},{"location":"reference/controller/database_helper/","text":"DatabaseHelper \u00b6 Helper class encapsulating methods to manipulate and transform database objects. Attributes: Name Type Description database Database Instance of database handler database. __init__ ( self , database ) special \u00b6 Constructor for DatabaseHelper. Parameters: Name Type Description Default database Database Instance of database handler database. required Source code in controller/database_helper.py def __init__ ( self , database : Database ): \"\"\"Constructor for DatabaseHelper. Args: database (Database): Instance of database handler database. \"\"\" self . database = database get_all_matches ( self , tournament ) \u00b6 Lists all matches of a tournament. Parameters: Name Type Description Default tournament Tournament Tournament objects to be considered. required Returns: Type Description list[tuple[Player]] List of all matches' player pairing. Source code in controller/database_helper.py def get_all_matches ( self , tournament : Tournament ): \"\"\"Lists all matches of a tournament. Args: tournament (Tournament): Tournament objects to be considered. Returns: list[tuple[Player]]: List of all matches' player pairing. \"\"\" match_list = [] for round_id in tournament . rounds : for match_id in tournament . rounds [ round_id ] . matches : player_1 = tournament . rounds [ round_id ] . matches [ match_id ] . player_1 player_2 = tournament . rounds [ round_id ] . matches [ match_id ] . player_2 match_list . append (( player_1 . id_num , player_2 . id_num )) return match_list get_all_player_objects ( self ) \u00b6 Generates a list of all existing players in database. Returns: Type Description list[Player] All existing players in database. Source code in controller/database_helper.py def get_all_player_objects ( self ): \"\"\"Generates a list of all existing players in database. Returns: list[Player]: All existing players in database. \"\"\" players_list = [] for player_id in self . database . players : if self . database . players [ id_num ] . is_deleted : continue players_list . append ( self . database . players [ player_id ]) return players_list get_all_tournament_objects ( self ) \u00b6 Generates a list of all existing tournaments in database. Returns: Type Description list[Tournament] All existing tournaments in database. Source code in controller/database_helper.py def get_all_tournament_objects ( self ): \"\"\"Generates a list of all existing tournaments in database. Returns: list[Tournament]: All existing tournaments in database. \"\"\" tournament_list = [] for tournament_id in self . database . tournaments : tournament_list . append ( self . database . tournaments [ tournament_id ]) return tournament_list get_formated_leaderboard ( self , leaderboard ) \u00b6 Formats a Leaderboard dict to a list of players names and scores, sorted by points. Parameters: Name Type Description Default leaderboard dict Leaderboard to be formated. required Returns: Type Description list List of players names and scores. Source code in controller/database_helper.py def get_formated_leaderboard ( self , leaderboard : dict ): \"\"\"Formats a Leaderboard dict to a list of players names and scores, sorted by points. Args: leaderboard (dict): Leaderboard to be formated. Returns: list: List of players names and scores. \"\"\" ordered_leaderboard = [( k , v ) for k , v in sorted ( leaderboard . items (), key = lambda item : item [ 1 ], reverse = True )] formated_leaderboard = [] for player in ordered_leaderboard : formated_leaderboard . append (( self . get_player_name_from_id ( player_id = int ( player [ 0 ])), player [ 1 ])) return formated_leaderboard get_player_name_from_id ( self , player_id ) \u00b6 Searches through all players to find requested player's name. Parameters: Name Type Description Default player_id int Id of player to be searched. required Returns: Type Description str Player's first and last name. Source code in controller/database_helper.py def get_player_name_from_id ( self , player_id : int ): \"\"\"Searches through all players to find requested player's name. Args: player_id (int): Id of player to be searched. Returns: str: Player's first and last name. \"\"\" for player in self . database . players : if self . database . players [ player ] . id_num == player_id : name = f \" { self . database . players [ player ] . first_name } { self . database . players [ player ] . last_name } \" return name get_player_object_from_id_str ( self , player_id ) \u00b6 Searches through all players to find requested player. Parameters: Name Type Description Default player_id str Id of player to be searched. required Returns: Type Description Player Requested Player object. Source code in controller/database_helper.py def get_player_object_from_id_str ( self , player_id : str ): \"\"\"Searches through all players to find requested player. Args: player_id (str): Id of player to be searched. Returns: Player: Requested Player object. \"\"\" for player in self . database . players : if str ( player ) == player_id : return self . database . players [ player ] get_players_by_elo ( self , players_sample = None ) \u00b6 Lists all players in sample by ELO ranking. Parameters: Name Type Description Default players_sample dict Sample to search in. Defaults to None. None Returns: Type Description list List of all players ordered by ELO ranking. Source code in controller/database_helper.py def get_players_by_elo ( self , players_sample : dict = None ): \"\"\"Lists all players in sample by ELO ranking. Args: players_sample (dict, optional): Sample to search in. Defaults to None. Returns: list: List of all players ordered by ELO ranking. \"\"\" if players_sample is None : players_sample = self . database . players ordered_ids = sorted ( players_sample , key = lambda x : players_sample [ x ] . elo , reverse = True ) ordered_players = [] for id_num in ordered_ids : if self . database . players [ id_num ] . is_deleted : continue ordered_players . append ( self . database . players [ id_num ]) return ordered_players get_players_by_id ( self ) \u00b6 Lists all database players sorted by id. Returns: Type Description list List of all players ordered by id. Source code in controller/database_helper.py def get_players_by_id ( self ): \"\"\"Lists all database players sorted by id. Returns: list: List of all players ordered by id. \"\"\" ordered_ids = sorted ( self . database . players , key = lambda x : x ) ordered_players = [] for id_num in ordered_ids : if self . database . players [ id_num ] . is_deleted : continue ordered_players . append ( self . database . players [ id_num ]) return ordered_players get_players_by_name ( self , players_sample = None ) \u00b6 Lists all players in sample by name. Parameters: Name Type Description Default players_sample dict Sample to search in. Defaults to None. None Returns: Type Description list List of all players ordered by ELO name. Source code in controller/database_helper.py def get_players_by_name ( self , players_sample : dict = None ): \"\"\"Lists all players in sample by name. Args: players_sample (dict, optional): Sample to search in. Defaults to None. Returns: list: List of all players ordered by ELO name. \"\"\" if players_sample is None : players_sample = self . database . players print ( players_sample ) ordered_ids = sorted ( players_sample , key = lambda x : players_sample [ x ] . last_name ) ordered_players = [] for id_num in ordered_ids : if self . database . players [ id_num ] . is_deleted : continue ordered_players . append ( self . database . players [ id_num ]) return ordered_players get_players_names ( self , players_sample ) \u00b6 Return a list of players names from a list of Player objects. Parameters: Name Type Description Default players_sample list Sample to search in. required Returns: Type Description list List of players name. Source code in controller/database_helper.py def get_players_names ( self , players_sample : list ): \"\"\"Return a list of players names from a list of Player objects. Args: players_sample (dict): Sample to search in. Returns: list: List of players name. \"\"\" return [ self . get_player_name_from_id ( player_id = x ) for x in players_sample ] get_tournament_object_from_id_str ( self , tournament_id ) \u00b6 Searches through all of tournaments to find requested tournament. Parameters: Name Type Description Default tournament_id str Id of tournament to be searched. required Returns: Type Description Tournament Requested Tournament object. Source code in controller/database_helper.py def get_tournament_object_from_id_str ( self , tournament_id : str ): \"\"\"Searches through all of tournaments to find requested tournament. Args: tournament_id (str): Id of tournament to be searched. Returns: Tournament: Requested Tournament object. \"\"\" for tournament in self . database . tournaments : if str ( tournament ) == tournament_id : return self . database . tournaments [ tournament ] get_tournaments_by_id ( self ) \u00b6 Lists all database tournaments sorted by id. Returns: Type Description list List of all tournaments ordered by id. Source code in controller/database_helper.py def get_tournaments_by_id ( self ): \"\"\"Lists all database tournaments sorted by id. Returns: list: List of all tournaments ordered by id. \"\"\" ordered_ids = sorted ( self . database . tournaments , key = lambda x : x ) ordered_tournaments = [] for id_num in ordered_ids : ordered_tournaments . append ( self . database . tournaments [ id_num ]) return ordered_tournaments get_unfinished_tournaments ( self ) \u00b6 Searches through the database for unfinished tournament. Returns: Type Description list[Tournament] Unfinished tournaments. Source code in controller/database_helper.py def get_unfinished_tournaments ( self ): \"\"\"Searches through the database for unfinished tournament. Returns: list[Tournament]: Unfinished tournaments. \"\"\" unfinished_tournaments = [] for tournament in self . database . tournaments : if not self . database . tournaments [ tournament ] . is_finished : unfinished_tournaments . append ( self . database . tournaments [ tournament ]) return unfinished_tournaments is_player_db_empty ( self ) \u00b6 Verifies if there is no player in database. Returns: Type Description bool No player in database. Source code in controller/database_helper.py def is_player_db_empty ( self ): \"\"\"Verifies if there is no player in database. Returns: bool: No player in database. \"\"\" if len ( self . database . players ) == 0 : return True else : return False is_player_id_in_database ( self , player_id ) \u00b6 Verifies if a given player id exists in database. Parameters: Name Type Description Default player_id int Player id to verify. required Returns: Type Description bool Player id exists in database. Source code in controller/database_helper.py def is_player_id_in_database ( self , player_id : int ): \"\"\"Verifies if a given player id exists in database. Args: player_id (int): Player id to verify. Returns: bool: Player id exists in database. \"\"\" if player_id in self . database . players : if self . database . players [ player_id ] . is_deleted : return False else : return True else : return False is_tournament_db_empty ( self ) \u00b6 Verifies if there is no tournament in database. Returns: Type Description bool No tournament in database. Source code in controller/database_helper.py def is_tournament_db_empty ( self ): \"\"\"Verifies if there is no tournament in database. Returns: bool: No tournament in database. \"\"\" if len ( self . database . tournaments ) == 0 : return True else : return False is_tournament_id_in_database ( self , tournament_id ) \u00b6 Verifies if a given tournament id exists in database. Parameters: Name Type Description Default tournament_id int Tournament id to verify. required Returns: Type Description bool Tournament id exists in database. Source code in controller/database_helper.py def is_tournament_id_in_database ( self , tournament_id : int ): \"\"\"Verifies if a given tournament id exists in database. Args: tournament_id (int): Tournament id to verify. Returns: bool: Tournament id exists in database. \"\"\" if tournament_id in self . database . tournaments : return True else : return False","title":"database_helper.py"},{"location":"reference/controller/database_helper/#controller.database_helper.DatabaseHelper","text":"Helper class encapsulating methods to manipulate and transform database objects. Attributes: Name Type Description database Database Instance of database handler database.","title":"DatabaseHelper"},{"location":"reference/controller/database_helper/#controller.database_helper.DatabaseHelper.__init__","text":"Constructor for DatabaseHelper. Parameters: Name Type Description Default database Database Instance of database handler database. required Source code in controller/database_helper.py def __init__ ( self , database : Database ): \"\"\"Constructor for DatabaseHelper. Args: database (Database): Instance of database handler database. \"\"\" self . database = database","title":"__init__()"},{"location":"reference/controller/database_helper/#controller.database_helper.DatabaseHelper.get_all_matches","text":"Lists all matches of a tournament. Parameters: Name Type Description Default tournament Tournament Tournament objects to be considered. required Returns: Type Description list[tuple[Player]] List of all matches' player pairing. Source code in controller/database_helper.py def get_all_matches ( self , tournament : Tournament ): \"\"\"Lists all matches of a tournament. Args: tournament (Tournament): Tournament objects to be considered. Returns: list[tuple[Player]]: List of all matches' player pairing. \"\"\" match_list = [] for round_id in tournament . rounds : for match_id in tournament . rounds [ round_id ] . matches : player_1 = tournament . rounds [ round_id ] . matches [ match_id ] . player_1 player_2 = tournament . rounds [ round_id ] . matches [ match_id ] . player_2 match_list . append (( player_1 . id_num , player_2 . id_num )) return match_list","title":"get_all_matches()"},{"location":"reference/controller/database_helper/#controller.database_helper.DatabaseHelper.get_all_player_objects","text":"Generates a list of all existing players in database. Returns: Type Description list[Player] All existing players in database. Source code in controller/database_helper.py def get_all_player_objects ( self ): \"\"\"Generates a list of all existing players in database. Returns: list[Player]: All existing players in database. \"\"\" players_list = [] for player_id in self . database . players : if self . database . players [ id_num ] . is_deleted : continue players_list . append ( self . database . players [ player_id ]) return players_list","title":"get_all_player_objects()"},{"location":"reference/controller/database_helper/#controller.database_helper.DatabaseHelper.get_all_tournament_objects","text":"Generates a list of all existing tournaments in database. Returns: Type Description list[Tournament] All existing tournaments in database. Source code in controller/database_helper.py def get_all_tournament_objects ( self ): \"\"\"Generates a list of all existing tournaments in database. Returns: list[Tournament]: All existing tournaments in database. \"\"\" tournament_list = [] for tournament_id in self . database . tournaments : tournament_list . append ( self . database . tournaments [ tournament_id ]) return tournament_list","title":"get_all_tournament_objects()"},{"location":"reference/controller/database_helper/#controller.database_helper.DatabaseHelper.get_formated_leaderboard","text":"Formats a Leaderboard dict to a list of players names and scores, sorted by points. Parameters: Name Type Description Default leaderboard dict Leaderboard to be formated. required Returns: Type Description list List of players names and scores. Source code in controller/database_helper.py def get_formated_leaderboard ( self , leaderboard : dict ): \"\"\"Formats a Leaderboard dict to a list of players names and scores, sorted by points. Args: leaderboard (dict): Leaderboard to be formated. Returns: list: List of players names and scores. \"\"\" ordered_leaderboard = [( k , v ) for k , v in sorted ( leaderboard . items (), key = lambda item : item [ 1 ], reverse = True )] formated_leaderboard = [] for player in ordered_leaderboard : formated_leaderboard . append (( self . get_player_name_from_id ( player_id = int ( player [ 0 ])), player [ 1 ])) return formated_leaderboard","title":"get_formated_leaderboard()"},{"location":"reference/controller/database_helper/#controller.database_helper.DatabaseHelper.get_player_name_from_id","text":"Searches through all players to find requested player's name. Parameters: Name Type Description Default player_id int Id of player to be searched. required Returns: Type Description str Player's first and last name. Source code in controller/database_helper.py def get_player_name_from_id ( self , player_id : int ): \"\"\"Searches through all players to find requested player's name. Args: player_id (int): Id of player to be searched. Returns: str: Player's first and last name. \"\"\" for player in self . database . players : if self . database . players [ player ] . id_num == player_id : name = f \" { self . database . players [ player ] . first_name } { self . database . players [ player ] . last_name } \" return name","title":"get_player_name_from_id()"},{"location":"reference/controller/database_helper/#controller.database_helper.DatabaseHelper.get_player_object_from_id_str","text":"Searches through all players to find requested player. Parameters: Name Type Description Default player_id str Id of player to be searched. required Returns: Type Description Player Requested Player object. Source code in controller/database_helper.py def get_player_object_from_id_str ( self , player_id : str ): \"\"\"Searches through all players to find requested player. Args: player_id (str): Id of player to be searched. Returns: Player: Requested Player object. \"\"\" for player in self . database . players : if str ( player ) == player_id : return self . database . players [ player ]","title":"get_player_object_from_id_str()"},{"location":"reference/controller/database_helper/#controller.database_helper.DatabaseHelper.get_players_by_elo","text":"Lists all players in sample by ELO ranking. Parameters: Name Type Description Default players_sample dict Sample to search in. Defaults to None. None Returns: Type Description list List of all players ordered by ELO ranking. Source code in controller/database_helper.py def get_players_by_elo ( self , players_sample : dict = None ): \"\"\"Lists all players in sample by ELO ranking. Args: players_sample (dict, optional): Sample to search in. Defaults to None. Returns: list: List of all players ordered by ELO ranking. \"\"\" if players_sample is None : players_sample = self . database . players ordered_ids = sorted ( players_sample , key = lambda x : players_sample [ x ] . elo , reverse = True ) ordered_players = [] for id_num in ordered_ids : if self . database . players [ id_num ] . is_deleted : continue ordered_players . append ( self . database . players [ id_num ]) return ordered_players","title":"get_players_by_elo()"},{"location":"reference/controller/database_helper/#controller.database_helper.DatabaseHelper.get_players_by_id","text":"Lists all database players sorted by id. Returns: Type Description list List of all players ordered by id. Source code in controller/database_helper.py def get_players_by_id ( self ): \"\"\"Lists all database players sorted by id. Returns: list: List of all players ordered by id. \"\"\" ordered_ids = sorted ( self . database . players , key = lambda x : x ) ordered_players = [] for id_num in ordered_ids : if self . database . players [ id_num ] . is_deleted : continue ordered_players . append ( self . database . players [ id_num ]) return ordered_players","title":"get_players_by_id()"},{"location":"reference/controller/database_helper/#controller.database_helper.DatabaseHelper.get_players_by_name","text":"Lists all players in sample by name. Parameters: Name Type Description Default players_sample dict Sample to search in. Defaults to None. None Returns: Type Description list List of all players ordered by ELO name. Source code in controller/database_helper.py def get_players_by_name ( self , players_sample : dict = None ): \"\"\"Lists all players in sample by name. Args: players_sample (dict, optional): Sample to search in. Defaults to None. Returns: list: List of all players ordered by ELO name. \"\"\" if players_sample is None : players_sample = self . database . players print ( players_sample ) ordered_ids = sorted ( players_sample , key = lambda x : players_sample [ x ] . last_name ) ordered_players = [] for id_num in ordered_ids : if self . database . players [ id_num ] . is_deleted : continue ordered_players . append ( self . database . players [ id_num ]) return ordered_players","title":"get_players_by_name()"},{"location":"reference/controller/database_helper/#controller.database_helper.DatabaseHelper.get_players_names","text":"Return a list of players names from a list of Player objects. Parameters: Name Type Description Default players_sample list Sample to search in. required Returns: Type Description list List of players name. Source code in controller/database_helper.py def get_players_names ( self , players_sample : list ): \"\"\"Return a list of players names from a list of Player objects. Args: players_sample (dict): Sample to search in. Returns: list: List of players name. \"\"\" return [ self . get_player_name_from_id ( player_id = x ) for x in players_sample ]","title":"get_players_names()"},{"location":"reference/controller/database_helper/#controller.database_helper.DatabaseHelper.get_tournament_object_from_id_str","text":"Searches through all of tournaments to find requested tournament. Parameters: Name Type Description Default tournament_id str Id of tournament to be searched. required Returns: Type Description Tournament Requested Tournament object. Source code in controller/database_helper.py def get_tournament_object_from_id_str ( self , tournament_id : str ): \"\"\"Searches through all of tournaments to find requested tournament. Args: tournament_id (str): Id of tournament to be searched. Returns: Tournament: Requested Tournament object. \"\"\" for tournament in self . database . tournaments : if str ( tournament ) == tournament_id : return self . database . tournaments [ tournament ]","title":"get_tournament_object_from_id_str()"},{"location":"reference/controller/database_helper/#controller.database_helper.DatabaseHelper.get_tournaments_by_id","text":"Lists all database tournaments sorted by id. Returns: Type Description list List of all tournaments ordered by id. Source code in controller/database_helper.py def get_tournaments_by_id ( self ): \"\"\"Lists all database tournaments sorted by id. Returns: list: List of all tournaments ordered by id. \"\"\" ordered_ids = sorted ( self . database . tournaments , key = lambda x : x ) ordered_tournaments = [] for id_num in ordered_ids : ordered_tournaments . append ( self . database . tournaments [ id_num ]) return ordered_tournaments","title":"get_tournaments_by_id()"},{"location":"reference/controller/database_helper/#controller.database_helper.DatabaseHelper.get_unfinished_tournaments","text":"Searches through the database for unfinished tournament. Returns: Type Description list[Tournament] Unfinished tournaments. Source code in controller/database_helper.py def get_unfinished_tournaments ( self ): \"\"\"Searches through the database for unfinished tournament. Returns: list[Tournament]: Unfinished tournaments. \"\"\" unfinished_tournaments = [] for tournament in self . database . tournaments : if not self . database . tournaments [ tournament ] . is_finished : unfinished_tournaments . append ( self . database . tournaments [ tournament ]) return unfinished_tournaments","title":"get_unfinished_tournaments()"},{"location":"reference/controller/database_helper/#controller.database_helper.DatabaseHelper.is_player_db_empty","text":"Verifies if there is no player in database. Returns: Type Description bool No player in database. Source code in controller/database_helper.py def is_player_db_empty ( self ): \"\"\"Verifies if there is no player in database. Returns: bool: No player in database. \"\"\" if len ( self . database . players ) == 0 : return True else : return False","title":"is_player_db_empty()"},{"location":"reference/controller/database_helper/#controller.database_helper.DatabaseHelper.is_player_id_in_database","text":"Verifies if a given player id exists in database. Parameters: Name Type Description Default player_id int Player id to verify. required Returns: Type Description bool Player id exists in database. Source code in controller/database_helper.py def is_player_id_in_database ( self , player_id : int ): \"\"\"Verifies if a given player id exists in database. Args: player_id (int): Player id to verify. Returns: bool: Player id exists in database. \"\"\" if player_id in self . database . players : if self . database . players [ player_id ] . is_deleted : return False else : return True else : return False","title":"is_player_id_in_database()"},{"location":"reference/controller/database_helper/#controller.database_helper.DatabaseHelper.is_tournament_db_empty","text":"Verifies if there is no tournament in database. Returns: Type Description bool No tournament in database. Source code in controller/database_helper.py def is_tournament_db_empty ( self ): \"\"\"Verifies if there is no tournament in database. Returns: bool: No tournament in database. \"\"\" if len ( self . database . tournaments ) == 0 : return True else : return False","title":"is_tournament_db_empty()"},{"location":"reference/controller/database_helper/#controller.database_helper.DatabaseHelper.is_tournament_id_in_database","text":"Verifies if a given tournament id exists in database. Parameters: Name Type Description Default tournament_id int Tournament id to verify. required Returns: Type Description bool Tournament id exists in database. Source code in controller/database_helper.py def is_tournament_id_in_database ( self , tournament_id : int ): \"\"\"Verifies if a given tournament id exists in database. Args: tournament_id (int): Tournament id to verify. Returns: bool: Tournament id exists in database. \"\"\" if tournament_id in self . database . tournaments : return True else : return False","title":"is_tournament_id_in_database()"},{"location":"reference/controller/report_handler/","text":"ReportHandler \u00b6 Handles report's data generation and local saving. Attributes: Name Type Description data list List of serialized data for the report. export_location str Local path for report saving. __init__ ( self ) special \u00b6 Constructor for ReportHandler. Source code in controller/report_handler.py def __init__ ( self ): \"\"\"Constructor for ReportHandler.\"\"\" self . data = [] self . export_location = _CONFIG . config [ \"report_save_path\" ] all_players_by_elo ( self ) \u00b6 Extracts data for all players ordered by ELO ranking. Source code in controller/report_handler.py def all_players_by_elo ( self ): \"\"\"Extracts data for all players ordered by ELO ranking.\"\"\" players_list = DatabaseHandler () . helper . get_players_by_elo () for player in players_list : self . data . append ( { \"ELO\" : player . elo , \"Nom\" : player . last_name , \"Pr\u00e9nom\" : player . first_name , \"Date de naissance\" : player . dob , \"Genre\" : player . gender , \"id\" : player . id_num , } ) all_players_by_name ( self ) \u00b6 Extracts data for all players ordered by name. Source code in controller/report_handler.py def all_players_by_name ( self ): \"\"\"Extracts data for all players ordered by name.\"\"\" players_list = DatabaseHandler () . helper . get_players_by_name () for player in players_list : self . data . append ( { \"Nom\" : player . last_name , \"Pr\u00e9nom\" : player . first_name , \"Date de naissance\" : player . dob , \"Genre\" : player . gender , \"ELO\" : player . elo , \"id\" : player . id_num , } ) all_tournaments ( self ) \u00b6 Extracts data for all tournaments. Source code in controller/report_handler.py def all_tournaments ( self ): \"\"\"Extracts data for all tournaments.\"\"\" tournaments_list = DatabaseHandler () . helper . get_tournaments_by_id () for tournament in tournaments_list : players_ids = [ x . id_num for x in tournament . players ] list_of_players_name = DatabaseHandler () . helper . get_players_names ( players_sample = players_ids ) if tournament . is_finished : is_finished = \"Termin\u00e9\" else : is_finished = \"En cours\" self . data . append ( { \"id\" : tournament . id_num , \"Nom\" : tournament . name , \"Lieu\" : tournament . location , \"Date\" : tournament . date , \"Nombre de rounds\" : tournament . number_of_rounds , \"Contr\u00f4le de temps\" : tournament . time_control , \"Description\" : tournament . description , \"Progression\" : is_finished , \"Joueurs\" : list_of_players_name , \"Classement\" : DatabaseHandler () . helper . get_formated_leaderboard ( leaderboard = tournament . leaderboard ), } ) export_csv ( self , save_path ) \u00b6 Exports data to csv format. Parameters: Name Type Description Default save_path Path Local path for file. required Source code in controller/report_handler.py def export_csv ( self , save_path : Path ): \"\"\"Exports data to csv format. Args: save_path (Path): Local path for file. \"\"\" with open ( save_path , \"w\" ) as output_file : field_names = list ( self . data [ 0 ] . keys ()) writer = csv . DictWriter ( output_file , fieldnames = field_names ) writer . writeheader () for element in self . data : writer . writerow ( element ) export_txt ( self , save_path ) \u00b6 Exports data to text format. Parameters: Name Type Description Default save_path Path Local path for file. required Source code in controller/report_handler.py def export_txt ( self , save_path : Path ): \"\"\"Exports data to text format. Args: save_path (Path): Local path for file. \"\"\" with open ( save_path , \"w\" ) as output_file : for element in self . data : for key in element : output_file . write ( f \" { key } : { element [ key ] } \\n \" ) output_file . write ( \" \\n \" ) init_export ( self , file_format ) \u00b6 Initiates export process and set full local path. Parameters: Name Type Description Default file_format str Desired export file format. required Returns: Type Description str Local path of saved file. Source code in controller/report_handler.py def init_export ( self , file_format : str ): \"\"\"Initiates export process and set full local path. Args: file_format (str): Desired export file format. Returns: str: Local path of saved file. \"\"\" time = datetime . now () . strftime ( \"%Y-%m- %d -%H%M%S\" ) file_name = f \"oc_chess_club-rapport- { time } . { file_format } \" save_path = Path ( self . export_location ) . joinpath ( file_name ) if file_format == \"txt\" : self . export_txt ( save_path = save_path ) elif file_format == \"csv\" : self . export_csv ( save_path = save_path ) return str ( save_path ) load_tournament_data ( self , tournament_id ) \u00b6 Uses database handler to load a tournament rounds and matches. Parameters: Name Type Description Default tournament_id int Unique id of tournament to be loaded. required Source code in controller/report_handler.py def load_tournament_data ( self , tournament_id : int ): \"\"\"Uses database handler to load a tournament rounds and matches. Args: tournament_id (int): Unique id of tournament to be loaded. \"\"\" DatabaseHandler () . load_rounds ( tournament_id = tournament_id ) DatabaseHandler () . load_matches ( tournament_id = tournament_id ) tournament_matches ( self , tournament ) \u00b6 Extracts data for all matches of a tournament. Parameters: Name Type Description Default tournament Tournament Tournament to be considered. required Source code in controller/report_handler.py def tournament_matches ( self , tournament : Tournament ): \"\"\"Extracts data for all matches of a tournament. Args: tournament (Tournament): Tournament to be considered. \"\"\" self . load_tournament_data ( tournament_id = tournament . id_num ) for round_ in tournament . rounds : matches = tournament . rounds [ round_ ] . matches for match in matches : match = matches [ match ] player_1 = f \" { match . player_1 . first_name } { match . player_1 . last_name } \" player_2 = f \" { match . player_2 . first_name } { match . player_2 . last_name } \" if match . winner is None : winner = \"Pas encore jou\u00e9\" elif match . winner == 0 : winner = \"Match nul\" elif match . winner == 1 : winner = player_1 elif match . winner == 2 : winner = player_2 self . data . append ({ \"id\" : match . id_num , \"Joueur 1\" : player_1 , \"Joueur 2\" : player_2 , \"Vainqueur\" : winner }) tournament_players_by_elo ( self , tournament ) \u00b6 Extracts data for all players of a tournament ordered by ELO ranking. Parameters: Name Type Description Default tournament Tournament Tournament to be considered. required Source code in controller/report_handler.py def tournament_players_by_elo ( self , tournament : Tournament ): \"\"\"Extracts data for all players of a tournament ordered by ELO ranking. Args: tournament (Tournament): Tournament to be considered. \"\"\" players_dict = {} for player in tournament . players : players_dict [ player . id_num ] = player players_list = DatabaseHandler () . helper . get_players_by_elo ( players_sample = players_dict ) for player in players_list : self . data . append ( { \"ELO\" : player . elo , \"Nom\" : player . last_name , \"Pr\u00e9nom\" : player . first_name , \"Date de naissance\" : player . dob , \"Genre\" : player . gender , \"id\" : player . id_num , } ) tournament_players_by_name ( self , tournament ) \u00b6 Extracts data for all players of a tournament ordered by name. Parameters: Name Type Description Default tournament Tournament Tournament to be considered. required Source code in controller/report_handler.py def tournament_players_by_name ( self , tournament : Tournament ): \"\"\"Extracts data for all players of a tournament ordered by name. Args: tournament (Tournament): Tournament to be considered. \"\"\" players_dict = {} for player in tournament . players : players_dict [ player . id_num ] = player players_list = DatabaseHandler () . helper . get_players_by_name ( players_sample = players_dict ) for player in players_list : self . data . append ( { \"Nom\" : player . last_name , \"Pr\u00e9nom\" : player . first_name , \"Date de naissance\" : player . dob , \"Genre\" : player . gender , \"ELO\" : player . elo , \"id\" : player . id_num , } ) tournament_rounds ( self , tournament ) \u00b6 Extracts data for all rounds of a tournament. Parameters: Name Type Description Default tournament Tournament Tournament to be considered. required Source code in controller/report_handler.py def tournament_rounds ( self , tournament : Tournament ): \"\"\"Extracts data for all rounds of a tournament. Args: tournament (Tournament): Tournament to be considered. \"\"\" self . load_tournament_data ( tournament_id = tournament . id_num ) for round_ in tournament . rounds : matches = [] for match in tournament . rounds [ round_ ] . matches : match = tournament . rounds [ round_ ] . matches [ match ] player_1 = DatabaseHandler () . helper . get_player_name_from_id ( match . player_1 . id_num ) player_2 = DatabaseHandler () . helper . get_player_name_from_id ( match . player_2 . id_num ) matches . append ( f \" { player_1 } vs { player_2 } \" ) self . data . append ( { \"Round n\u00b0\" : tournament . rounds [ round_ ] . round_number , \"Matchs\" : matches , \"id\" : tournament . rounds [ round_ ] . id_num , } )","title":"report_handler.py"},{"location":"reference/controller/report_handler/#controller.report_handler.ReportHandler","text":"Handles report's data generation and local saving. Attributes: Name Type Description data list List of serialized data for the report. export_location str Local path for report saving.","title":"ReportHandler"},{"location":"reference/controller/report_handler/#controller.report_handler.ReportHandler.__init__","text":"Constructor for ReportHandler. Source code in controller/report_handler.py def __init__ ( self ): \"\"\"Constructor for ReportHandler.\"\"\" self . data = [] self . export_location = _CONFIG . config [ \"report_save_path\" ]","title":"__init__()"},{"location":"reference/controller/report_handler/#controller.report_handler.ReportHandler.all_players_by_elo","text":"Extracts data for all players ordered by ELO ranking. Source code in controller/report_handler.py def all_players_by_elo ( self ): \"\"\"Extracts data for all players ordered by ELO ranking.\"\"\" players_list = DatabaseHandler () . helper . get_players_by_elo () for player in players_list : self . data . append ( { \"ELO\" : player . elo , \"Nom\" : player . last_name , \"Pr\u00e9nom\" : player . first_name , \"Date de naissance\" : player . dob , \"Genre\" : player . gender , \"id\" : player . id_num , } )","title":"all_players_by_elo()"},{"location":"reference/controller/report_handler/#controller.report_handler.ReportHandler.all_players_by_name","text":"Extracts data for all players ordered by name. Source code in controller/report_handler.py def all_players_by_name ( self ): \"\"\"Extracts data for all players ordered by name.\"\"\" players_list = DatabaseHandler () . helper . get_players_by_name () for player in players_list : self . data . append ( { \"Nom\" : player . last_name , \"Pr\u00e9nom\" : player . first_name , \"Date de naissance\" : player . dob , \"Genre\" : player . gender , \"ELO\" : player . elo , \"id\" : player . id_num , } )","title":"all_players_by_name()"},{"location":"reference/controller/report_handler/#controller.report_handler.ReportHandler.all_tournaments","text":"Extracts data for all tournaments. Source code in controller/report_handler.py def all_tournaments ( self ): \"\"\"Extracts data for all tournaments.\"\"\" tournaments_list = DatabaseHandler () . helper . get_tournaments_by_id () for tournament in tournaments_list : players_ids = [ x . id_num for x in tournament . players ] list_of_players_name = DatabaseHandler () . helper . get_players_names ( players_sample = players_ids ) if tournament . is_finished : is_finished = \"Termin\u00e9\" else : is_finished = \"En cours\" self . data . append ( { \"id\" : tournament . id_num , \"Nom\" : tournament . name , \"Lieu\" : tournament . location , \"Date\" : tournament . date , \"Nombre de rounds\" : tournament . number_of_rounds , \"Contr\u00f4le de temps\" : tournament . time_control , \"Description\" : tournament . description , \"Progression\" : is_finished , \"Joueurs\" : list_of_players_name , \"Classement\" : DatabaseHandler () . helper . get_formated_leaderboard ( leaderboard = tournament . leaderboard ), } )","title":"all_tournaments()"},{"location":"reference/controller/report_handler/#controller.report_handler.ReportHandler.export_csv","text":"Exports data to csv format. Parameters: Name Type Description Default save_path Path Local path for file. required Source code in controller/report_handler.py def export_csv ( self , save_path : Path ): \"\"\"Exports data to csv format. Args: save_path (Path): Local path for file. \"\"\" with open ( save_path , \"w\" ) as output_file : field_names = list ( self . data [ 0 ] . keys ()) writer = csv . DictWriter ( output_file , fieldnames = field_names ) writer . writeheader () for element in self . data : writer . writerow ( element )","title":"export_csv()"},{"location":"reference/controller/report_handler/#controller.report_handler.ReportHandler.export_txt","text":"Exports data to text format. Parameters: Name Type Description Default save_path Path Local path for file. required Source code in controller/report_handler.py def export_txt ( self , save_path : Path ): \"\"\"Exports data to text format. Args: save_path (Path): Local path for file. \"\"\" with open ( save_path , \"w\" ) as output_file : for element in self . data : for key in element : output_file . write ( f \" { key } : { element [ key ] } \\n \" ) output_file . write ( \" \\n \" )","title":"export_txt()"},{"location":"reference/controller/report_handler/#controller.report_handler.ReportHandler.init_export","text":"Initiates export process and set full local path. Parameters: Name Type Description Default file_format str Desired export file format. required Returns: Type Description str Local path of saved file. Source code in controller/report_handler.py def init_export ( self , file_format : str ): \"\"\"Initiates export process and set full local path. Args: file_format (str): Desired export file format. Returns: str: Local path of saved file. \"\"\" time = datetime . now () . strftime ( \"%Y-%m- %d -%H%M%S\" ) file_name = f \"oc_chess_club-rapport- { time } . { file_format } \" save_path = Path ( self . export_location ) . joinpath ( file_name ) if file_format == \"txt\" : self . export_txt ( save_path = save_path ) elif file_format == \"csv\" : self . export_csv ( save_path = save_path ) return str ( save_path )","title":"init_export()"},{"location":"reference/controller/report_handler/#controller.report_handler.ReportHandler.load_tournament_data","text":"Uses database handler to load a tournament rounds and matches. Parameters: Name Type Description Default tournament_id int Unique id of tournament to be loaded. required Source code in controller/report_handler.py def load_tournament_data ( self , tournament_id : int ): \"\"\"Uses database handler to load a tournament rounds and matches. Args: tournament_id (int): Unique id of tournament to be loaded. \"\"\" DatabaseHandler () . load_rounds ( tournament_id = tournament_id ) DatabaseHandler () . load_matches ( tournament_id = tournament_id )","title":"load_tournament_data()"},{"location":"reference/controller/report_handler/#controller.report_handler.ReportHandler.tournament_matches","text":"Extracts data for all matches of a tournament. Parameters: Name Type Description Default tournament Tournament Tournament to be considered. required Source code in controller/report_handler.py def tournament_matches ( self , tournament : Tournament ): \"\"\"Extracts data for all matches of a tournament. Args: tournament (Tournament): Tournament to be considered. \"\"\" self . load_tournament_data ( tournament_id = tournament . id_num ) for round_ in tournament . rounds : matches = tournament . rounds [ round_ ] . matches for match in matches : match = matches [ match ] player_1 = f \" { match . player_1 . first_name } { match . player_1 . last_name } \" player_2 = f \" { match . player_2 . first_name } { match . player_2 . last_name } \" if match . winner is None : winner = \"Pas encore jou\u00e9\" elif match . winner == 0 : winner = \"Match nul\" elif match . winner == 1 : winner = player_1 elif match . winner == 2 : winner = player_2 self . data . append ({ \"id\" : match . id_num , \"Joueur 1\" : player_1 , \"Joueur 2\" : player_2 , \"Vainqueur\" : winner })","title":"tournament_matches()"},{"location":"reference/controller/report_handler/#controller.report_handler.ReportHandler.tournament_players_by_elo","text":"Extracts data for all players of a tournament ordered by ELO ranking. Parameters: Name Type Description Default tournament Tournament Tournament to be considered. required Source code in controller/report_handler.py def tournament_players_by_elo ( self , tournament : Tournament ): \"\"\"Extracts data for all players of a tournament ordered by ELO ranking. Args: tournament (Tournament): Tournament to be considered. \"\"\" players_dict = {} for player in tournament . players : players_dict [ player . id_num ] = player players_list = DatabaseHandler () . helper . get_players_by_elo ( players_sample = players_dict ) for player in players_list : self . data . append ( { \"ELO\" : player . elo , \"Nom\" : player . last_name , \"Pr\u00e9nom\" : player . first_name , \"Date de naissance\" : player . dob , \"Genre\" : player . gender , \"id\" : player . id_num , } )","title":"tournament_players_by_elo()"},{"location":"reference/controller/report_handler/#controller.report_handler.ReportHandler.tournament_players_by_name","text":"Extracts data for all players of a tournament ordered by name. Parameters: Name Type Description Default tournament Tournament Tournament to be considered. required Source code in controller/report_handler.py def tournament_players_by_name ( self , tournament : Tournament ): \"\"\"Extracts data for all players of a tournament ordered by name. Args: tournament (Tournament): Tournament to be considered. \"\"\" players_dict = {} for player in tournament . players : players_dict [ player . id_num ] = player players_list = DatabaseHandler () . helper . get_players_by_name ( players_sample = players_dict ) for player in players_list : self . data . append ( { \"Nom\" : player . last_name , \"Pr\u00e9nom\" : player . first_name , \"Date de naissance\" : player . dob , \"Genre\" : player . gender , \"ELO\" : player . elo , \"id\" : player . id_num , } )","title":"tournament_players_by_name()"},{"location":"reference/controller/report_handler/#controller.report_handler.ReportHandler.tournament_rounds","text":"Extracts data for all rounds of a tournament. Parameters: Name Type Description Default tournament Tournament Tournament to be considered. required Source code in controller/report_handler.py def tournament_rounds ( self , tournament : Tournament ): \"\"\"Extracts data for all rounds of a tournament. Args: tournament (Tournament): Tournament to be considered. \"\"\" self . load_tournament_data ( tournament_id = tournament . id_num ) for round_ in tournament . rounds : matches = [] for match in tournament . rounds [ round_ ] . matches : match = tournament . rounds [ round_ ] . matches [ match ] player_1 = DatabaseHandler () . helper . get_player_name_from_id ( match . player_1 . id_num ) player_2 = DatabaseHandler () . helper . get_player_name_from_id ( match . player_2 . id_num ) matches . append ( f \" { player_1 } vs { player_2 } \" ) self . data . append ( { \"Round n\u00b0\" : tournament . rounds [ round_ ] . round_number , \"Matchs\" : matches , \"id\" : tournament . rounds [ round_ ] . id_num , } )","title":"tournament_rounds()"},{"location":"reference/controller/tournament_generator/","text":"TournamentGenerator \u00b6 Generates rounds and their matches. Attributes: Name Type Description player dict[Player] Dict of participating players. __init__ ( self , players ) special \u00b6 Constructor for TournamentGenerator. Parameters: Name Type Description Default players dict Dict of participating players. required Source code in controller/tournament_generator.py def __init__ ( self , players : dict [ Player ]): \"\"\"Constructor for TournamentGenerator. Args: players (dict[Player]): Dict of participating players. \"\"\" self . players = players generate_first_round ( self ) \u00b6 Generates the first round following Swiss-system. Returns: Type Description list[Match] List of generated matches. Source code in controller/tournament_generator.py def generate_first_round ( self ): \"\"\"Generates the first round following Swiss-system. Returns: list[Match]: List of generated matches. \"\"\" matches = [] sorted_players = self . sort_by_elo () for i in range ( 0 , int ( len ( self . players ) / 2 )): matches . append (( sorted_players [ i ], sorted_players [ i + int ( len ( self . players ) / 2 )])) return matches generate_other_round ( self , matches , leaderboard ) \u00b6 Generates one round, other than the first one, following Swiss-system. Parameters: Name Type Description Default matches list List of past matches. required leaderboard dict Current leaderboard. required Returns: Type Description list[Match] List of generated matches. Source code in controller/tournament_generator.py def generate_other_round ( self , matches : list [ Match ], leaderboard : dict ): \"\"\"Generates one round, other than the first one, following Swiss-system. Args: matches (list[Match]): List of past matches. leaderboard (dict): Current leaderboard. Returns: list[Match]: List of generated matches. \"\"\" matches = [] sorted_players = self . sort_by_points ( leaderboard = leaderboard ) while len ( sorted_players ) != 0 : for opponent in range ( 1 , len ( sorted_players )): id_1 = sorted_players [ 0 ] id_2 = sorted_players [ opponent ] player_1 = DatabaseHandler () . helper . get_player_object_from_id_str ( player_id = id_1 ) player_2 = DatabaseHandler () . helper . get_player_object_from_id_str ( player_id = id_2 ) if not self . players_have_already_met ( matches = matches , id_1 = id_1 , id_2 = id_2 ): matches . append (( player_1 , player_2 )) del sorted_players [ 0 ] del sorted_players [ opponent - 1 ] break return matches player_object_from_id ( self , player_id ) \u00b6 Searches through participating players for given unique id. Parameters: Name Type Description Default player_id str Player's unique id to be searched. required Returns: Type Description Player Corresponding Player object. Source code in controller/tournament_generator.py def player_object_from_id ( self , player_id : str ): \"\"\"Searches through participating players for given unique id. Args: player_id (str): Player's unique id to be searched. Returns: Player: Corresponding Player object. \"\"\" for player in self . players : if player . id_num == int ( player_id ): return player players_have_already_met ( self , matches , id_1 , id_2 ) \u00b6 Searches through a list of matches for an already existing match between the two given players. Parameters: Name Type Description Default matches list List of players pairing, corresponding to past matches. required id_1 str First player unique id. required id_2 str Second player unique id. required Returns: Type Description bool Players have already met. Source code in controller/tournament_generator.py def players_have_already_met ( self , matches : list [ tuple [ Player ]], id_1 : str , id_2 : str ): \"\"\"Searches through a list of matches for an already existing match between the two given players. Args: matches (list[tuple[Player]]): List of players pairing, corresponding to past matches. id_1 (str): First player unique id. id_2 (str): Second player unique id. Returns: bool: Players have already met. \"\"\" player_1_vs_player_2 = ( int ( id_1 ), int ( id_2 )) player_2_vs_player_1 = ( int ( id_2 ), int ( id_1 )) if player_1_vs_player_2 in matches : return True elif player_2_vs_player_1 in matches : return True else : return False sort_by_elo ( self ) \u00b6 Sorts players by their ELO ranking. Returns: Type Description list[Player] List of players ordered by ELO (ascending). Source code in controller/tournament_generator.py def sort_by_elo ( self ): \"\"\"Sorts players by their ELO ranking. Returns: list[Player]: List of players ordered by ELO (ascending). \"\"\" return sorted ( self . players , key = lambda x : x . elo ) sort_by_points ( self , leaderboard ) \u00b6 Sort players from a leaderboard by points. Parameters: Name Type Description Default leaderboard dict Dict of players to be sorted. required Returns: Type Description list[Player] List of players ordered by points (descending). Source code in controller/tournament_generator.py def sort_by_points ( self , leaderboard : dict ): \"\"\"Sort players from a leaderboard by points. Args: leaderboard (dict): Dict of players to be sorted. Returns: list[Player]: List of players ordered by points (descending). \"\"\" return sorted ( leaderboard , key = leaderboard . get , reverse = True )","title":"tournament_generator.py"},{"location":"reference/controller/tournament_generator/#controller.tournament_generator.TournamentGenerator","text":"Generates rounds and their matches. Attributes: Name Type Description player dict[Player] Dict of participating players.","title":"TournamentGenerator"},{"location":"reference/controller/tournament_generator/#controller.tournament_generator.TournamentGenerator.__init__","text":"Constructor for TournamentGenerator. Parameters: Name Type Description Default players dict Dict of participating players. required Source code in controller/tournament_generator.py def __init__ ( self , players : dict [ Player ]): \"\"\"Constructor for TournamentGenerator. Args: players (dict[Player]): Dict of participating players. \"\"\" self . players = players","title":"__init__()"},{"location":"reference/controller/tournament_generator/#controller.tournament_generator.TournamentGenerator.generate_first_round","text":"Generates the first round following Swiss-system. Returns: Type Description list[Match] List of generated matches. Source code in controller/tournament_generator.py def generate_first_round ( self ): \"\"\"Generates the first round following Swiss-system. Returns: list[Match]: List of generated matches. \"\"\" matches = [] sorted_players = self . sort_by_elo () for i in range ( 0 , int ( len ( self . players ) / 2 )): matches . append (( sorted_players [ i ], sorted_players [ i + int ( len ( self . players ) / 2 )])) return matches","title":"generate_first_round()"},{"location":"reference/controller/tournament_generator/#controller.tournament_generator.TournamentGenerator.generate_other_round","text":"Generates one round, other than the first one, following Swiss-system. Parameters: Name Type Description Default matches list List of past matches. required leaderboard dict Current leaderboard. required Returns: Type Description list[Match] List of generated matches. Source code in controller/tournament_generator.py def generate_other_round ( self , matches : list [ Match ], leaderboard : dict ): \"\"\"Generates one round, other than the first one, following Swiss-system. Args: matches (list[Match]): List of past matches. leaderboard (dict): Current leaderboard. Returns: list[Match]: List of generated matches. \"\"\" matches = [] sorted_players = self . sort_by_points ( leaderboard = leaderboard ) while len ( sorted_players ) != 0 : for opponent in range ( 1 , len ( sorted_players )): id_1 = sorted_players [ 0 ] id_2 = sorted_players [ opponent ] player_1 = DatabaseHandler () . helper . get_player_object_from_id_str ( player_id = id_1 ) player_2 = DatabaseHandler () . helper . get_player_object_from_id_str ( player_id = id_2 ) if not self . players_have_already_met ( matches = matches , id_1 = id_1 , id_2 = id_2 ): matches . append (( player_1 , player_2 )) del sorted_players [ 0 ] del sorted_players [ opponent - 1 ] break return matches","title":"generate_other_round()"},{"location":"reference/controller/tournament_generator/#controller.tournament_generator.TournamentGenerator.player_object_from_id","text":"Searches through participating players for given unique id. Parameters: Name Type Description Default player_id str Player's unique id to be searched. required Returns: Type Description Player Corresponding Player object. Source code in controller/tournament_generator.py def player_object_from_id ( self , player_id : str ): \"\"\"Searches through participating players for given unique id. Args: player_id (str): Player's unique id to be searched. Returns: Player: Corresponding Player object. \"\"\" for player in self . players : if player . id_num == int ( player_id ): return player","title":"player_object_from_id()"},{"location":"reference/controller/tournament_generator/#controller.tournament_generator.TournamentGenerator.players_have_already_met","text":"Searches through a list of matches for an already existing match between the two given players. Parameters: Name Type Description Default matches list List of players pairing, corresponding to past matches. required id_1 str First player unique id. required id_2 str Second player unique id. required Returns: Type Description bool Players have already met. Source code in controller/tournament_generator.py def players_have_already_met ( self , matches : list [ tuple [ Player ]], id_1 : str , id_2 : str ): \"\"\"Searches through a list of matches for an already existing match between the two given players. Args: matches (list[tuple[Player]]): List of players pairing, corresponding to past matches. id_1 (str): First player unique id. id_2 (str): Second player unique id. Returns: bool: Players have already met. \"\"\" player_1_vs_player_2 = ( int ( id_1 ), int ( id_2 )) player_2_vs_player_1 = ( int ( id_2 ), int ( id_1 )) if player_1_vs_player_2 in matches : return True elif player_2_vs_player_1 in matches : return True else : return False","title":"players_have_already_met()"},{"location":"reference/controller/tournament_generator/#controller.tournament_generator.TournamentGenerator.sort_by_elo","text":"Sorts players by their ELO ranking. Returns: Type Description list[Player] List of players ordered by ELO (ascending). Source code in controller/tournament_generator.py def sort_by_elo ( self ): \"\"\"Sorts players by their ELO ranking. Returns: list[Player]: List of players ordered by ELO (ascending). \"\"\" return sorted ( self . players , key = lambda x : x . elo )","title":"sort_by_elo()"},{"location":"reference/controller/tournament_generator/#controller.tournament_generator.TournamentGenerator.sort_by_points","text":"Sort players from a leaderboard by points. Parameters: Name Type Description Default leaderboard dict Dict of players to be sorted. required Returns: Type Description list[Player] List of players ordered by points (descending). Source code in controller/tournament_generator.py def sort_by_points ( self , leaderboard : dict ): \"\"\"Sort players from a leaderboard by points. Args: leaderboard (dict): Dict of players to be sorted. Returns: list[Player]: List of players ordered by points (descending). \"\"\" return sorted ( leaderboard , key = leaderboard . get , reverse = True )","title":"sort_by_points()"},{"location":"reference/controller/tournament_handler/","text":"TournamentHandler \u00b6 Handles a tournament's generation and progression. Attributes: Name Type Description tournament Tournament Corresponding tournament object. generator TournamentGenerator Object to generate matchmaking. current_round_num int Number of the round currently played. current_round_id int Unique id of the round currently played. current_match_num int Number of the match currently played. current_match_id int Unique id of the match currently played. __init__ ( self , tournament_id ) special \u00b6 Constructor for TournamentHandler. Parameters: Name Type Description Default tournament_id int Unique id of the tournament to be resumed. required Source code in controller/tournament_handler.py def __init__ ( self , tournament_id : int ): \"\"\"Constructor for TournamentHandler. Args: tournament_id (int): Unique id of the tournament to be resumed. \"\"\" self . tournament = DatabaseHandler () . database . tournaments [ tournament_id ] self . generator = TournamentGenerator ( players = self . tournament . players ) self . current_round_num = 0 self . current_round_id = 0 self . current_match_num = 0 self . current_match_id = 0 self . resume_tournament () create_round ( self ) \u00b6 Creates a new round and its matches based on current tournament progression. Source code in controller/tournament_handler.py def create_round ( self ): \"\"\"Creates a new round and its matches based on current tournament progression.\"\"\" if len ( self . tournament . rounds ) == 0 : matches = self . generator . generate_first_round () else : all_matches_list = DatabaseHandler () . helper . get_all_matches ( tournament = self . tournament ) matches = self . generator . generate_other_round ( matches = all_matches_list , leaderboard = self . tournament . leaderboard ) round_id = DatabaseHandler () . create_round ( round_number = len ( self . tournament . rounds ) + 1 , tournament_id = self . tournament . id_num ) self . current_round_id = round_id for players in matches : DatabaseHandler () . create_match ( players = players , tournament_id = self . tournament . id_num , round_id = round_id , winner = None ) is_round_finished ( self , round_ ) \u00b6 Verifies if a round is finished by iterating through its matches' winners. Parameters: Name Type Description Default round_ Round Round object to be verified. required Returns: Type Description bool Match is finished. Source code in controller/tournament_handler.py def is_round_finished ( self , round_ : Round ): \"\"\"Verifies if a round is finished by iterating through its matches' winners. Args: round_ (Round): Round object to be verified. Returns: bool: Match is finished. \"\"\" matches = round_ . matches for match_id in matches : match_object = self . tournament . rounds [ round_ . id_num ] . matches [ match_id ] if match_object . winner is None : return False return True is_tournament_finished ( self ) \u00b6 Verifies if a tournament is finished by iterating through its rounds. Returns: Type Description bool Tournament is finished. Source code in controller/tournament_handler.py def is_tournament_finished ( self ): \"\"\"Verifies if a tournament is finished by iterating through its rounds. Returns: bool: Tournament is finished. \"\"\" if len ( self . tournament . rounds ) < self . tournament . number_of_rounds : return False for round_id in self . tournament . rounds : round_object = self . tournament . rounds [ round_id ] if not self . is_round_finished ( round_ = round_object ): return False DatabaseHandler () . database . tournaments [ self . tournament . id_num ] . is_finished = True DatabaseHandler () . save_tournament ( tournament = DatabaseHandler () . database . tournaments [ self . tournament . id_num ]) return True load_rounds_and_matches ( self ) \u00b6 Uses database handler to load tournament's rounds and matches objects into memory. Source code in controller/tournament_handler.py def load_rounds_and_matches ( self ): \"\"\"Uses database handler to load tournament's rounds and matches objects into memory.\"\"\" DatabaseHandler () . load_rounds ( tournament_id = self . tournament . id_num ) DatabaseHandler () . load_matches ( tournament_id = self . tournament . id_num ) match_generator ( self ) \u00b6 Returns a new match until tournament completion. Returns: Type Description Match Next match to be played. Source code in controller/tournament_handler.py def match_generator ( self ): \"\"\"Returns a new match until tournament completion. Returns: Match: Next match to be played. \"\"\" self . update_tournament_progression () current_round = self . tournament . rounds [ self . current_round_id ] if self . is_round_finished ( round_ = current_round ): if self . is_tournament_finished (): return None self . create_round () self . update_tournament_progression () current_round = self . tournament . rounds [ self . current_round_id ] return current_round . matches [ self . current_match_id ] resume_tournament ( self ) \u00b6 Creates the first round if needed and requests a first progression update. Source code in controller/tournament_handler.py def resume_tournament ( self ): \"\"\"Creates the first round if needed and requests a first progression update.\"\"\" self . load_rounds_and_matches () if len ( self . tournament . rounds ) == 0 : self . create_round () self . update_tournament_progression () save_winner ( self , match , winner ) \u00b6 Takes the winner input by the user and saves it to the database. Parameters: Name Type Description Default match Match Match to be considered. required winner str Input of the user. required Source code in controller/tournament_handler.py def save_winner ( self , match : Match , winner : str ): \"\"\"Takes the winner input by the user and saves it to the database. Args: match (Match): Match to be considered. winner (str): Input of the user. \"\"\" if winner == \"1\" : winner = 1 DatabaseHandler () . update_leaderboard ( tournament_id = match . tournament_id , player_id = match . player_1 . id_num , points_earned = 1 ) elif winner == \"2\" : winner = 2 DatabaseHandler () . update_leaderboard ( tournament_id = match . tournament_id , player_id = match . player_2 . id_num , points_earned = 1 ) elif winner == \"nul\" : winner = 0 DatabaseHandler () . update_leaderboard ( tournament_id = match . tournament_id , player_id = match . player_1 . id_num , points_earned = 0.5 ) DatabaseHandler () . update_leaderboard ( tournament_id = match . tournament_id , player_id = match . player_2 . id_num , points_earned = 0.5 ) self . tournament . rounds [ self . current_round_id ] . matches [ match . id_num ] . winner = winner DatabaseHandler () . save_match ( self . tournament . rounds [ self . current_round_id ] . matches [ match . id_num ]) update_current_match ( self ) \u00b6 Updates current match number and unique id based on round's matches completion. Source code in controller/tournament_handler.py def update_current_match ( self ): \"\"\"Updates current match number and unique id based on round's matches completion.\"\"\" self . current_match_num = 0 current_round = self . tournament . rounds [ self . current_round_id ] # Search if a match is not yet finished for match in current_round . matches : self . current_match_num += 1 if current_round . matches [ match ] . winner is None : self . current_match_id = current_round . matches [ match ] . id_num return # If all round's matches are finished, arbitrarily take the first match # as none of them will be played. first_match_id = list ( current_round . matches . keys ())[ 0 ] self . current_match_id = first_match_id update_current_round ( self ) \u00b6 Updates current round number and unique id based on tournament's rounds completion. Source code in controller/tournament_handler.py def update_current_round ( self ): \"\"\"Updates current round number and unique id based on tournament's rounds completion.\"\"\" for round_id in self . tournament . rounds : round_object = self . tournament . rounds [ round_id ] if not self . is_round_finished ( round_ = round_object ): self . current_round_id = round_object . id_num self . current_round_num = round_object . round_number else : if round_object . round_number > self . current_round_num : self . current_round_num = round_object . round_number self . current_round_id = round_object . id_num update_tournament_progression ( self ) \u00b6 Requests an update on tournament's rounds and matches progession. Source code in controller/tournament_handler.py def update_tournament_progression ( self ): \"\"\"Requests an update on tournament's rounds and matches progession.\"\"\" self . update_current_round () self . update_current_match ()","title":"tournament_handler.py"},{"location":"reference/controller/tournament_handler/#controller.tournament_handler.TournamentHandler","text":"Handles a tournament's generation and progression. Attributes: Name Type Description tournament Tournament Corresponding tournament object. generator TournamentGenerator Object to generate matchmaking. current_round_num int Number of the round currently played. current_round_id int Unique id of the round currently played. current_match_num int Number of the match currently played. current_match_id int Unique id of the match currently played.","title":"TournamentHandler"},{"location":"reference/controller/tournament_handler/#controller.tournament_handler.TournamentHandler.__init__","text":"Constructor for TournamentHandler. Parameters: Name Type Description Default tournament_id int Unique id of the tournament to be resumed. required Source code in controller/tournament_handler.py def __init__ ( self , tournament_id : int ): \"\"\"Constructor for TournamentHandler. Args: tournament_id (int): Unique id of the tournament to be resumed. \"\"\" self . tournament = DatabaseHandler () . database . tournaments [ tournament_id ] self . generator = TournamentGenerator ( players = self . tournament . players ) self . current_round_num = 0 self . current_round_id = 0 self . current_match_num = 0 self . current_match_id = 0 self . resume_tournament ()","title":"__init__()"},{"location":"reference/controller/tournament_handler/#controller.tournament_handler.TournamentHandler.create_round","text":"Creates a new round and its matches based on current tournament progression. Source code in controller/tournament_handler.py def create_round ( self ): \"\"\"Creates a new round and its matches based on current tournament progression.\"\"\" if len ( self . tournament . rounds ) == 0 : matches = self . generator . generate_first_round () else : all_matches_list = DatabaseHandler () . helper . get_all_matches ( tournament = self . tournament ) matches = self . generator . generate_other_round ( matches = all_matches_list , leaderboard = self . tournament . leaderboard ) round_id = DatabaseHandler () . create_round ( round_number = len ( self . tournament . rounds ) + 1 , tournament_id = self . tournament . id_num ) self . current_round_id = round_id for players in matches : DatabaseHandler () . create_match ( players = players , tournament_id = self . tournament . id_num , round_id = round_id , winner = None )","title":"create_round()"},{"location":"reference/controller/tournament_handler/#controller.tournament_handler.TournamentHandler.is_round_finished","text":"Verifies if a round is finished by iterating through its matches' winners. Parameters: Name Type Description Default round_ Round Round object to be verified. required Returns: Type Description bool Match is finished. Source code in controller/tournament_handler.py def is_round_finished ( self , round_ : Round ): \"\"\"Verifies if a round is finished by iterating through its matches' winners. Args: round_ (Round): Round object to be verified. Returns: bool: Match is finished. \"\"\" matches = round_ . matches for match_id in matches : match_object = self . tournament . rounds [ round_ . id_num ] . matches [ match_id ] if match_object . winner is None : return False return True","title":"is_round_finished()"},{"location":"reference/controller/tournament_handler/#controller.tournament_handler.TournamentHandler.is_tournament_finished","text":"Verifies if a tournament is finished by iterating through its rounds. Returns: Type Description bool Tournament is finished. Source code in controller/tournament_handler.py def is_tournament_finished ( self ): \"\"\"Verifies if a tournament is finished by iterating through its rounds. Returns: bool: Tournament is finished. \"\"\" if len ( self . tournament . rounds ) < self . tournament . number_of_rounds : return False for round_id in self . tournament . rounds : round_object = self . tournament . rounds [ round_id ] if not self . is_round_finished ( round_ = round_object ): return False DatabaseHandler () . database . tournaments [ self . tournament . id_num ] . is_finished = True DatabaseHandler () . save_tournament ( tournament = DatabaseHandler () . database . tournaments [ self . tournament . id_num ]) return True","title":"is_tournament_finished()"},{"location":"reference/controller/tournament_handler/#controller.tournament_handler.TournamentHandler.load_rounds_and_matches","text":"Uses database handler to load tournament's rounds and matches objects into memory. Source code in controller/tournament_handler.py def load_rounds_and_matches ( self ): \"\"\"Uses database handler to load tournament's rounds and matches objects into memory.\"\"\" DatabaseHandler () . load_rounds ( tournament_id = self . tournament . id_num ) DatabaseHandler () . load_matches ( tournament_id = self . tournament . id_num )","title":"load_rounds_and_matches()"},{"location":"reference/controller/tournament_handler/#controller.tournament_handler.TournamentHandler.match_generator","text":"Returns a new match until tournament completion. Returns: Type Description Match Next match to be played. Source code in controller/tournament_handler.py def match_generator ( self ): \"\"\"Returns a new match until tournament completion. Returns: Match: Next match to be played. \"\"\" self . update_tournament_progression () current_round = self . tournament . rounds [ self . current_round_id ] if self . is_round_finished ( round_ = current_round ): if self . is_tournament_finished (): return None self . create_round () self . update_tournament_progression () current_round = self . tournament . rounds [ self . current_round_id ] return current_round . matches [ self . current_match_id ]","title":"match_generator()"},{"location":"reference/controller/tournament_handler/#controller.tournament_handler.TournamentHandler.resume_tournament","text":"Creates the first round if needed and requests a first progression update. Source code in controller/tournament_handler.py def resume_tournament ( self ): \"\"\"Creates the first round if needed and requests a first progression update.\"\"\" self . load_rounds_and_matches () if len ( self . tournament . rounds ) == 0 : self . create_round () self . update_tournament_progression ()","title":"resume_tournament()"},{"location":"reference/controller/tournament_handler/#controller.tournament_handler.TournamentHandler.save_winner","text":"Takes the winner input by the user and saves it to the database. Parameters: Name Type Description Default match Match Match to be considered. required winner str Input of the user. required Source code in controller/tournament_handler.py def save_winner ( self , match : Match , winner : str ): \"\"\"Takes the winner input by the user and saves it to the database. Args: match (Match): Match to be considered. winner (str): Input of the user. \"\"\" if winner == \"1\" : winner = 1 DatabaseHandler () . update_leaderboard ( tournament_id = match . tournament_id , player_id = match . player_1 . id_num , points_earned = 1 ) elif winner == \"2\" : winner = 2 DatabaseHandler () . update_leaderboard ( tournament_id = match . tournament_id , player_id = match . player_2 . id_num , points_earned = 1 ) elif winner == \"nul\" : winner = 0 DatabaseHandler () . update_leaderboard ( tournament_id = match . tournament_id , player_id = match . player_1 . id_num , points_earned = 0.5 ) DatabaseHandler () . update_leaderboard ( tournament_id = match . tournament_id , player_id = match . player_2 . id_num , points_earned = 0.5 ) self . tournament . rounds [ self . current_round_id ] . matches [ match . id_num ] . winner = winner DatabaseHandler () . save_match ( self . tournament . rounds [ self . current_round_id ] . matches [ match . id_num ])","title":"save_winner()"},{"location":"reference/controller/tournament_handler/#controller.tournament_handler.TournamentHandler.update_current_match","text":"Updates current match number and unique id based on round's matches completion. Source code in controller/tournament_handler.py def update_current_match ( self ): \"\"\"Updates current match number and unique id based on round's matches completion.\"\"\" self . current_match_num = 0 current_round = self . tournament . rounds [ self . current_round_id ] # Search if a match is not yet finished for match in current_round . matches : self . current_match_num += 1 if current_round . matches [ match ] . winner is None : self . current_match_id = current_round . matches [ match ] . id_num return # If all round's matches are finished, arbitrarily take the first match # as none of them will be played. first_match_id = list ( current_round . matches . keys ())[ 0 ] self . current_match_id = first_match_id","title":"update_current_match()"},{"location":"reference/controller/tournament_handler/#controller.tournament_handler.TournamentHandler.update_current_round","text":"Updates current round number and unique id based on tournament's rounds completion. Source code in controller/tournament_handler.py def update_current_round ( self ): \"\"\"Updates current round number and unique id based on tournament's rounds completion.\"\"\" for round_id in self . tournament . rounds : round_object = self . tournament . rounds [ round_id ] if not self . is_round_finished ( round_ = round_object ): self . current_round_id = round_object . id_num self . current_round_num = round_object . round_number else : if round_object . round_number > self . current_round_num : self . current_round_num = round_object . round_number self . current_round_id = round_object . id_num","title":"update_current_round()"},{"location":"reference/controller/tournament_handler/#controller.tournament_handler.TournamentHandler.update_tournament_progression","text":"Requests an update on tournament's rounds and matches progession. Source code in controller/tournament_handler.py def update_tournament_progression ( self ): \"\"\"Requests an update on tournament's rounds and matches progession.\"\"\" self . update_current_round () self . update_current_match ()","title":"update_tournament_progression()"},{"location":"reference/models/database/","text":"Database \u00b6 Model for database, encapsulates a TinyDB object and the created objects. Attributes: Name Type Description location str The local path for the TinyDB JSON file. players dict The Player objects created from the database. tournaments dict The tournament objects created from the database. db tinydb.database.TinyDB The TinyDB object created from the JSON file. __init__ ( self , location ) special \u00b6 Constructor for Database. Initiates TinyDB loading. Parameters: Name Type Description Default location str The local path for the TinyDB JSON file. required Source code in models/database.py def __init__ ( self , location : str ): \"\"\"Constructor for Database. Initiates TinyDB loading. Args: location (str): The local path for the TinyDB JSON file. \"\"\" self . location = location self . players = {} self . tournaments = {} self . db = None self . load_database () load_database ( self ) \u00b6 Loads a TinyDB object from a JSON file. Source code in models/database.py def load_database ( self ): \"\"\"Loads a TinyDB object from a JSON file.\"\"\" self . db = TinyDB ( self . location )","title":"database.py"},{"location":"reference/models/database/#models.database.Database","text":"Model for database, encapsulates a TinyDB object and the created objects. Attributes: Name Type Description location str The local path for the TinyDB JSON file. players dict The Player objects created from the database. tournaments dict The tournament objects created from the database. db tinydb.database.TinyDB The TinyDB object created from the JSON file.","title":"Database"},{"location":"reference/models/database/#models.database.Database.__init__","text":"Constructor for Database. Initiates TinyDB loading. Parameters: Name Type Description Default location str The local path for the TinyDB JSON file. required Source code in models/database.py def __init__ ( self , location : str ): \"\"\"Constructor for Database. Initiates TinyDB loading. Args: location (str): The local path for the TinyDB JSON file. \"\"\" self . location = location self . players = {} self . tournaments = {} self . db = None self . load_database ()","title":"__init__()"},{"location":"reference/models/database/#models.database.Database.load_database","text":"Loads a TinyDB object from a JSON file. Source code in models/database.py def load_database ( self ): \"\"\"Loads a TinyDB object from a JSON file.\"\"\" self . db = TinyDB ( self . location )","title":"load_database()"},{"location":"reference/models/match/","text":"Match \u00b6 Model for match. All matches are associated with a round which is also associated with a tournament. Attributes: Name Type Description tournament_id int Unique id of the parent tournament. round_id int Unique id of the parent round. winner int Winner of the match. 1 for Player 1, 2 for Player 2, 0 for a draw and None if TBD. id_num int Unique id of this match. player_1 Player Arbitrary first player. player_2 Player Arbitrary second player. __init__ ( self , players , tournament_id , round_id , winner , id_num ) special \u00b6 Constructor for Match. Parameters: Name Type Description Default players tuple The two participating players. required tournament_id int Unique id of the parent tournament. required round_id int Unique id of the parent round. required winner int Winner of the match. 1 for Player 1, 2 for Player 2, 0 for a draw and None if TBD. required id_num int Unique id of this match. required Source code in models/match.py def __init__ ( self , players : tuple , tournament_id : int , round_id : int , winner : int , id_num : int ): \"\"\"Constructor for Match. Args: players (tuple[Player]): The two participating players. tournament_id (int): Unique id of the parent tournament. round_id (int): Unique id of the parent round. winner (int): Winner of the match. 1 for Player 1, 2 for Player 2, 0 for a draw and None if TBD. id_num (int): Unique id of this match. \"\"\" self . tournament_id = tournament_id self . round_id = round_id self . winner = winner self . id_num = id_num self . player_1 = players [ 0 ] self . player_2 = players [ 1 ]","title":"match.py"},{"location":"reference/models/match/#models.match.Match","text":"Model for match. All matches are associated with a round which is also associated with a tournament. Attributes: Name Type Description tournament_id int Unique id of the parent tournament. round_id int Unique id of the parent round. winner int Winner of the match. 1 for Player 1, 2 for Player 2, 0 for a draw and None if TBD. id_num int Unique id of this match. player_1 Player Arbitrary first player. player_2 Player Arbitrary second player.","title":"Match"},{"location":"reference/models/match/#models.match.Match.__init__","text":"Constructor for Match. Parameters: Name Type Description Default players tuple The two participating players. required tournament_id int Unique id of the parent tournament. required round_id int Unique id of the parent round. required winner int Winner of the match. 1 for Player 1, 2 for Player 2, 0 for a draw and None if TBD. required id_num int Unique id of this match. required Source code in models/match.py def __init__ ( self , players : tuple , tournament_id : int , round_id : int , winner : int , id_num : int ): \"\"\"Constructor for Match. Args: players (tuple[Player]): The two participating players. tournament_id (int): Unique id of the parent tournament. round_id (int): Unique id of the parent round. winner (int): Winner of the match. 1 for Player 1, 2 for Player 2, 0 for a draw and None if TBD. id_num (int): Unique id of this match. \"\"\" self . tournament_id = tournament_id self . round_id = round_id self . winner = winner self . id_num = id_num self . player_1 = players [ 0 ] self . player_2 = players [ 1 ]","title":"__init__()"},{"location":"reference/models/player/","text":"Player \u00b6 Model for player. Attributes: Name Type Description first_name str Players's first name. last_name str Player's last name. dob str Player's date of birth. gender str Player's gender. elo int Player's ELO ranking. id_num int Player's unique id number. is_deleted bool Is player deleted. The object is conserved for tournament history. __init__ ( self , first_name , last_name , dob , gender , elo , id_num , is_deleted ) special \u00b6 Constructor for Player. Parameters: Name Type Description Default first_name str Players's first name. required last_name str Player's last name. required dob str Player's date of birth. required gender str Player's gender. required elo int Player's ELO ranking. required id_num int Player's unique id number. required is_deleted bool Is player deleted. required Source code in models/player.py def __init__ ( self , first_name : str , last_name : str , dob : str , gender : str , elo : int , id_num : int , is_deleted : bool ): \"\"\"Constructor for Player. Args: first_name (str): Players's first name. last_name (str): Player's last name. dob (str): Player's date of birth. gender (str): Player's gender. elo (int): Player's ELO ranking. id_num (int): Player's unique id number. is_deleted (bool): Is player deleted. \"\"\" self . first_name = first_name self . last_name = last_name self . dob = dob self . gender = gender self . elo = elo self . id_num = id_num self . is_deleted = is_deleted","title":"player.py"},{"location":"reference/models/player/#models.player.Player","text":"Model for player. Attributes: Name Type Description first_name str Players's first name. last_name str Player's last name. dob str Player's date of birth. gender str Player's gender. elo int Player's ELO ranking. id_num int Player's unique id number. is_deleted bool Is player deleted. The object is conserved for tournament history.","title":"Player"},{"location":"reference/models/player/#models.player.Player.__init__","text":"Constructor for Player. Parameters: Name Type Description Default first_name str Players's first name. required last_name str Player's last name. required dob str Player's date of birth. required gender str Player's gender. required elo int Player's ELO ranking. required id_num int Player's unique id number. required is_deleted bool Is player deleted. required Source code in models/player.py def __init__ ( self , first_name : str , last_name : str , dob : str , gender : str , elo : int , id_num : int , is_deleted : bool ): \"\"\"Constructor for Player. Args: first_name (str): Players's first name. last_name (str): Player's last name. dob (str): Player's date of birth. gender (str): Player's gender. elo (int): Player's ELO ranking. id_num (int): Player's unique id number. is_deleted (bool): Is player deleted. \"\"\" self . first_name = first_name self . last_name = last_name self . dob = dob self . gender = gender self . elo = elo self . id_num = id_num self . is_deleted = is_deleted","title":"__init__()"},{"location":"reference/models/round/","text":"Round \u00b6 Model for round. All rounds have matches associated with them and are associated with a tournament. Attributes: Name Type Description round_number int Ordered round number within the tournament. tournament_id int Unique id of the parent tournament. id_num int Unique id of this round. matches dict All matches associated with this round. __init__ ( self , round_number , tournament_id , id_num ) special \u00b6 Constructor for Round. Parameters: Name Type Description Default round_number int Ordered round number within the tournament. required tournament_id int Unique id of the parent tournament. required id_num int Unique id of this round. required Source code in models/round.py def __init__ ( self , round_number : int , tournament_id : int , id_num : int ): \"\"\"Constructor for Round. Args: round_number (int): Ordered round number within the tournament. tournament_id (int): Unique id of the parent tournament. id_num (int): Unique id of this round. \"\"\" self . round_number = round_number self . tournament_id = tournament_id self . id_num = id_num self . matches = {}","title":"round.py"},{"location":"reference/models/round/#models.round.Round","text":"Model for round. All rounds have matches associated with them and are associated with a tournament. Attributes: Name Type Description round_number int Ordered round number within the tournament. tournament_id int Unique id of the parent tournament. id_num int Unique id of this round. matches dict All matches associated with this round.","title":"Round"},{"location":"reference/models/round/#models.round.Round.__init__","text":"Constructor for Round. Parameters: Name Type Description Default round_number int Ordered round number within the tournament. required tournament_id int Unique id of the parent tournament. required id_num int Unique id of this round. required Source code in models/round.py def __init__ ( self , round_number : int , tournament_id : int , id_num : int ): \"\"\"Constructor for Round. Args: round_number (int): Ordered round number within the tournament. tournament_id (int): Unique id of the parent tournament. id_num (int): Unique id of this round. \"\"\" self . round_number = round_number self . tournament_id = tournament_id self . id_num = id_num self . matches = {}","title":"__init__()"},{"location":"reference/models/tournament/","text":"Tournament \u00b6 Model for tournament. All tournaments have rounds associated with them, these rounds have matches associated with them. Attributes: Name Type Description name str Tournament's name. location str Tournament's physical location. date str Tournament's date. number_of_rounds int Number of rounds to be played. time_control str Type of time control chosen. description str Tournament's description. id_num int Tournament's unique id. is_finished bool Is the tournament finished ? players list[Player] List of participating players. leaderboard dict Tournament's leaderboard. rounds dict All rounds associated with this tournament. __init__ ( self , name , location , date , number_of_rounds , time_control , description , id_num , is_finished , players , leaderboard ) special \u00b6 Constructor for Tournament. Parameters: Name Type Description Default name str Tournament's name. required location str Tournament's physical location. required date str Tournament's date. required number_of_rounds int Number of rounds to be played. required time_control str Type of time control chosen. required description str Tournament's description. required id_num int Tournament's unique id. required is_finished bool Is the tournament finished ? required players list List of participating players. required leaderboard dict Tournament's leaderboard. required Source code in models/tournament.py def __init__ ( self , name : str , location : str , date : str , number_of_rounds : int , time_control : str , description : str , id_num : int , is_finished : bool , players : list , leaderboard : dict , ): \"\"\"Constructor for Tournament. Args: name (str): Tournament's name. location (str): Tournament's physical location. date (str): Tournament's date. number_of_rounds (int): Number of rounds to be played. time_control (str): Type of time control chosen. description (str): Tournament's description. id_num (int): Tournament's unique id. is_finished (bool): Is the tournament finished ? players (list[Player]): List of participating players. leaderboard (dict): Tournament's leaderboard. \"\"\" self . name = name self . location = location self . date = date self . number_of_rounds = number_of_rounds self . time_control = time_control self . description = description self . id_num = id_num self . is_finished = is_finished self . players = players self . leaderboard = leaderboard self . rounds = {}","title":"tournament.py"},{"location":"reference/models/tournament/#models.tournament.Tournament","text":"Model for tournament. All tournaments have rounds associated with them, these rounds have matches associated with them. Attributes: Name Type Description name str Tournament's name. location str Tournament's physical location. date str Tournament's date. number_of_rounds int Number of rounds to be played. time_control str Type of time control chosen. description str Tournament's description. id_num int Tournament's unique id. is_finished bool Is the tournament finished ? players list[Player] List of participating players. leaderboard dict Tournament's leaderboard. rounds dict All rounds associated with this tournament.","title":"Tournament"},{"location":"reference/models/tournament/#models.tournament.Tournament.__init__","text":"Constructor for Tournament. Parameters: Name Type Description Default name str Tournament's name. required location str Tournament's physical location. required date str Tournament's date. required number_of_rounds int Number of rounds to be played. required time_control str Type of time control chosen. required description str Tournament's description. required id_num int Tournament's unique id. required is_finished bool Is the tournament finished ? required players list List of participating players. required leaderboard dict Tournament's leaderboard. required Source code in models/tournament.py def __init__ ( self , name : str , location : str , date : str , number_of_rounds : int , time_control : str , description : str , id_num : int , is_finished : bool , players : list , leaderboard : dict , ): \"\"\"Constructor for Tournament. Args: name (str): Tournament's name. location (str): Tournament's physical location. date (str): Tournament's date. number_of_rounds (int): Number of rounds to be played. time_control (str): Type of time control chosen. description (str): Tournament's description. id_num (int): Tournament's unique id. is_finished (bool): Is the tournament finished ? players (list[Player]): List of participating players. leaderboard (dict): Tournament's leaderboard. \"\"\" self . name = name self . location = location self . date = date self . number_of_rounds = number_of_rounds self . time_control = time_control self . description = description self . id_num = id_num self . is_finished = is_finished self . players = players self . leaderboard = leaderboard self . rounds = {}","title":"__init__()"},{"location":"reference/views/game/","text":"GameMenu \u00b6 View displayed during a game. Attributes: Name Type Description tournament_handler TournamentHandler Object handling tournament genration, progression and saving. __init__ ( self , tournament_id ) special \u00b6 Constructor for GameMenu. Initiates the match generation. Parameters: Name Type Description Default tournament_id int Unique id of the tournament to be played. required Source code in views/game.py def __init__ ( self , tournament_id : int ): \"\"\"Constructor for GameMenu. Initiates the match generation. Args: tournament_id (int): Unique id of the tournament to be played. \"\"\" self . tournament_handler = TournamentHandler ( tournament_id = tournament_id ) self . play () _HELPER . go_back ( current_view = self . __class__ . __name__ ) ask_for_winner ( self ) \u00b6 Prompts the user to enter a winner. Returns: Type Description str Winner of the match. (\"1\" for Player 1, \"2\" for Player 2, \"nul\" for a draw.) Source code in views/game.py def ask_for_winner ( self ): \"\"\"Prompts the user to enter a winner. Returns: str: Winner of the match. (\"1\" for Player 1, \"2\" for Player 2, \"nul\" for a draw.) \"\"\" winner = \"\" while winner . lower () not in [ \"1\" , \"2\" , \"nul\" ]: winner = typer . prompt ( \"Entrez le gagnant (1, 2, ou nul)\" ) return winner . lower () display_next_match ( self , match ) \u00b6 Initiates relevant info displays and prompts for a given Match. Parameters: Name Type Description Default match Match Match object to be displayed. required Source code in views/game.py def display_next_match ( self , match : Match ): \"\"\"Initiates relevant info displays and prompts for a given Match. Args: match (Match): Match object to be displayed. \"\"\" self . display_tournament_progression () self . introduce_match ( match = match ) winner = self . ask_for_winner () self . tournament_handler . save_winner ( match = match , winner = winner ) display_tournament_progression ( self ) \u00b6 Displays current tournament, round and match numbers. Source code in views/game.py def display_tournament_progression ( self ): \"\"\"Displays current tournament, round and match numbers.\"\"\" self . tournament_handler . update_tournament_progression () decorator = typer . style ( \" - - \" , bold = True , ) separator = typer . style ( \" - \" , bold = True , ) tournament_num = typer . style ( f \"Tournoi { self . tournament_handler . tournament . id_num } \" , fg = typer . colors . BLUE , ) round_num = typer . style ( f \"Round { self . tournament_handler . current_round_num } \" , fg = typer . colors . BLUE , ) match_num = typer . style ( f \"Match { self . tournament_handler . current_match_num } \" , fg = typer . colors . BLUE , ) typer . echo ( \" \\n \" + decorator + tournament_num + separator + round_num + separator + match_num + decorator ) ending_splash ( self ) \u00b6 Displays final leaderboard. Source code in views/game.py def ending_splash ( self ): \"\"\"Displays final leaderboard.\"\"\" typer . echo ( \" \\n \" ) _HELPER . print_success ( \"TOURNOI TERMIN\u00c9\" ) _HELPER . print_info ( \"classement final:\" ) leaderboard = DatabaseHandler () . helper . get_formated_leaderboard ( leaderboard = self . tournament_handler . tournament . leaderboard ) i = 1 for player in leaderboard : rank = typer . style ( f \" { i } -\" , bold = True ) player_name = player [ 0 ] points = str ( player [ 1 ]) typer . echo ( f \" { rank } { player_name } ( { points } points)\" ) i += 1 typer . echo ( \" \\n \" ) introduce_match ( self , match ) \u00b6 Displays current match's players names and ELO ranking. Parameters: Name Type Description Default match Match Match to be played. required Source code in views/game.py def introduce_match ( self , match : Match ): \"\"\"Displays current match's players names and ELO ranking. Args: match (Match): Match to be played. \"\"\" player_1_title = typer . style ( \"Joueur 1: \" , bold = True , ) player_1_name = typer . style ( \" {f_name_1} {l_name_1} \" . format ( f_name_1 = match . player_1 . first_name , l_name_1 = match . player_1 . last_name , ), fg = typer . colors . GREEN , ) player_1_elo = typer . style ( f \"( { match . player_1 . elo } )\" , fg = typer . colors . BLUE , ) player_1_full_presentation = player_1_title + player_1_name + player_1_elo versus = typer . style ( \" vs \" , bold = True , ) player_2_title = typer . style ( \"Joueur 2: \" , bold = True , ) player_2_name = typer . style ( \" {f_name_2} {l_name_2} \" . format ( f_name_2 = match . player_2 . first_name , l_name_2 = match . player_2 . last_name , ), fg = typer . colors . GREEN , ) player_2_elo = typer . style ( f \"( { match . player_2 . elo } )\" , fg = typer . colors . BLUE , ) player_2_full_presentation = player_2_title + player_2_name + player_2_elo typer . echo ( player_1_full_presentation + versus + player_2_full_presentation ) play ( self ) \u00b6 Uses the match generating method of the tournament handler to display a match until tournament's ending. Source code in views/game.py def play ( self ): \"\"\"Uses the match generating method of the tournament handler to display a match until tournament's ending.\"\"\" while self . tournament_handler . match_generator () is not None : self . display_next_match ( self . tournament_handler . match_generator ()) self . ending_splash ()","title":"game.py"},{"location":"reference/views/game/#views.game.GameMenu","text":"View displayed during a game. Attributes: Name Type Description tournament_handler TournamentHandler Object handling tournament genration, progression and saving.","title":"GameMenu"},{"location":"reference/views/game/#views.game.GameMenu.__init__","text":"Constructor for GameMenu. Initiates the match generation. Parameters: Name Type Description Default tournament_id int Unique id of the tournament to be played. required Source code in views/game.py def __init__ ( self , tournament_id : int ): \"\"\"Constructor for GameMenu. Initiates the match generation. Args: tournament_id (int): Unique id of the tournament to be played. \"\"\" self . tournament_handler = TournamentHandler ( tournament_id = tournament_id ) self . play () _HELPER . go_back ( current_view = self . __class__ . __name__ )","title":"__init__()"},{"location":"reference/views/game/#views.game.GameMenu.ask_for_winner","text":"Prompts the user to enter a winner. Returns: Type Description str Winner of the match. (\"1\" for Player 1, \"2\" for Player 2, \"nul\" for a draw.) Source code in views/game.py def ask_for_winner ( self ): \"\"\"Prompts the user to enter a winner. Returns: str: Winner of the match. (\"1\" for Player 1, \"2\" for Player 2, \"nul\" for a draw.) \"\"\" winner = \"\" while winner . lower () not in [ \"1\" , \"2\" , \"nul\" ]: winner = typer . prompt ( \"Entrez le gagnant (1, 2, ou nul)\" ) return winner . lower ()","title":"ask_for_winner()"},{"location":"reference/views/game/#views.game.GameMenu.display_next_match","text":"Initiates relevant info displays and prompts for a given Match. Parameters: Name Type Description Default match Match Match object to be displayed. required Source code in views/game.py def display_next_match ( self , match : Match ): \"\"\"Initiates relevant info displays and prompts for a given Match. Args: match (Match): Match object to be displayed. \"\"\" self . display_tournament_progression () self . introduce_match ( match = match ) winner = self . ask_for_winner () self . tournament_handler . save_winner ( match = match , winner = winner )","title":"display_next_match()"},{"location":"reference/views/game/#views.game.GameMenu.display_tournament_progression","text":"Displays current tournament, round and match numbers. Source code in views/game.py def display_tournament_progression ( self ): \"\"\"Displays current tournament, round and match numbers.\"\"\" self . tournament_handler . update_tournament_progression () decorator = typer . style ( \" - - \" , bold = True , ) separator = typer . style ( \" - \" , bold = True , ) tournament_num = typer . style ( f \"Tournoi { self . tournament_handler . tournament . id_num } \" , fg = typer . colors . BLUE , ) round_num = typer . style ( f \"Round { self . tournament_handler . current_round_num } \" , fg = typer . colors . BLUE , ) match_num = typer . style ( f \"Match { self . tournament_handler . current_match_num } \" , fg = typer . colors . BLUE , ) typer . echo ( \" \\n \" + decorator + tournament_num + separator + round_num + separator + match_num + decorator )","title":"display_tournament_progression()"},{"location":"reference/views/game/#views.game.GameMenu.ending_splash","text":"Displays final leaderboard. Source code in views/game.py def ending_splash ( self ): \"\"\"Displays final leaderboard.\"\"\" typer . echo ( \" \\n \" ) _HELPER . print_success ( \"TOURNOI TERMIN\u00c9\" ) _HELPER . print_info ( \"classement final:\" ) leaderboard = DatabaseHandler () . helper . get_formated_leaderboard ( leaderboard = self . tournament_handler . tournament . leaderboard ) i = 1 for player in leaderboard : rank = typer . style ( f \" { i } -\" , bold = True ) player_name = player [ 0 ] points = str ( player [ 1 ]) typer . echo ( f \" { rank } { player_name } ( { points } points)\" ) i += 1 typer . echo ( \" \\n \" )","title":"ending_splash()"},{"location":"reference/views/game/#views.game.GameMenu.introduce_match","text":"Displays current match's players names and ELO ranking. Parameters: Name Type Description Default match Match Match to be played. required Source code in views/game.py def introduce_match ( self , match : Match ): \"\"\"Displays current match's players names and ELO ranking. Args: match (Match): Match to be played. \"\"\" player_1_title = typer . style ( \"Joueur 1: \" , bold = True , ) player_1_name = typer . style ( \" {f_name_1} {l_name_1} \" . format ( f_name_1 = match . player_1 . first_name , l_name_1 = match . player_1 . last_name , ), fg = typer . colors . GREEN , ) player_1_elo = typer . style ( f \"( { match . player_1 . elo } )\" , fg = typer . colors . BLUE , ) player_1_full_presentation = player_1_title + player_1_name + player_1_elo versus = typer . style ( \" vs \" , bold = True , ) player_2_title = typer . style ( \"Joueur 2: \" , bold = True , ) player_2_name = typer . style ( \" {f_name_2} {l_name_2} \" . format ( f_name_2 = match . player_2 . first_name , l_name_2 = match . player_2 . last_name , ), fg = typer . colors . GREEN , ) player_2_elo = typer . style ( f \"( { match . player_2 . elo } )\" , fg = typer . colors . BLUE , ) player_2_full_presentation = player_2_title + player_2_name + player_2_elo typer . echo ( player_1_full_presentation + versus + player_2_full_presentation )","title":"introduce_match()"},{"location":"reference/views/game/#views.game.GameMenu.play","text":"Uses the match generating method of the tournament handler to display a match until tournament's ending. Source code in views/game.py def play ( self ): \"\"\"Uses the match generating method of the tournament handler to display a match until tournament's ending.\"\"\" while self . tournament_handler . match_generator () is not None : self . display_next_match ( self . tournament_handler . match_generator ()) self . ending_splash ()","title":"play()"},{"location":"reference/views/helper/","text":"ask_for_edit () \u00b6 Asks the user for information edit. Returns: Type Description bool User want to edit this field. Source code in views/helper.py def ask_for_edit (): \"\"\"Asks the user for information edit. Returns: bool: User want to edit this field. \"\"\" confirm = typer . confirm ( \"Modifier cette information?\" ) return confirm ask_for_report_export () \u00b6 Prompts the user to select export settings. Returns: Type Description bool User wants to export the report. Source code in views/helper.py def ask_for_report_export (): \"\"\"Prompts the user to select export settings. Returns: bool: User wants to export the report. \"\"\" print_info ( \"souhaitez vous exporter ce rapport ?\" ) number = typer . style ( \"1. \" , bold = True ) typer . echo ( number + \"Oui\" ) number = typer . style ( \"2. \" , bold = True ) typer . echo ( number + \"Non\" ) selection = \"\" while selection not in [ \"1\" , \"2\" ]: selection = typer . prompt ( \"Entrez votre s\u00e9lection: \" ) if selection == \"1\" : return True elif selection == \"2\" : return False date_is_valid ( date ) \u00b6 Verifies if the date entered by the user is valid using datetime library. Returns: Type Description bool The date exists. Source code in views/helper.py def date_is_valid ( date : str ): \"\"\"Verifies if the date entered by the user is valid using datetime library. Returns: bool: The date exists. \"\"\" try : datetime . strptime ( date , \" %d /%m/%Y\" ) return True except ValueError : if len ( date ) > 0 : print_error ( \"date incorrecte.\" ) return False display_current_value ( field_title , value ) \u00b6 Displays the current value of a field. Parameters: Name Type Description Default field_title str Title to display. required value Any Value to display. required Source code in views/helper.py def display_current_value ( field_title : str , value : Any ): \"\"\"Displays the current value of a field. Args: field_title (str): Title to display. value (Any): Value to display. \"\"\" parameter = typer . style ( f \" \\n { field_title } : \" , bold = True ) typer . echo ( parameter + str ( value )) enter_new_value ( field_title ) \u00b6 Displays a prompt for a new value. Parameters: Name Type Description Default field_title str Title to display. required Returns: Type Description str New value given by the user. Source code in views/helper.py def enter_new_value ( field_title : str ): \"\"\"Displays a prompt for a new value. Args: field_title (str): Title to display. Returns: str: New value given by the user. \"\"\" new_value = typer . prompt ( f \"Entrez une nouvelle valeur pour ' { field_title } '\" ) return new_value gender_is_valid ( gender ) \u00b6 Verifies if the gender entered by the user is valid. Returns: Type Description bool The gender is valid. Source code in views/helper.py def gender_is_valid ( gender : str ): \"\"\"Verifies if the gender entered by the user is valid. Returns: bool: The gender is valid. \"\"\" if len ( gender ) == 0 : return False elif gender . lower () == \"h\" : gender = \"H\" return True elif gender . lower () == \"f\" : gender = \"F\" return True else : print_error ( \"genre incorrect. Entrez H ou F.\" ) return False go_back ( current_view ) \u00b6 Go to previous menu based on current view. Parameters: Name Type Description Default current_view str Current view name based on class name . required Source code in views/helper.py def go_back ( current_view : str ): \"\"\"Go to previous menu based on current view. Args: current_view (str): Current view name based on class __name__. \"\"\" if current_view in [ \"TournamentMenu\" , \"PlayerMenu\" , \"ReportMenu\" , \"GameMenu\" ]: _MAIN_MENU . MainMenu () elif current_view in [ \"NewTournamentMenu\" , \"LoadTournamentMenu\" , \"EditTournamentMenu\" , \"DeleteTournamentMenu\" ]: _TOURNAMENT_VIEWS . TournamentMenu () elif current_view in [ \"NewPlayerMenu\" , \"EditPlayerMenu\" , \"DeletePlayerMenu\" ]: _PLAYER_VIEWS . PlayerMenu () elif current_view in [ \"PlayerReportMenu\" , \"TournamentReportMenu\" ]: _REPORT_VIEWS . ReportMenu () list_all_players () \u00b6 Lists all existing players. Source code in views/helper.py def list_all_players (): \"\"\"Lists all existing players.\"\"\" print_info ( \"liste des joueurs existants:\" ) all_players = DatabaseHandler () . helper . get_players_by_id () for player in all_players : if player . is_deleted : continue player_id = typer . style ( str ( player . id_num ), bold = True ) typer . echo ( f \" { player_id } . { player . first_name } { player . last_name } \" ) list_all_tournaments () \u00b6 Lists all existing tournaments. Source code in views/helper.py def list_all_tournaments (): \"\"\"Lists all existing tournaments.\"\"\" if DatabaseHandler () . helper . is_tournament_db_empty (): typer . secho ( \"Aucun tournoi cr\u00e9\u00e9.\" , fg = typer . colors . RED ) return print_info ( \"liste des tournois existants:\" ) all_tournaments = DatabaseHandler () . helper . get_tournaments_by_id () for tournament in all_tournaments : tournament_id = typer . style ( str ( tournament . id_num ), bold = True ) if tournament . is_finished : is_finished = typer . style ( \" -> Termin\u00e9\" , fg = typer . colors . YELLOW ) else : is_finished = \"\" typer . echo ( f \" { tournament . id_num } . { tournament . name } - { tournament . date } \" + is_finished ) modify_database_file () \u00b6 Prompts the user to select a database file path. Source code in views/helper.py def modify_database_file (): \"\"\"Prompts the user to select a database file path.\"\"\" _CONFIG . config [ \"database_file\" ] = typer . prompt ( \"Entrez un nouvel emplacement\" ) if not _CONFIG . database_path_exists : print_error ( \"L'emplacement saisi est incorrect. V\u00e9rifiez que le dossier existe.\" ) modify_database_file () elif not _CONFIG . database_is_json (): print_error ( \"Votre fichier doit avoir comme extension '.json'.\" ) modify_database_file () elif not _CONFIG . database_exists : print_error ( \"Le fichier de base de donn\u00e9es n'existe pas encore, un nouveau sera donc cr\u00e9\u00e9.\" ) else : print_success ( \"Un fichier de base de donn\u00e9es existant a \u00e9t\u00e9 trouv\u00e9.\" ) modify_report_save_path () \u00b6 Prompts the user to select a report save path. Source code in views/helper.py def modify_report_save_path (): \"\"\"Prompts the user to select a report save path.\"\"\" _CONFIG . config [ \"report_save_path\" ] = typer . prompt ( \"Entrez un nouvel emplacement\" ) if not _CONFIG . report_save_path_exists (): print_error ( \"L'emplacement saisi est incorrect. V\u00e9rifiez que le dossier existe.\" ) modify_report_save_path () player_exists ( selected_id , already_taken_ids = []) \u00b6 Verifies if the player selected by the user exists. Parameters: Name Type Description Default selected_id str Player chosen by the user. required already_taken_ids list List of ids the user cannot choose from. Defaults to []. [] Returns: Type Description bool The user is selectable. Source code in views/helper.py def player_exists ( selected_id : str , already_taken_ids : list = []): \"\"\"Verifies if the player selected by the user exists. Args: selected_id (str): Player chosen by the user. already_taken_ids (list, optional): List of ids the user cannot choose from. Defaults to []. Returns: bool: The user is selectable. \"\"\" if len ( selected_id ) == 0 : return False if not selected_id . isnumeric (): print_error ( \"entrez le num\u00e9ro du joueur apparaissant devant son nom\" ) return False if int ( selected_id ) in already_taken_ids : print_error ( f \"le joueur num\u00e9ro { selected_id } a d\u00e9j\u00e0 \u00e9t\u00e9 ajout\u00e9\" ) return False if DatabaseHandler () . helper . is_player_id_in_database ( player_id = int ( selected_id )): if DatabaseHandler () . helper . get_player_object_from_id_str ( player_id = selected_id ) . is_deleted : return False return True print_error ( f \"pas de joueur avec le num\u00e9ro { selected_id } \" ) return False print_error ( message ) \u00b6 Prints a formated error message. Parameters: Name Type Description Default message str Message content. required Source code in views/helper.py def print_error ( message : str ): \"\"\"Prints a formated error message. Args: message (str): Message content. \"\"\" test_info = typer . secho ( f \"! { message . capitalize () } \" , fg = typer . colors . BRIGHT_RED , bg = typer . colors . BRIGHT_BLACK , bold = True ) print_info ( message ) \u00b6 Prints a formated info message. Parameters: Name Type Description Default message str Message content. required Source code in views/helper.py def print_info ( message : str ): \"\"\"Prints a formated info message. Args: message (str): Message content. \"\"\" test_info = typer . secho ( f \"- { message . capitalize () } \" , fg = typer . colors . BRIGHT_MAGENTA , bg = typer . colors . BRIGHT_BLACK , bold = True ) print_report ( data ) \u00b6 Prints a generated report in console. Parameters: Name Type Description Default data dict Report data dict. required Source code in views/helper.py def print_report ( data : dict ): \"\"\"Prints a generated report in console. Args: data (dict): Report data dict. \"\"\" for element in data : for key in element : field_name = key + \": \" value = typer . style ( str ( element [ key ]), bold = True ) typer . echo ( field_name + value ) typer . echo ( \" \\n \" ) print_success ( message ) \u00b6 Prints a formated success message. Parameters: Name Type Description Default message str Message content. required Source code in views/helper.py def print_success ( message : str ): \"\"\"Prints a formated success message. Args: message (str): Message content. \"\"\" typer . secho ( f \"> { message . capitalize () } \" , fg = typer . colors . BRIGHT_GREEN , bg = typer . colors . BRIGHT_BLACK , bold = True ) print_title ( message ) \u00b6 Prints a formated title. Parameters: Name Type Description Default message str Message content. required Source code in views/helper.py def print_title ( message : str ): \"\"\"Prints a formated title. Args: message (str): Message content. \"\"\" typer . secho ( f \"- { message . upper () } -\" , fg = typer . colors . BRIGHT_CYAN , bg = typer . colors . BRIGHT_BLACK , bold = True ) print_warning ( message ) \u00b6 Prints a formated warning message. Parameters: Name Type Description Default message str Message content. required Source code in views/helper.py def print_warning ( message : str ): \"\"\"Prints a formated warning message. Args: message (str): Message content. \"\"\" typer . secho ( f \" { message . upper () } \" , fg = typer . colors . RED , blink = True , bold = True ) typer . echo ( \" \\n \" ) print_welcome_splash () \u00b6 Prints ASCII presentation. Source code in views/helper.py def print_welcome_splash (): \"\"\"Prints ASCII presentation.\"\"\" welcome_splash_lines = [ [ \" __\" , \"\" ], [ \" / \\\\ \" , \" _ _ _\" ], [ \" \\\\ __/\" , \" | | | | | |\" ], [ \" /____ \\\\ \" , \" ___ ___ ___| |__ ___ ___ ___ ___| |_ _| |__\" ], [ \" | |\" , \" / _ \\\\ / __| / __| '_ \\\\ / _ \\\\ / __/ __| / __| | | | | '_ \\\\ \" ], [ \" |__|\" , \" | (_) | (__ | (__| | | | __/ \\\\ __ \\\\ __ \\\\ | (__| | |_| | |_) |\" ], [ \" (====)\" , \" \\\\ ___/ \\\\ ___| \\\\ ___|_| |_| \\\\ ___||___/___/ \\\\ ___|_| \\\\ __,_|_.__/\" ], [ \" }===={\" , \" ______ ______ \" ], [ \" (______)\" , \" |______| |______|\" ], ] for pawn , title in welcome_splash_lines : pawn_part = typer . style ( pawn , fg = typer . colors . BRIGHT_WHITE , bold = True ) title_part = typer . style ( title , fg = typer . colors . BRIGHT_MAGENTA ) typer . echo ( pawn_part + title_part ) typer . echo ( \" \\n \" ) prompt_config_modification () \u00b6 Prompts the user to change the configuration. Source code in views/helper.py def prompt_config_modification (): \"\"\"Prompts the user to change the configuration.\"\"\" confirm = typer . confirm ( \"Souhaitez vous modifier la configuration actuelle ?\" ) if not confirm : recheck_config () return typer . secho ( f 'Base de donn\u00e9es actuelle: { _CONFIG . config [ \"database_file\" ] } ' , bold = True ) confirm = typer . confirm ( \"Modifier ?\" ) if confirm : modify_database_file () typer . secho ( f 'Emplacement de sauvegarde des rapports actuel: { _CONFIG . config [ \"report_save_path\" ] } ' , bold = True ) confirm = typer . confirm ( \"Modifier ?\" ) if confirm : modify_report_save_path () _CONFIG . save_settings () recheck_config () recheck_config () \u00b6 Checks the configuration validity and prints adequate error messages. Source code in views/helper.py def recheck_config (): \"\"\"Checks the configuration validity and prints adequate error messages.\"\"\" database_path_dont_exists = not _CONFIG . database_path_exists () database_dont_exists = not _CONFIG . database_exists () report_save_path_dont_exists = not _CONFIG . report_save_path_exists () if not any ([ database_path_dont_exists , database_dont_exists , report_save_path_dont_exists ]): print_success ( \"La configuration ne comporte aucune erreur.\" ) return print_warning ( \"Votre configuration comporte toujours les erreurs suivantes:\" ) if database_path_dont_exists : print_error ( \"L'emplacement de la base de donn\u00e9es est invalide.\" ) if database_dont_exists : print_error ( \"Le fichier de base de donn\u00e9es n'existe pas. Il sera donc cr\u00e9\u00e9.\" ) if report_save_path_dont_exists : print_error ( \"L'emplacement de sauvegarde des rapports est invalide.\" ) report_export_prompt () \u00b6 Prompts the user to export the generated report. Returns: Type Description str Selected export format. Source code in views/helper.py def report_export_prompt (): \"\"\"Prompts the user to export the generated report. Returns: str: Selected export format. \"\"\" if not ask_for_report_export (): return None return select_export_format () select_export_format () \u00b6 Prompts the user to select export format. Returns: Type Description str Selected export format. Source code in views/helper.py def select_export_format (): \"\"\"Prompts the user to select export format. Returns: str: Selected export format. \"\"\" print_info ( \"choisissez un format d'export:\" ) number = typer . style ( \"1. \" , bold = True ) typer . echo ( number + \"Texte\" ) number = typer . style ( \"2. \" , bold = True ) typer . echo ( number + \"CSV\" ) number = typer . style ( \" \\n 0. \" , bold = True ) typer . echo ( number + \"Retour\" ) selection = \"\" while selection not in [ \"1\" , \"2\" , \"0\" ]: selection = typer . prompt ( \"Entrez votre s\u00e9lection: \" ) if selection == \"0\" : return None if selection == \"1\" : return \"txt\" elif selection == \"2\" : return \"csv\" select_player () \u00b6 Prompts the user to select a player in database. Source code in views/helper.py def select_player (): \"\"\"Prompts the user to select a player in database.\"\"\" if DatabaseHandler () . helper . is_player_db_empty (): return None list_all_players () selection = \"\" while not player_exists ( selected_id = selection ): selection = typer . prompt ( f \"S\u00e9lectionnez un joueur\" ) return DatabaseHandler () . helper . get_player_object_from_id_str ( player_id = selection ) select_tournament () \u00b6 Prompts the user to select a tournament in database. Source code in views/helper.py def select_tournament (): \"\"\"Prompts the user to select a tournament in database.\"\"\" if DatabaseHandler () . helper . is_tournament_db_empty (): return None list_all_tournaments () selection = \"\" while not tournament_exists ( selected_id = selection ): selection = typer . prompt ( f \"S\u00e9lectionnez un tournoi\" ) return DatabaseHandler () . helper . get_tournament_object_from_id_str ( tournament_id = selection ) tournament_exists ( selected_id ) \u00b6 Verifies if the tournament selected by the user exists. Parameters: Name Type Description Default selected_id str Tournament chosen by the user. required Returns: Type Description bool The tournament is selectable. Source code in views/helper.py def tournament_exists ( selected_id : str ): \"\"\"Verifies if the tournament selected by the user exists. Args: selected_id (str): Tournament chosen by the user. Returns: bool: The tournament is selectable. \"\"\" if len ( selected_id ) == 0 : return False if not selected_id . isnumeric (): print_error ( \"entrez le num\u00e9ro du tournoi apparaissant devant son nom\" ) return False if DatabaseHandler () . helper . is_tournament_id_in_database ( tournament_id = int ( selected_id )): return True print_error ( f \"pas de tournoi avec le num\u00e9ro { selected_id } \" ) return False","title":"helper.py"},{"location":"reference/views/helper/#views.helper.ask_for_edit","text":"Asks the user for information edit. Returns: Type Description bool User want to edit this field. Source code in views/helper.py def ask_for_edit (): \"\"\"Asks the user for information edit. Returns: bool: User want to edit this field. \"\"\" confirm = typer . confirm ( \"Modifier cette information?\" ) return confirm","title":"ask_for_edit()"},{"location":"reference/views/helper/#views.helper.ask_for_report_export","text":"Prompts the user to select export settings. Returns: Type Description bool User wants to export the report. Source code in views/helper.py def ask_for_report_export (): \"\"\"Prompts the user to select export settings. Returns: bool: User wants to export the report. \"\"\" print_info ( \"souhaitez vous exporter ce rapport ?\" ) number = typer . style ( \"1. \" , bold = True ) typer . echo ( number + \"Oui\" ) number = typer . style ( \"2. \" , bold = True ) typer . echo ( number + \"Non\" ) selection = \"\" while selection not in [ \"1\" , \"2\" ]: selection = typer . prompt ( \"Entrez votre s\u00e9lection: \" ) if selection == \"1\" : return True elif selection == \"2\" : return False","title":"ask_for_report_export()"},{"location":"reference/views/helper/#views.helper.date_is_valid","text":"Verifies if the date entered by the user is valid using datetime library. Returns: Type Description bool The date exists. Source code in views/helper.py def date_is_valid ( date : str ): \"\"\"Verifies if the date entered by the user is valid using datetime library. Returns: bool: The date exists. \"\"\" try : datetime . strptime ( date , \" %d /%m/%Y\" ) return True except ValueError : if len ( date ) > 0 : print_error ( \"date incorrecte.\" ) return False","title":"date_is_valid()"},{"location":"reference/views/helper/#views.helper.display_current_value","text":"Displays the current value of a field. Parameters: Name Type Description Default field_title str Title to display. required value Any Value to display. required Source code in views/helper.py def display_current_value ( field_title : str , value : Any ): \"\"\"Displays the current value of a field. Args: field_title (str): Title to display. value (Any): Value to display. \"\"\" parameter = typer . style ( f \" \\n { field_title } : \" , bold = True ) typer . echo ( parameter + str ( value ))","title":"display_current_value()"},{"location":"reference/views/helper/#views.helper.enter_new_value","text":"Displays a prompt for a new value. Parameters: Name Type Description Default field_title str Title to display. required Returns: Type Description str New value given by the user. Source code in views/helper.py def enter_new_value ( field_title : str ): \"\"\"Displays a prompt for a new value. Args: field_title (str): Title to display. Returns: str: New value given by the user. \"\"\" new_value = typer . prompt ( f \"Entrez une nouvelle valeur pour ' { field_title } '\" ) return new_value","title":"enter_new_value()"},{"location":"reference/views/helper/#views.helper.gender_is_valid","text":"Verifies if the gender entered by the user is valid. Returns: Type Description bool The gender is valid. Source code in views/helper.py def gender_is_valid ( gender : str ): \"\"\"Verifies if the gender entered by the user is valid. Returns: bool: The gender is valid. \"\"\" if len ( gender ) == 0 : return False elif gender . lower () == \"h\" : gender = \"H\" return True elif gender . lower () == \"f\" : gender = \"F\" return True else : print_error ( \"genre incorrect. Entrez H ou F.\" ) return False","title":"gender_is_valid()"},{"location":"reference/views/helper/#views.helper.go_back","text":"Go to previous menu based on current view. Parameters: Name Type Description Default current_view str Current view name based on class name . required Source code in views/helper.py def go_back ( current_view : str ): \"\"\"Go to previous menu based on current view. Args: current_view (str): Current view name based on class __name__. \"\"\" if current_view in [ \"TournamentMenu\" , \"PlayerMenu\" , \"ReportMenu\" , \"GameMenu\" ]: _MAIN_MENU . MainMenu () elif current_view in [ \"NewTournamentMenu\" , \"LoadTournamentMenu\" , \"EditTournamentMenu\" , \"DeleteTournamentMenu\" ]: _TOURNAMENT_VIEWS . TournamentMenu () elif current_view in [ \"NewPlayerMenu\" , \"EditPlayerMenu\" , \"DeletePlayerMenu\" ]: _PLAYER_VIEWS . PlayerMenu () elif current_view in [ \"PlayerReportMenu\" , \"TournamentReportMenu\" ]: _REPORT_VIEWS . ReportMenu ()","title":"go_back()"},{"location":"reference/views/helper/#views.helper.list_all_players","text":"Lists all existing players. Source code in views/helper.py def list_all_players (): \"\"\"Lists all existing players.\"\"\" print_info ( \"liste des joueurs existants:\" ) all_players = DatabaseHandler () . helper . get_players_by_id () for player in all_players : if player . is_deleted : continue player_id = typer . style ( str ( player . id_num ), bold = True ) typer . echo ( f \" { player_id } . { player . first_name } { player . last_name } \" )","title":"list_all_players()"},{"location":"reference/views/helper/#views.helper.list_all_tournaments","text":"Lists all existing tournaments. Source code in views/helper.py def list_all_tournaments (): \"\"\"Lists all existing tournaments.\"\"\" if DatabaseHandler () . helper . is_tournament_db_empty (): typer . secho ( \"Aucun tournoi cr\u00e9\u00e9.\" , fg = typer . colors . RED ) return print_info ( \"liste des tournois existants:\" ) all_tournaments = DatabaseHandler () . helper . get_tournaments_by_id () for tournament in all_tournaments : tournament_id = typer . style ( str ( tournament . id_num ), bold = True ) if tournament . is_finished : is_finished = typer . style ( \" -> Termin\u00e9\" , fg = typer . colors . YELLOW ) else : is_finished = \"\" typer . echo ( f \" { tournament . id_num } . { tournament . name } - { tournament . date } \" + is_finished )","title":"list_all_tournaments()"},{"location":"reference/views/helper/#views.helper.modify_database_file","text":"Prompts the user to select a database file path. Source code in views/helper.py def modify_database_file (): \"\"\"Prompts the user to select a database file path.\"\"\" _CONFIG . config [ \"database_file\" ] = typer . prompt ( \"Entrez un nouvel emplacement\" ) if not _CONFIG . database_path_exists : print_error ( \"L'emplacement saisi est incorrect. V\u00e9rifiez que le dossier existe.\" ) modify_database_file () elif not _CONFIG . database_is_json (): print_error ( \"Votre fichier doit avoir comme extension '.json'.\" ) modify_database_file () elif not _CONFIG . database_exists : print_error ( \"Le fichier de base de donn\u00e9es n'existe pas encore, un nouveau sera donc cr\u00e9\u00e9.\" ) else : print_success ( \"Un fichier de base de donn\u00e9es existant a \u00e9t\u00e9 trouv\u00e9.\" )","title":"modify_database_file()"},{"location":"reference/views/helper/#views.helper.modify_report_save_path","text":"Prompts the user to select a report save path. Source code in views/helper.py def modify_report_save_path (): \"\"\"Prompts the user to select a report save path.\"\"\" _CONFIG . config [ \"report_save_path\" ] = typer . prompt ( \"Entrez un nouvel emplacement\" ) if not _CONFIG . report_save_path_exists (): print_error ( \"L'emplacement saisi est incorrect. V\u00e9rifiez que le dossier existe.\" ) modify_report_save_path ()","title":"modify_report_save_path()"},{"location":"reference/views/helper/#views.helper.player_exists","text":"Verifies if the player selected by the user exists. Parameters: Name Type Description Default selected_id str Player chosen by the user. required already_taken_ids list List of ids the user cannot choose from. Defaults to []. [] Returns: Type Description bool The user is selectable. Source code in views/helper.py def player_exists ( selected_id : str , already_taken_ids : list = []): \"\"\"Verifies if the player selected by the user exists. Args: selected_id (str): Player chosen by the user. already_taken_ids (list, optional): List of ids the user cannot choose from. Defaults to []. Returns: bool: The user is selectable. \"\"\" if len ( selected_id ) == 0 : return False if not selected_id . isnumeric (): print_error ( \"entrez le num\u00e9ro du joueur apparaissant devant son nom\" ) return False if int ( selected_id ) in already_taken_ids : print_error ( f \"le joueur num\u00e9ro { selected_id } a d\u00e9j\u00e0 \u00e9t\u00e9 ajout\u00e9\" ) return False if DatabaseHandler () . helper . is_player_id_in_database ( player_id = int ( selected_id )): if DatabaseHandler () . helper . get_player_object_from_id_str ( player_id = selected_id ) . is_deleted : return False return True print_error ( f \"pas de joueur avec le num\u00e9ro { selected_id } \" ) return False","title":"player_exists()"},{"location":"reference/views/helper/#views.helper.print_error","text":"Prints a formated error message. Parameters: Name Type Description Default message str Message content. required Source code in views/helper.py def print_error ( message : str ): \"\"\"Prints a formated error message. Args: message (str): Message content. \"\"\" test_info = typer . secho ( f \"! { message . capitalize () } \" , fg = typer . colors . BRIGHT_RED , bg = typer . colors . BRIGHT_BLACK , bold = True )","title":"print_error()"},{"location":"reference/views/helper/#views.helper.print_info","text":"Prints a formated info message. Parameters: Name Type Description Default message str Message content. required Source code in views/helper.py def print_info ( message : str ): \"\"\"Prints a formated info message. Args: message (str): Message content. \"\"\" test_info = typer . secho ( f \"- { message . capitalize () } \" , fg = typer . colors . BRIGHT_MAGENTA , bg = typer . colors . BRIGHT_BLACK , bold = True )","title":"print_info()"},{"location":"reference/views/helper/#views.helper.print_report","text":"Prints a generated report in console. Parameters: Name Type Description Default data dict Report data dict. required Source code in views/helper.py def print_report ( data : dict ): \"\"\"Prints a generated report in console. Args: data (dict): Report data dict. \"\"\" for element in data : for key in element : field_name = key + \": \" value = typer . style ( str ( element [ key ]), bold = True ) typer . echo ( field_name + value ) typer . echo ( \" \\n \" )","title":"print_report()"},{"location":"reference/views/helper/#views.helper.print_success","text":"Prints a formated success message. Parameters: Name Type Description Default message str Message content. required Source code in views/helper.py def print_success ( message : str ): \"\"\"Prints a formated success message. Args: message (str): Message content. \"\"\" typer . secho ( f \"> { message . capitalize () } \" , fg = typer . colors . BRIGHT_GREEN , bg = typer . colors . BRIGHT_BLACK , bold = True )","title":"print_success()"},{"location":"reference/views/helper/#views.helper.print_title","text":"Prints a formated title. Parameters: Name Type Description Default message str Message content. required Source code in views/helper.py def print_title ( message : str ): \"\"\"Prints a formated title. Args: message (str): Message content. \"\"\" typer . secho ( f \"- { message . upper () } -\" , fg = typer . colors . BRIGHT_CYAN , bg = typer . colors . BRIGHT_BLACK , bold = True )","title":"print_title()"},{"location":"reference/views/helper/#views.helper.print_warning","text":"Prints a formated warning message. Parameters: Name Type Description Default message str Message content. required Source code in views/helper.py def print_warning ( message : str ): \"\"\"Prints a formated warning message. Args: message (str): Message content. \"\"\" typer . secho ( f \" { message . upper () } \" , fg = typer . colors . RED , blink = True , bold = True ) typer . echo ( \" \\n \" )","title":"print_warning()"},{"location":"reference/views/helper/#views.helper.print_welcome_splash","text":"Prints ASCII presentation. Source code in views/helper.py def print_welcome_splash (): \"\"\"Prints ASCII presentation.\"\"\" welcome_splash_lines = [ [ \" __\" , \"\" ], [ \" / \\\\ \" , \" _ _ _\" ], [ \" \\\\ __/\" , \" | | | | | |\" ], [ \" /____ \\\\ \" , \" ___ ___ ___| |__ ___ ___ ___ ___| |_ _| |__\" ], [ \" | |\" , \" / _ \\\\ / __| / __| '_ \\\\ / _ \\\\ / __/ __| / __| | | | | '_ \\\\ \" ], [ \" |__|\" , \" | (_) | (__ | (__| | | | __/ \\\\ __ \\\\ __ \\\\ | (__| | |_| | |_) |\" ], [ \" (====)\" , \" \\\\ ___/ \\\\ ___| \\\\ ___|_| |_| \\\\ ___||___/___/ \\\\ ___|_| \\\\ __,_|_.__/\" ], [ \" }===={\" , \" ______ ______ \" ], [ \" (______)\" , \" |______| |______|\" ], ] for pawn , title in welcome_splash_lines : pawn_part = typer . style ( pawn , fg = typer . colors . BRIGHT_WHITE , bold = True ) title_part = typer . style ( title , fg = typer . colors . BRIGHT_MAGENTA ) typer . echo ( pawn_part + title_part ) typer . echo ( \" \\n \" )","title":"print_welcome_splash()"},{"location":"reference/views/helper/#views.helper.prompt_config_modification","text":"Prompts the user to change the configuration. Source code in views/helper.py def prompt_config_modification (): \"\"\"Prompts the user to change the configuration.\"\"\" confirm = typer . confirm ( \"Souhaitez vous modifier la configuration actuelle ?\" ) if not confirm : recheck_config () return typer . secho ( f 'Base de donn\u00e9es actuelle: { _CONFIG . config [ \"database_file\" ] } ' , bold = True ) confirm = typer . confirm ( \"Modifier ?\" ) if confirm : modify_database_file () typer . secho ( f 'Emplacement de sauvegarde des rapports actuel: { _CONFIG . config [ \"report_save_path\" ] } ' , bold = True ) confirm = typer . confirm ( \"Modifier ?\" ) if confirm : modify_report_save_path () _CONFIG . save_settings () recheck_config ()","title":"prompt_config_modification()"},{"location":"reference/views/helper/#views.helper.recheck_config","text":"Checks the configuration validity and prints adequate error messages. Source code in views/helper.py def recheck_config (): \"\"\"Checks the configuration validity and prints adequate error messages.\"\"\" database_path_dont_exists = not _CONFIG . database_path_exists () database_dont_exists = not _CONFIG . database_exists () report_save_path_dont_exists = not _CONFIG . report_save_path_exists () if not any ([ database_path_dont_exists , database_dont_exists , report_save_path_dont_exists ]): print_success ( \"La configuration ne comporte aucune erreur.\" ) return print_warning ( \"Votre configuration comporte toujours les erreurs suivantes:\" ) if database_path_dont_exists : print_error ( \"L'emplacement de la base de donn\u00e9es est invalide.\" ) if database_dont_exists : print_error ( \"Le fichier de base de donn\u00e9es n'existe pas. Il sera donc cr\u00e9\u00e9.\" ) if report_save_path_dont_exists : print_error ( \"L'emplacement de sauvegarde des rapports est invalide.\" )","title":"recheck_config()"},{"location":"reference/views/helper/#views.helper.report_export_prompt","text":"Prompts the user to export the generated report. Returns: Type Description str Selected export format. Source code in views/helper.py def report_export_prompt (): \"\"\"Prompts the user to export the generated report. Returns: str: Selected export format. \"\"\" if not ask_for_report_export (): return None return select_export_format ()","title":"report_export_prompt()"},{"location":"reference/views/helper/#views.helper.select_export_format","text":"Prompts the user to select export format. Returns: Type Description str Selected export format. Source code in views/helper.py def select_export_format (): \"\"\"Prompts the user to select export format. Returns: str: Selected export format. \"\"\" print_info ( \"choisissez un format d'export:\" ) number = typer . style ( \"1. \" , bold = True ) typer . echo ( number + \"Texte\" ) number = typer . style ( \"2. \" , bold = True ) typer . echo ( number + \"CSV\" ) number = typer . style ( \" \\n 0. \" , bold = True ) typer . echo ( number + \"Retour\" ) selection = \"\" while selection not in [ \"1\" , \"2\" , \"0\" ]: selection = typer . prompt ( \"Entrez votre s\u00e9lection: \" ) if selection == \"0\" : return None if selection == \"1\" : return \"txt\" elif selection == \"2\" : return \"csv\"","title":"select_export_format()"},{"location":"reference/views/helper/#views.helper.select_player","text":"Prompts the user to select a player in database. Source code in views/helper.py def select_player (): \"\"\"Prompts the user to select a player in database.\"\"\" if DatabaseHandler () . helper . is_player_db_empty (): return None list_all_players () selection = \"\" while not player_exists ( selected_id = selection ): selection = typer . prompt ( f \"S\u00e9lectionnez un joueur\" ) return DatabaseHandler () . helper . get_player_object_from_id_str ( player_id = selection )","title":"select_player()"},{"location":"reference/views/helper/#views.helper.select_tournament","text":"Prompts the user to select a tournament in database. Source code in views/helper.py def select_tournament (): \"\"\"Prompts the user to select a tournament in database.\"\"\" if DatabaseHandler () . helper . is_tournament_db_empty (): return None list_all_tournaments () selection = \"\" while not tournament_exists ( selected_id = selection ): selection = typer . prompt ( f \"S\u00e9lectionnez un tournoi\" ) return DatabaseHandler () . helper . get_tournament_object_from_id_str ( tournament_id = selection )","title":"select_tournament()"},{"location":"reference/views/helper/#views.helper.tournament_exists","text":"Verifies if the tournament selected by the user exists. Parameters: Name Type Description Default selected_id str Tournament chosen by the user. required Returns: Type Description bool The tournament is selectable. Source code in views/helper.py def tournament_exists ( selected_id : str ): \"\"\"Verifies if the tournament selected by the user exists. Args: selected_id (str): Tournament chosen by the user. Returns: bool: The tournament is selectable. \"\"\" if len ( selected_id ) == 0 : return False if not selected_id . isnumeric (): print_error ( \"entrez le num\u00e9ro du tournoi apparaissant devant son nom\" ) return False if DatabaseHandler () . helper . is_tournament_id_in_database ( tournament_id = int ( selected_id )): return True print_error ( f \"pas de tournoi avec le num\u00e9ro { selected_id } \" ) return False","title":"tournament_exists()"},{"location":"reference/views/main_menu/","text":"MainMenu \u00b6 First view displayed, main menu. __init__ ( self ) special \u00b6 Constructor for MainMenu. Source code in views/main_menu.py def __init__ ( self ): \"\"\"Constructor for MainMenu.\"\"\" _HELPER . print_title ( \"menu principal\" ) self . print_menu () self . user_selection () print_menu ( self ) \u00b6 Displays the different menu options. Source code in views/main_menu.py def print_menu ( self ): \"\"\"Displays the different menu options.\"\"\" number = typer . style ( \"1. \" , bold = True ) typer . echo ( number + \"Tournois\" ) number = typer . style ( \"2. \" , bold = True ) typer . echo ( number + \"G\u00e9rer les joueurs\" ) number = typer . style ( \"3. \" , bold = True ) typer . echo ( number + \"G\u00e9n\u00e9rer un rapport\" ) number = typer . style ( \" \\n 0. \" , bold = True ) typer . echo ( number + \"Quitter\" ) user_selection ( self ) \u00b6 Prompts the user to select an option. Source code in views/main_menu.py def user_selection ( self ): \"\"\"Prompts the user to select an option.\"\"\" selection = typer . prompt ( \" \\n Entrez votre s\u00e9lection: \" ) typer . echo ( \" \\n \" ) if selection == \"0\" : typer . Exit () elif selection == \"1\" : TournamentMenu () elif selection == \"2\" : PlayerMenu () elif selection == \"3\" : ReportMenu () else : self . user_selection ()","title":"main_menu.py"},{"location":"reference/views/main_menu/#views.main_menu.MainMenu","text":"First view displayed, main menu.","title":"MainMenu"},{"location":"reference/views/main_menu/#views.main_menu.MainMenu.__init__","text":"Constructor for MainMenu. Source code in views/main_menu.py def __init__ ( self ): \"\"\"Constructor for MainMenu.\"\"\" _HELPER . print_title ( \"menu principal\" ) self . print_menu () self . user_selection ()","title":"__init__()"},{"location":"reference/views/main_menu/#views.main_menu.MainMenu.print_menu","text":"Displays the different menu options. Source code in views/main_menu.py def print_menu ( self ): \"\"\"Displays the different menu options.\"\"\" number = typer . style ( \"1. \" , bold = True ) typer . echo ( number + \"Tournois\" ) number = typer . style ( \"2. \" , bold = True ) typer . echo ( number + \"G\u00e9rer les joueurs\" ) number = typer . style ( \"3. \" , bold = True ) typer . echo ( number + \"G\u00e9n\u00e9rer un rapport\" ) number = typer . style ( \" \\n 0. \" , bold = True ) typer . echo ( number + \"Quitter\" )","title":"print_menu()"},{"location":"reference/views/main_menu/#views.main_menu.MainMenu.user_selection","text":"Prompts the user to select an option. Source code in views/main_menu.py def user_selection ( self ): \"\"\"Prompts the user to select an option.\"\"\" selection = typer . prompt ( \" \\n Entrez votre s\u00e9lection: \" ) typer . echo ( \" \\n \" ) if selection == \"0\" : typer . Exit () elif selection == \"1\" : TournamentMenu () elif selection == \"2\" : PlayerMenu () elif selection == \"3\" : ReportMenu () else : self . user_selection ()","title":"user_selection()"},{"location":"reference/views/player_views/","text":"DeletePlayerMenu \u00b6 View for player deletion Attributes: Name Type Description selected_player Player Player selected by user for deletion. __init__ ( self , player_id = None ) special \u00b6 Constructor for DeletePlayerMenu. Parameters: Name Type Description Default player_id int Optional player id to be loaded. Defaults to None. None Source code in views/player_views.py def __init__ ( self , player_id : int = None ): \"\"\"Constructor for DeletePlayerMenu. Args: player_id (int, optional): Optional player id to be loaded. Defaults to None. \"\"\" _HELPER . print_title ( \"suppression d'un joueur\" ) self . cli_argument_handler ( player_id = player_id ) if self . selected_player is None : _HELPER . print_error ( \"aucun joueur cr\u00e9\u00e9.\" ) _HELPER . go_back ( current_view = self . __class__ . __name__ ) return self . confirm_selection () _HELPER . go_back ( current_view = self . __class__ . __name__ ) cli_argument_handler ( self , player_id ) \u00b6 Handles eventual player id passed at instantiation. Parameters: Name Type Description Default player_id str Optional player id to be loaded. required Source code in views/player_views.py def cli_argument_handler ( self , player_id : str ): \"\"\"Handles eventual player id passed at instantiation. Args: player_id (str): Optional player id to be loaded. \"\"\" player_exists = DatabaseHandler () . helper . is_player_id_in_database ( player_id = player_id ) if player_id is not None and not player_exists : _HELPER . print_error ( f \"le joueur n\u00b0 { player_id } n'est pas disponible.\" ) if player_id is not None and player_exists : self . selected_player = DatabaseHandler () . helper . get_player_object_from_id_str ( player_id = str ( player_id )) else : self . selected_player = _HELPER . select_player () confirm_selection ( self ) \u00b6 Prompts the user to confirm user deletion. Source code in views/player_views.py def confirm_selection ( self ): \"\"\"Prompts the user to confirm user deletion.\"\"\" _HELPER . print_warning ( \"vous allez supprimer d\u00e9finitivement ' {first_name} {last_name} '\" . format ( first_name = self . selected_player . first_name , last_name = self . selected_player . last_name ) ) confirm = typer . confirm ( \"Confirmer la suppression ?\" ) if confirm : self . delete_player () else : _HELPER . print_success ( \"l'utilisateur n'a pas \u00e9t\u00e9 supprim\u00e9.\" ) delete_player ( self ) \u00b6 Uses database handler to delete player. Source code in views/player_views.py def delete_player ( self ): \"\"\"Uses database handler to delete player.\"\"\" DatabaseHandler () . delete_player ( player = self . selected_player ) EditPlayerMenu \u00b6 View for player editing. Attributes: Name Type Description selected_player Player Player selected by user for edit. original_player_copy Player Deep copy of initial Player state for modification check. __init__ ( self , player_id = None ) special \u00b6 Constructor for EditPlayerMenu. Parameters: Name Type Description Default player_id int Optional player id to be loaded. Defaults to None. None Source code in views/player_views.py def __init__ ( self , player_id : int = None ): \"\"\"Constructor for EditPlayerMenu. Args: player_id (int, optional): Optional player id to be loaded. Defaults to None. \"\"\" _HELPER . print_title ( \"modification d'un joueur\" ) self . cli_argument_handler ( player_id = player_id ) if self . selected_player is None : _HELPER . print_error ( \"aucun joueur cr\u00e9\u00e9.\" ) _HELPER . go_back ( current_view = self . __class__ . __name__ ) return self . original_player_copy = deepcopy ( self . selected_player ) self . select_edit () if self . is_player_edited (): self . confirm_settings () self . save_player () else : _HELPER . print_success ( \"aucune modification effectu\u00e9e.\" ) _HELPER . go_back ( current_view = self . __class__ . __name__ ) cli_argument_handler ( self , player_id ) \u00b6 Handles eventual player id passed at instantiation. Parameters: Name Type Description Default player_id str Optional player id to be loaded. required Source code in views/player_views.py def cli_argument_handler ( self , player_id : str ): \"\"\"Handles eventual player id passed at instantiation. Args: player_id (str): Optional player id to be loaded. \"\"\" player_exists = DatabaseHandler () . helper . is_player_id_in_database ( player_id = player_id ) if player_id is not None and not player_exists : _HELPER . print_error ( f \"le joueur n\u00b0 { player_id } n'est pas disponible.\" ) if player_id is not None and player_exists : self . selected_player = DatabaseHandler () . helper . get_player_object_from_id_str ( player_id = str ( player_id )) else : self . selected_player = _HELPER . select_player () confirm_settings ( self ) \u00b6 Prompts the user to confirm the settings previously entered. Exceptions: Type Description typer.Exit Exits if the user cancels the creation. Source code in views/player_views.py def confirm_settings ( self ): \"\"\"Prompts the user to confirm the settings previously entered. Raises: typer.Exit: Exits if the user cancels the creation. \"\"\" self . list_settings () confirm = typer . confirm ( \" \\n Souhaitez vous confirmer la modification de ce joueur ?\" ) if not confirm : _HELPER . print_error ( \"annulation. Le joueur n'a pas \u00e9t\u00e9 modifi\u00e9.\" ) raise typer . Exit is_player_edited ( self ) \u00b6 Compares selected player object and original player copy for difference. Returns: Type Description bool The Player attributes were modified. Source code in views/player_views.py def is_player_edited ( self ): \"\"\"Compares selected player object and original player copy for difference. Returns: bool: The Player attributes were modified. \"\"\" if self . selected_player . first_name != self . original_player_copy . first_name : return True elif self . selected_player . last_name != self . original_player_copy . last_name : return True elif self . selected_player . dob != self . original_player_copy . dob : return True elif self . selected_player . gender != self . original_player_copy . gender : return True elif int ( self . selected_player . elo ) != self . original_player_copy . elo : return True else : return False list_settings ( self ) \u00b6 Displays all previously entered player settings. Source code in views/player_views.py def list_settings ( self ): \"\"\"Displays all previously entered player settings.\"\"\" _HELPER . print_info ( \"nouvelles informations du joueur:\" ) parameter = typer . style ( \"Pr\u00e9nom: \" , bold = True ) typer . echo ( parameter + self . selected_player . first_name ) parameter = typer . style ( \"Nom de famille: \" , bold = True ) typer . echo ( parameter + self . selected_player . last_name ) parameter = typer . style ( \"Date de naissance: \" , bold = True ) typer . echo ( parameter + self . selected_player . dob ) parameter = typer . style ( \"Genre: \" , bold = True ) typer . echo ( parameter + self . selected_player . gender ) parameter = typer . style ( \"ELO: \" , bold = True ) typer . echo ( parameter + str ( self . selected_player . elo )) save_player ( self ) \u00b6 Uses database handler to save edited player. Source code in views/player_views.py def save_player ( self ): \"\"\"Uses database handler to save edited player.\"\"\" DatabaseHandler () . create_player ( first_name = self . selected_player . first_name , last_name = self . selected_player . last_name , dob = self . selected_player . dob , gender = self . selected_player . gender , elo = self . selected_player . elo , id_num = self . selected_player . id_num , ) _HELPER . print_success ( f \"le joueur n\u00b0 { str ( self . selected_player . id_num ) } a \u00e9t\u00e9 modifi\u00e9.\" ) select_edit ( self ) \u00b6 Enumerates all player's settings and asks for edit. Source code in views/player_views.py def select_edit ( self ): \"\"\"Enumerates all player's settings and asks for edit.\"\"\" _HELPER . print_info ( \"informations actuelles du joueur:\" ) self . selected_player . first_name = _HELPER . edit_prompt ( field_title = \"Pr\u00e9nom\" , value = self . selected_player . first_name ) self . selected_player . last_name = _HELPER . edit_prompt ( field_title = \"Nom de famille\" , value = self . selected_player . last_name ) self . selected_player . dob = _HELPER . edit_prompt ( field_title = \"Date de naissance\" , value = self . selected_player . dob ) self . selected_player . gender = _HELPER . edit_prompt ( field_title = \"Genre\" , value = self . selected_player . gender ) self . selected_player . elo = _HELPER . edit_prompt ( field_title = \"ELO\" , value = str ( self . selected_player . elo )) NewPlayerMenu \u00b6 View for new player creation. Attributes: Name Type Description first_name str Players's first name. last_name str Player's last name. dob str Player's date of birth. gender str Player's gender. elo str Player's ELO ranking. __init__ ( self ) special \u00b6 Constructor for NewPlayerMenu. Source code in views/player_views.py def __init__ ( self ): \"\"\"Constructor for NewPlayerMenu.\"\"\" _HELPER . print_title ( \"cr\u00e9ation d'un joueur\" ) self . first_name = \"\" self . last_name = \"\" self . dob = \"\" self . gender = \"\" self . elo = \"\" self . settings_prompt () self . confirm_settings () self . save_player () _HELPER . go_back ( current_view = self . __class__ . __name__ ) confirm_settings ( self ) \u00b6 Prompts the user to confirm the settings previously entered. Exceptions: Type Description typer.Exit Exits if the user cancels the creation. Source code in views/player_views.py def confirm_settings ( self ): \"\"\"Prompts the user to confirm the settings previously entered. Raises: typer.Exit: Exits if the user cancels the creation. \"\"\" self . list_settings () confirm = typer . confirm ( \" \\n Souhaitez vous confirmer la cr\u00e9ation de ce joueur ?\" ) if not confirm : _HELPER . print_error ( \"annulation. Le joueur n'a pas \u00e9t\u00e9 cr\u00e9\u00e9.\" ) raise typer . Exit list_settings ( self ) \u00b6 Displays all previously entered player settings. Source code in views/player_views.py def list_settings ( self ): \"\"\"Displays all previously entered player settings.\"\"\" _HELPER . print_info ( \"informations du joueur:\" ) parameter = typer . style ( \"Pr\u00e9nom: \" , bold = True ) typer . echo ( parameter + self . first_name ) parameter = typer . style ( \"Nom de famille: \" , bold = True ) typer . echo ( parameter + self . last_name ) parameter = typer . style ( \"Date de naissance: \" , bold = True ) typer . echo ( parameter + self . dob ) parameter = typer . style ( \"Genre: \" , bold = True ) typer . echo ( parameter + self . gender ) parameter = typer . style ( \"ELO: \" , bold = True ) typer . echo ( parameter + str ( self . elo )) save_player ( self ) \u00b6 Uses database handler to save created player. Source code in views/player_views.py def save_player ( self ): \"\"\"Uses database handler to save created player.\"\"\" created_player_id = DatabaseHandler () . create_player ( first_name = self . first_name , last_name = self . last_name , dob = self . dob , gender = self . gender , elo = int ( self . elo ), ) _HELPER . print_success ( f \"le joueur a \u00e9t\u00e9 cr\u00e9\u00e9 avec le num\u00e9ro { created_player_id } .\" ) settings_prompt ( self ) \u00b6 Prompts the user to input the different player settings. Source code in views/player_views.py def settings_prompt ( self ): \"\"\"Prompts the user to input the different player settings.\"\"\" _HELPER . print_info ( \"entrez les informations du joueur\" ) while len ( self . first_name ) == 0 : self . first_name = typer . prompt ( \"Pr\u00e9nom du joueur\" ) while len ( self . last_name ) == 0 : self . last_name = typer . prompt ( \"Nom de famille du joueur\" ) while not _HELPER . date_is_valid ( date = self . dob ): self . dob = typer . prompt ( \"Date de naissance (JJ/MM/AAAA)\" ) while not _HELPER . gender_is_valid ( gender = self . gender ): self . gender = typer . prompt ( \"Genre (H/F)\" ) while not self . elo . isnumeric (): self . elo = typer . prompt ( \"ELO\" ) PlayerMenu \u00b6 View for player related operations. __init__ ( self ) special \u00b6 Constructor for PlayerMenu. Source code in views/player_views.py def __init__ ( self ): \"\"\"Constructor for PlayerMenu.\"\"\" _HELPER . print_title ( \"menu des joueurs\" ) self . print_menu () self . user_selection () print_menu ( self ) \u00b6 Displays the different menu options. Source code in views/player_views.py def print_menu ( self ): \"\"\"Displays the different menu options.\"\"\" number = typer . style ( \"1. \" , bold = True ) typer . echo ( number + \"Cr\u00e9er un nouveau joueur\" ) number = typer . style ( \"2. \" , bold = True ) typer . echo ( number + \"Modifier un joueur\" ) number = typer . style ( \"3. \" , bold = True ) typer . echo ( number + \"Supprimer un joueur\" ) number = typer . style ( \"4. \" , bold = True ) typer . echo ( number + \"Afficher tous les joueurs\" ) number = typer . style ( \" \\n 0. \" , bold = True ) typer . echo ( number + \"Retour\" ) user_selection ( self ) \u00b6 Prompts the user to select an option. Source code in views/player_views.py def user_selection ( self ): \"\"\"Prompts the user to select an option.\"\"\" selection = typer . prompt ( \" \\n Entrez votre s\u00e9lection: \" ) if selection == \"0\" : _HELPER . go_back ( current_view = self . __class__ . __name__ ) elif selection == \"1\" : typer . echo ( \" \\n\\n \" ) NewPlayerMenu () elif selection == \"2\" : typer . echo ( \" \\n\\n \" ) EditPlayerMenu () elif selection == \"3\" : typer . echo ( \" \\n\\n \" ) DeletePlayerMenu () elif selection == \"4\" : typer . echo ( \" \\n\\n \" ) _HELPER . list_all_players () typer . echo ( \" \\n \" ) self . user_selection () else : self . user_selection ()","title":"player_views.py"},{"location":"reference/views/player_views/#views.player_views.DeletePlayerMenu","text":"View for player deletion Attributes: Name Type Description selected_player Player Player selected by user for deletion.","title":"DeletePlayerMenu"},{"location":"reference/views/player_views/#views.player_views.DeletePlayerMenu.__init__","text":"Constructor for DeletePlayerMenu. Parameters: Name Type Description Default player_id int Optional player id to be loaded. Defaults to None. None Source code in views/player_views.py def __init__ ( self , player_id : int = None ): \"\"\"Constructor for DeletePlayerMenu. Args: player_id (int, optional): Optional player id to be loaded. Defaults to None. \"\"\" _HELPER . print_title ( \"suppression d'un joueur\" ) self . cli_argument_handler ( player_id = player_id ) if self . selected_player is None : _HELPER . print_error ( \"aucun joueur cr\u00e9\u00e9.\" ) _HELPER . go_back ( current_view = self . __class__ . __name__ ) return self . confirm_selection () _HELPER . go_back ( current_view = self . __class__ . __name__ )","title":"__init__()"},{"location":"reference/views/player_views/#views.player_views.DeletePlayerMenu.cli_argument_handler","text":"Handles eventual player id passed at instantiation. Parameters: Name Type Description Default player_id str Optional player id to be loaded. required Source code in views/player_views.py def cli_argument_handler ( self , player_id : str ): \"\"\"Handles eventual player id passed at instantiation. Args: player_id (str): Optional player id to be loaded. \"\"\" player_exists = DatabaseHandler () . helper . is_player_id_in_database ( player_id = player_id ) if player_id is not None and not player_exists : _HELPER . print_error ( f \"le joueur n\u00b0 { player_id } n'est pas disponible.\" ) if player_id is not None and player_exists : self . selected_player = DatabaseHandler () . helper . get_player_object_from_id_str ( player_id = str ( player_id )) else : self . selected_player = _HELPER . select_player ()","title":"cli_argument_handler()"},{"location":"reference/views/player_views/#views.player_views.DeletePlayerMenu.confirm_selection","text":"Prompts the user to confirm user deletion. Source code in views/player_views.py def confirm_selection ( self ): \"\"\"Prompts the user to confirm user deletion.\"\"\" _HELPER . print_warning ( \"vous allez supprimer d\u00e9finitivement ' {first_name} {last_name} '\" . format ( first_name = self . selected_player . first_name , last_name = self . selected_player . last_name ) ) confirm = typer . confirm ( \"Confirmer la suppression ?\" ) if confirm : self . delete_player () else : _HELPER . print_success ( \"l'utilisateur n'a pas \u00e9t\u00e9 supprim\u00e9.\" )","title":"confirm_selection()"},{"location":"reference/views/player_views/#views.player_views.DeletePlayerMenu.delete_player","text":"Uses database handler to delete player. Source code in views/player_views.py def delete_player ( self ): \"\"\"Uses database handler to delete player.\"\"\" DatabaseHandler () . delete_player ( player = self . selected_player )","title":"delete_player()"},{"location":"reference/views/player_views/#views.player_views.EditPlayerMenu","text":"View for player editing. Attributes: Name Type Description selected_player Player Player selected by user for edit. original_player_copy Player Deep copy of initial Player state for modification check.","title":"EditPlayerMenu"},{"location":"reference/views/player_views/#views.player_views.EditPlayerMenu.__init__","text":"Constructor for EditPlayerMenu. Parameters: Name Type Description Default player_id int Optional player id to be loaded. Defaults to None. None Source code in views/player_views.py def __init__ ( self , player_id : int = None ): \"\"\"Constructor for EditPlayerMenu. Args: player_id (int, optional): Optional player id to be loaded. Defaults to None. \"\"\" _HELPER . print_title ( \"modification d'un joueur\" ) self . cli_argument_handler ( player_id = player_id ) if self . selected_player is None : _HELPER . print_error ( \"aucun joueur cr\u00e9\u00e9.\" ) _HELPER . go_back ( current_view = self . __class__ . __name__ ) return self . original_player_copy = deepcopy ( self . selected_player ) self . select_edit () if self . is_player_edited (): self . confirm_settings () self . save_player () else : _HELPER . print_success ( \"aucune modification effectu\u00e9e.\" ) _HELPER . go_back ( current_view = self . __class__ . __name__ )","title":"__init__()"},{"location":"reference/views/player_views/#views.player_views.EditPlayerMenu.cli_argument_handler","text":"Handles eventual player id passed at instantiation. Parameters: Name Type Description Default player_id str Optional player id to be loaded. required Source code in views/player_views.py def cli_argument_handler ( self , player_id : str ): \"\"\"Handles eventual player id passed at instantiation. Args: player_id (str): Optional player id to be loaded. \"\"\" player_exists = DatabaseHandler () . helper . is_player_id_in_database ( player_id = player_id ) if player_id is not None and not player_exists : _HELPER . print_error ( f \"le joueur n\u00b0 { player_id } n'est pas disponible.\" ) if player_id is not None and player_exists : self . selected_player = DatabaseHandler () . helper . get_player_object_from_id_str ( player_id = str ( player_id )) else : self . selected_player = _HELPER . select_player ()","title":"cli_argument_handler()"},{"location":"reference/views/player_views/#views.player_views.EditPlayerMenu.confirm_settings","text":"Prompts the user to confirm the settings previously entered. Exceptions: Type Description typer.Exit Exits if the user cancels the creation. Source code in views/player_views.py def confirm_settings ( self ): \"\"\"Prompts the user to confirm the settings previously entered. Raises: typer.Exit: Exits if the user cancels the creation. \"\"\" self . list_settings () confirm = typer . confirm ( \" \\n Souhaitez vous confirmer la modification de ce joueur ?\" ) if not confirm : _HELPER . print_error ( \"annulation. Le joueur n'a pas \u00e9t\u00e9 modifi\u00e9.\" ) raise typer . Exit","title":"confirm_settings()"},{"location":"reference/views/player_views/#views.player_views.EditPlayerMenu.is_player_edited","text":"Compares selected player object and original player copy for difference. Returns: Type Description bool The Player attributes were modified. Source code in views/player_views.py def is_player_edited ( self ): \"\"\"Compares selected player object and original player copy for difference. Returns: bool: The Player attributes were modified. \"\"\" if self . selected_player . first_name != self . original_player_copy . first_name : return True elif self . selected_player . last_name != self . original_player_copy . last_name : return True elif self . selected_player . dob != self . original_player_copy . dob : return True elif self . selected_player . gender != self . original_player_copy . gender : return True elif int ( self . selected_player . elo ) != self . original_player_copy . elo : return True else : return False","title":"is_player_edited()"},{"location":"reference/views/player_views/#views.player_views.EditPlayerMenu.list_settings","text":"Displays all previously entered player settings. Source code in views/player_views.py def list_settings ( self ): \"\"\"Displays all previously entered player settings.\"\"\" _HELPER . print_info ( \"nouvelles informations du joueur:\" ) parameter = typer . style ( \"Pr\u00e9nom: \" , bold = True ) typer . echo ( parameter + self . selected_player . first_name ) parameter = typer . style ( \"Nom de famille: \" , bold = True ) typer . echo ( parameter + self . selected_player . last_name ) parameter = typer . style ( \"Date de naissance: \" , bold = True ) typer . echo ( parameter + self . selected_player . dob ) parameter = typer . style ( \"Genre: \" , bold = True ) typer . echo ( parameter + self . selected_player . gender ) parameter = typer . style ( \"ELO: \" , bold = True ) typer . echo ( parameter + str ( self . selected_player . elo ))","title":"list_settings()"},{"location":"reference/views/player_views/#views.player_views.EditPlayerMenu.save_player","text":"Uses database handler to save edited player. Source code in views/player_views.py def save_player ( self ): \"\"\"Uses database handler to save edited player.\"\"\" DatabaseHandler () . create_player ( first_name = self . selected_player . first_name , last_name = self . selected_player . last_name , dob = self . selected_player . dob , gender = self . selected_player . gender , elo = self . selected_player . elo , id_num = self . selected_player . id_num , ) _HELPER . print_success ( f \"le joueur n\u00b0 { str ( self . selected_player . id_num ) } a \u00e9t\u00e9 modifi\u00e9.\" )","title":"save_player()"},{"location":"reference/views/player_views/#views.player_views.EditPlayerMenu.select_edit","text":"Enumerates all player's settings and asks for edit. Source code in views/player_views.py def select_edit ( self ): \"\"\"Enumerates all player's settings and asks for edit.\"\"\" _HELPER . print_info ( \"informations actuelles du joueur:\" ) self . selected_player . first_name = _HELPER . edit_prompt ( field_title = \"Pr\u00e9nom\" , value = self . selected_player . first_name ) self . selected_player . last_name = _HELPER . edit_prompt ( field_title = \"Nom de famille\" , value = self . selected_player . last_name ) self . selected_player . dob = _HELPER . edit_prompt ( field_title = \"Date de naissance\" , value = self . selected_player . dob ) self . selected_player . gender = _HELPER . edit_prompt ( field_title = \"Genre\" , value = self . selected_player . gender ) self . selected_player . elo = _HELPER . edit_prompt ( field_title = \"ELO\" , value = str ( self . selected_player . elo ))","title":"select_edit()"},{"location":"reference/views/player_views/#views.player_views.NewPlayerMenu","text":"View for new player creation. Attributes: Name Type Description first_name str Players's first name. last_name str Player's last name. dob str Player's date of birth. gender str Player's gender. elo str Player's ELO ranking.","title":"NewPlayerMenu"},{"location":"reference/views/player_views/#views.player_views.NewPlayerMenu.__init__","text":"Constructor for NewPlayerMenu. Source code in views/player_views.py def __init__ ( self ): \"\"\"Constructor for NewPlayerMenu.\"\"\" _HELPER . print_title ( \"cr\u00e9ation d'un joueur\" ) self . first_name = \"\" self . last_name = \"\" self . dob = \"\" self . gender = \"\" self . elo = \"\" self . settings_prompt () self . confirm_settings () self . save_player () _HELPER . go_back ( current_view = self . __class__ . __name__ )","title":"__init__()"},{"location":"reference/views/player_views/#views.player_views.NewPlayerMenu.confirm_settings","text":"Prompts the user to confirm the settings previously entered. Exceptions: Type Description typer.Exit Exits if the user cancels the creation. Source code in views/player_views.py def confirm_settings ( self ): \"\"\"Prompts the user to confirm the settings previously entered. Raises: typer.Exit: Exits if the user cancels the creation. \"\"\" self . list_settings () confirm = typer . confirm ( \" \\n Souhaitez vous confirmer la cr\u00e9ation de ce joueur ?\" ) if not confirm : _HELPER . print_error ( \"annulation. Le joueur n'a pas \u00e9t\u00e9 cr\u00e9\u00e9.\" ) raise typer . Exit","title":"confirm_settings()"},{"location":"reference/views/player_views/#views.player_views.NewPlayerMenu.list_settings","text":"Displays all previously entered player settings. Source code in views/player_views.py def list_settings ( self ): \"\"\"Displays all previously entered player settings.\"\"\" _HELPER . print_info ( \"informations du joueur:\" ) parameter = typer . style ( \"Pr\u00e9nom: \" , bold = True ) typer . echo ( parameter + self . first_name ) parameter = typer . style ( \"Nom de famille: \" , bold = True ) typer . echo ( parameter + self . last_name ) parameter = typer . style ( \"Date de naissance: \" , bold = True ) typer . echo ( parameter + self . dob ) parameter = typer . style ( \"Genre: \" , bold = True ) typer . echo ( parameter + self . gender ) parameter = typer . style ( \"ELO: \" , bold = True ) typer . echo ( parameter + str ( self . elo ))","title":"list_settings()"},{"location":"reference/views/player_views/#views.player_views.NewPlayerMenu.save_player","text":"Uses database handler to save created player. Source code in views/player_views.py def save_player ( self ): \"\"\"Uses database handler to save created player.\"\"\" created_player_id = DatabaseHandler () . create_player ( first_name = self . first_name , last_name = self . last_name , dob = self . dob , gender = self . gender , elo = int ( self . elo ), ) _HELPER . print_success ( f \"le joueur a \u00e9t\u00e9 cr\u00e9\u00e9 avec le num\u00e9ro { created_player_id } .\" )","title":"save_player()"},{"location":"reference/views/player_views/#views.player_views.NewPlayerMenu.settings_prompt","text":"Prompts the user to input the different player settings. Source code in views/player_views.py def settings_prompt ( self ): \"\"\"Prompts the user to input the different player settings.\"\"\" _HELPER . print_info ( \"entrez les informations du joueur\" ) while len ( self . first_name ) == 0 : self . first_name = typer . prompt ( \"Pr\u00e9nom du joueur\" ) while len ( self . last_name ) == 0 : self . last_name = typer . prompt ( \"Nom de famille du joueur\" ) while not _HELPER . date_is_valid ( date = self . dob ): self . dob = typer . prompt ( \"Date de naissance (JJ/MM/AAAA)\" ) while not _HELPER . gender_is_valid ( gender = self . gender ): self . gender = typer . prompt ( \"Genre (H/F)\" ) while not self . elo . isnumeric (): self . elo = typer . prompt ( \"ELO\" )","title":"settings_prompt()"},{"location":"reference/views/player_views/#views.player_views.PlayerMenu","text":"View for player related operations.","title":"PlayerMenu"},{"location":"reference/views/player_views/#views.player_views.PlayerMenu.__init__","text":"Constructor for PlayerMenu. Source code in views/player_views.py def __init__ ( self ): \"\"\"Constructor for PlayerMenu.\"\"\" _HELPER . print_title ( \"menu des joueurs\" ) self . print_menu () self . user_selection ()","title":"__init__()"},{"location":"reference/views/player_views/#views.player_views.PlayerMenu.print_menu","text":"Displays the different menu options. Source code in views/player_views.py def print_menu ( self ): \"\"\"Displays the different menu options.\"\"\" number = typer . style ( \"1. \" , bold = True ) typer . echo ( number + \"Cr\u00e9er un nouveau joueur\" ) number = typer . style ( \"2. \" , bold = True ) typer . echo ( number + \"Modifier un joueur\" ) number = typer . style ( \"3. \" , bold = True ) typer . echo ( number + \"Supprimer un joueur\" ) number = typer . style ( \"4. \" , bold = True ) typer . echo ( number + \"Afficher tous les joueurs\" ) number = typer . style ( \" \\n 0. \" , bold = True ) typer . echo ( number + \"Retour\" )","title":"print_menu()"},{"location":"reference/views/player_views/#views.player_views.PlayerMenu.user_selection","text":"Prompts the user to select an option. Source code in views/player_views.py def user_selection ( self ): \"\"\"Prompts the user to select an option.\"\"\" selection = typer . prompt ( \" \\n Entrez votre s\u00e9lection: \" ) if selection == \"0\" : _HELPER . go_back ( current_view = self . __class__ . __name__ ) elif selection == \"1\" : typer . echo ( \" \\n\\n \" ) NewPlayerMenu () elif selection == \"2\" : typer . echo ( \" \\n\\n \" ) EditPlayerMenu () elif selection == \"3\" : typer . echo ( \" \\n\\n \" ) DeletePlayerMenu () elif selection == \"4\" : typer . echo ( \" \\n\\n \" ) _HELPER . list_all_players () typer . echo ( \" \\n \" ) self . user_selection () else : self . user_selection ()","title":"user_selection()"},{"location":"reference/views/report_views/","text":"PlayerReportMenu \u00b6 View for player related reports. __init__ ( self ) special \u00b6 Constructor for PlayerReportMenu. Source code in views/report_views.py def __init__ ( self ): \"\"\"Constructor for PlayerReportMenu.\"\"\" _HELPER . print_title ( \"rapport des joueurs\" ) if DatabaseHandler () . helper . is_player_db_empty (): _HELPER . print_error ( \"aucun joueur cr\u00e9\u00e9.\" ) _HELPER . go_back ( current_view = self . __class__ . __name__ ) return self . report_handler = ReportHandler () self . print_menu () self . user_selection () _HELPER . go_back ( current_view = self . __class__ . __name__ ) print_menu ( self ) \u00b6 Displays the different menu options. Source code in views/report_views.py def print_menu ( self ): \"\"\"Displays the different menu options.\"\"\" number = typer . style ( \"1. \" , bold = True ) typer . echo ( number + \"Par Nom\" ) number = typer . style ( \"2. \" , bold = True ) typer . echo ( number + \"Par ELO\" ) number = typer . style ( \" \\n 0. \" , bold = True ) typer . echo ( number + \"Retour\" ) user_selection ( self ) \u00b6 Prompts the user to select an option. Source code in views/report_views.py def user_selection ( self ): \"\"\"Prompts the user to select an option.\"\"\" selection = typer . prompt ( \"Entrez votre s\u00e9lection: \" ) if selection == \"0\" : typer . echo ( \" \\n\\n \" ) _HELPER . go_back ( current_view = self . __class__ . __name__ ) elif selection == \"1\" : typer . echo ( \" \\n\\n \" ) self . report_handler . all_players_by_name () elif selection == \"2\" : typer . echo ( \" \\n\\n \" ) self . report_handler . all_players_by_elo () else : self . user_selection () return _HELPER . print_report ( self . report_handler . data ) export_format = _HELPER . report_export_prompt () if export_format is not None : save_path = self . report_handler . init_export ( export_format ) _HELPER . print_success ( f \"rapport enregistr\u00e9 sous: { save_path } \" ) ReportMenu \u00b6 View for report related operations. __init__ ( self ) special \u00b6 Constructor for TournamentMenu. Source code in views/report_views.py def __init__ ( self ): \"\"\"Constructor for TournamentMenu.\"\"\" if not _CONFIG . report_save_path_exists (): _HELPER . print_error ( \"Le chemin de sauvegarde des rapports n'existe pas, vous ne pouvez donc pas en g\u00e9n\u00e9rer.\" ) _HELPER . go_back ( current_view = self . __class__ . __name__ ) _HELPER . print_title ( \"menu des rapports\" ) self . print_menu () self . user_selection () _HELPER . go_back ( current_view = self . __class__ . __name__ ) print_menu ( self ) \u00b6 Displays the different menu options. Source code in views/report_views.py def print_menu ( self ): \"\"\"Displays the different menu options.\"\"\" number = typer . style ( \"1. \" , bold = True ) typer . echo ( number + \"Joueurs\" ) number = typer . style ( \"2. \" , bold = True ) typer . echo ( number + \"Tournois\" ) number = typer . style ( \" \\n 0. \" , bold = True ) typer . echo ( number + \"Retour\" ) user_selection ( self ) \u00b6 Prompts the user to select an option. Source code in views/report_views.py def user_selection ( self ): \"\"\"Prompts the user to select an option.\"\"\" selection = typer . prompt ( \"Entrez votre s\u00e9lection: \" ) if selection == \"0\" : typer . echo ( \" \\n\\n \" ) _HELPER . go_back ( current_view = self . __class__ . __name__ ) elif selection == \"1\" : PlayerReportMenu () elif selection == \"2\" : TournamentReportMenu () else : self . user_selection () TournamentReportMenu \u00b6 View for tournament related reports. __init__ ( self ) special \u00b6 Constructor for TournamentReportMenu. Source code in views/report_views.py def __init__ ( self ): \"\"\"Constructor for TournamentReportMenu.\"\"\" _HELPER . print_title ( \"rapport des tournois\" ) if DatabaseHandler () . helper . is_tournament_db_empty (): _HELPER . print_error ( \"aucun joueur cr\u00e9\u00e9.\" ) _HELPER . go_back ( current_view = self . __class__ . __name__ ) return self . report_handler = ReportHandler () self . print_menu () self . user_selection () _HELPER . go_back ( current_view = self . __class__ . __name__ ) print_menu ( self ) \u00b6 Displays the different menu options. Source code in views/report_views.py def print_menu ( self ): \"\"\"Displays the different menu options.\"\"\" number = typer . style ( \"1. \" , bold = True ) typer . echo ( number + \"Tous les tournois\" ) number = typer . style ( \"2. \" , bold = True ) typer . echo ( number + \"Joueurs d'un tournoi\" ) number = typer . style ( \"3. \" , bold = True ) typer . echo ( number + \"Rounds d'un tournoi\" ) number = typer . style ( \"4. \" , bold = True ) typer . echo ( number + \"Matchs d'un tournoi\" ) number = typer . style ( \" \\n 0. \" , bold = True ) typer . echo ( number + \"Retour\" ) tournament_players_sub_menu ( self ) \u00b6 Sub-menu for tournament's players report. Source code in views/report_views.py def tournament_players_sub_menu ( self ): \"\"\"Sub-menu for tournament's players report.\"\"\" selected_tournament = _HELPER . select_tournament () number = typer . style ( \"1. \" , bold = True ) typer . echo ( number + \"Par Nom\" ) number = typer . style ( \"2. \" , bold = True ) typer . echo ( number + \"Par ELO\" ) number = typer . style ( \" \\n 0. \" , bold = True ) typer . echo ( number + \"Retour\" ) self . tournament_players_sub_menu_selection ( selected_tournament = selected_tournament ) tournament_players_sub_menu_selection ( self , selected_tournament ) \u00b6 User prompt for tournament's players report sub-menu. Parameters: Name Type Description Default selected_tournament Tournament Tournament previously selected. required Source code in views/report_views.py def tournament_players_sub_menu_selection ( self , selected_tournament : Tournament ): \"\"\"User prompt for tournament's players report sub-menu. Args: selected_tournament (Tournament): Tournament previously selected. \"\"\" selection = typer . prompt ( \"Entrez votre s\u00e9lection: \" ) if selection == \"0\" : typer . echo ( \" \\n\\n \" ) _HELPER . go_back ( current_view = self . __class__ . __name__ ) elif selection == \"1\" : typer . echo ( \" \\n\\n \" ) self . report_handler . tournament_players_by_name ( tournament = selected_tournament ) elif selection == \"2\" : self . report_handler . tournament_players_by_elo ( tournament = selected_tournament ) else : self . user_selection () return user_selection ( self ) \u00b6 Prompts the user to select an option. Source code in views/report_views.py def user_selection ( self ): \"\"\"Prompts the user to select an option.\"\"\" selection = typer . prompt ( \"Entrez votre s\u00e9lection: \" ) if selection == \"0\" : typer . echo ( \" \\n\\n \" ) _HELPER . go_back ( current_view = self . __class__ . __name__ ) return elif selection == \"1\" : typer . echo ( \" \\n\\n \" ) self . report_handler . all_tournaments () elif selection == \"2\" : self . tournament_players_sub_menu () elif selection == \"3\" : selected_tournament = _HELPER . select_tournament () if len ( selected_tournament . rounds ) == 0 : _HELPER . print_error ( \"le tournoi ne comporte aucun round.\" ) _HELPER . go_back ( current_view = self . __class__ . __name__ ) return self . report_handler . tournament_rounds ( tournament = selected_tournament ) elif selection == \"4\" : selected_tournament = _HELPER . select_tournament () if len ( selected_tournament . rounds ) == 0 : _HELPER . print_error ( \"le tournoi ne comporte aucun match.\" ) _HELPER . go_back ( current_view = self . __class__ . __name__ ) return self . report_handler . tournament_matches ( tournament = selected_tournament ) else : self . user_selection () return _HELPER . print_report ( self . report_handler . data ) export_format = _HELPER . report_export_prompt () if export_format is not None : save_path = self . report_handler . init_export ( export_format ) _HELPER . print_success ( f \"rapport enregistr\u00e9 sous: { save_path } \" )","title":"report_views.py"},{"location":"reference/views/report_views/#views.report_views.PlayerReportMenu","text":"View for player related reports.","title":"PlayerReportMenu"},{"location":"reference/views/report_views/#views.report_views.PlayerReportMenu.__init__","text":"Constructor for PlayerReportMenu. Source code in views/report_views.py def __init__ ( self ): \"\"\"Constructor for PlayerReportMenu.\"\"\" _HELPER . print_title ( \"rapport des joueurs\" ) if DatabaseHandler () . helper . is_player_db_empty (): _HELPER . print_error ( \"aucun joueur cr\u00e9\u00e9.\" ) _HELPER . go_back ( current_view = self . __class__ . __name__ ) return self . report_handler = ReportHandler () self . print_menu () self . user_selection () _HELPER . go_back ( current_view = self . __class__ . __name__ )","title":"__init__()"},{"location":"reference/views/report_views/#views.report_views.PlayerReportMenu.print_menu","text":"Displays the different menu options. Source code in views/report_views.py def print_menu ( self ): \"\"\"Displays the different menu options.\"\"\" number = typer . style ( \"1. \" , bold = True ) typer . echo ( number + \"Par Nom\" ) number = typer . style ( \"2. \" , bold = True ) typer . echo ( number + \"Par ELO\" ) number = typer . style ( \" \\n 0. \" , bold = True ) typer . echo ( number + \"Retour\" )","title":"print_menu()"},{"location":"reference/views/report_views/#views.report_views.PlayerReportMenu.user_selection","text":"Prompts the user to select an option. Source code in views/report_views.py def user_selection ( self ): \"\"\"Prompts the user to select an option.\"\"\" selection = typer . prompt ( \"Entrez votre s\u00e9lection: \" ) if selection == \"0\" : typer . echo ( \" \\n\\n \" ) _HELPER . go_back ( current_view = self . __class__ . __name__ ) elif selection == \"1\" : typer . echo ( \" \\n\\n \" ) self . report_handler . all_players_by_name () elif selection == \"2\" : typer . echo ( \" \\n\\n \" ) self . report_handler . all_players_by_elo () else : self . user_selection () return _HELPER . print_report ( self . report_handler . data ) export_format = _HELPER . report_export_prompt () if export_format is not None : save_path = self . report_handler . init_export ( export_format ) _HELPER . print_success ( f \"rapport enregistr\u00e9 sous: { save_path } \" )","title":"user_selection()"},{"location":"reference/views/report_views/#views.report_views.ReportMenu","text":"View for report related operations.","title":"ReportMenu"},{"location":"reference/views/report_views/#views.report_views.ReportMenu.__init__","text":"Constructor for TournamentMenu. Source code in views/report_views.py def __init__ ( self ): \"\"\"Constructor for TournamentMenu.\"\"\" if not _CONFIG . report_save_path_exists (): _HELPER . print_error ( \"Le chemin de sauvegarde des rapports n'existe pas, vous ne pouvez donc pas en g\u00e9n\u00e9rer.\" ) _HELPER . go_back ( current_view = self . __class__ . __name__ ) _HELPER . print_title ( \"menu des rapports\" ) self . print_menu () self . user_selection () _HELPER . go_back ( current_view = self . __class__ . __name__ )","title":"__init__()"},{"location":"reference/views/report_views/#views.report_views.ReportMenu.print_menu","text":"Displays the different menu options. Source code in views/report_views.py def print_menu ( self ): \"\"\"Displays the different menu options.\"\"\" number = typer . style ( \"1. \" , bold = True ) typer . echo ( number + \"Joueurs\" ) number = typer . style ( \"2. \" , bold = True ) typer . echo ( number + \"Tournois\" ) number = typer . style ( \" \\n 0. \" , bold = True ) typer . echo ( number + \"Retour\" )","title":"print_menu()"},{"location":"reference/views/report_views/#views.report_views.ReportMenu.user_selection","text":"Prompts the user to select an option. Source code in views/report_views.py def user_selection ( self ): \"\"\"Prompts the user to select an option.\"\"\" selection = typer . prompt ( \"Entrez votre s\u00e9lection: \" ) if selection == \"0\" : typer . echo ( \" \\n\\n \" ) _HELPER . go_back ( current_view = self . __class__ . __name__ ) elif selection == \"1\" : PlayerReportMenu () elif selection == \"2\" : TournamentReportMenu () else : self . user_selection ()","title":"user_selection()"},{"location":"reference/views/report_views/#views.report_views.TournamentReportMenu","text":"View for tournament related reports.","title":"TournamentReportMenu"},{"location":"reference/views/report_views/#views.report_views.TournamentReportMenu.__init__","text":"Constructor for TournamentReportMenu. Source code in views/report_views.py def __init__ ( self ): \"\"\"Constructor for TournamentReportMenu.\"\"\" _HELPER . print_title ( \"rapport des tournois\" ) if DatabaseHandler () . helper . is_tournament_db_empty (): _HELPER . print_error ( \"aucun joueur cr\u00e9\u00e9.\" ) _HELPER . go_back ( current_view = self . __class__ . __name__ ) return self . report_handler = ReportHandler () self . print_menu () self . user_selection () _HELPER . go_back ( current_view = self . __class__ . __name__ )","title":"__init__()"},{"location":"reference/views/report_views/#views.report_views.TournamentReportMenu.print_menu","text":"Displays the different menu options. Source code in views/report_views.py def print_menu ( self ): \"\"\"Displays the different menu options.\"\"\" number = typer . style ( \"1. \" , bold = True ) typer . echo ( number + \"Tous les tournois\" ) number = typer . style ( \"2. \" , bold = True ) typer . echo ( number + \"Joueurs d'un tournoi\" ) number = typer . style ( \"3. \" , bold = True ) typer . echo ( number + \"Rounds d'un tournoi\" ) number = typer . style ( \"4. \" , bold = True ) typer . echo ( number + \"Matchs d'un tournoi\" ) number = typer . style ( \" \\n 0. \" , bold = True ) typer . echo ( number + \"Retour\" )","title":"print_menu()"},{"location":"reference/views/report_views/#views.report_views.TournamentReportMenu.tournament_players_sub_menu","text":"Sub-menu for tournament's players report. Source code in views/report_views.py def tournament_players_sub_menu ( self ): \"\"\"Sub-menu for tournament's players report.\"\"\" selected_tournament = _HELPER . select_tournament () number = typer . style ( \"1. \" , bold = True ) typer . echo ( number + \"Par Nom\" ) number = typer . style ( \"2. \" , bold = True ) typer . echo ( number + \"Par ELO\" ) number = typer . style ( \" \\n 0. \" , bold = True ) typer . echo ( number + \"Retour\" ) self . tournament_players_sub_menu_selection ( selected_tournament = selected_tournament )","title":"tournament_players_sub_menu()"},{"location":"reference/views/report_views/#views.report_views.TournamentReportMenu.tournament_players_sub_menu_selection","text":"User prompt for tournament's players report sub-menu. Parameters: Name Type Description Default selected_tournament Tournament Tournament previously selected. required Source code in views/report_views.py def tournament_players_sub_menu_selection ( self , selected_tournament : Tournament ): \"\"\"User prompt for tournament's players report sub-menu. Args: selected_tournament (Tournament): Tournament previously selected. \"\"\" selection = typer . prompt ( \"Entrez votre s\u00e9lection: \" ) if selection == \"0\" : typer . echo ( \" \\n\\n \" ) _HELPER . go_back ( current_view = self . __class__ . __name__ ) elif selection == \"1\" : typer . echo ( \" \\n\\n \" ) self . report_handler . tournament_players_by_name ( tournament = selected_tournament ) elif selection == \"2\" : self . report_handler . tournament_players_by_elo ( tournament = selected_tournament ) else : self . user_selection () return","title":"tournament_players_sub_menu_selection()"},{"location":"reference/views/report_views/#views.report_views.TournamentReportMenu.user_selection","text":"Prompts the user to select an option. Source code in views/report_views.py def user_selection ( self ): \"\"\"Prompts the user to select an option.\"\"\" selection = typer . prompt ( \"Entrez votre s\u00e9lection: \" ) if selection == \"0\" : typer . echo ( \" \\n\\n \" ) _HELPER . go_back ( current_view = self . __class__ . __name__ ) return elif selection == \"1\" : typer . echo ( \" \\n\\n \" ) self . report_handler . all_tournaments () elif selection == \"2\" : self . tournament_players_sub_menu () elif selection == \"3\" : selected_tournament = _HELPER . select_tournament () if len ( selected_tournament . rounds ) == 0 : _HELPER . print_error ( \"le tournoi ne comporte aucun round.\" ) _HELPER . go_back ( current_view = self . __class__ . __name__ ) return self . report_handler . tournament_rounds ( tournament = selected_tournament ) elif selection == \"4\" : selected_tournament = _HELPER . select_tournament () if len ( selected_tournament . rounds ) == 0 : _HELPER . print_error ( \"le tournoi ne comporte aucun match.\" ) _HELPER . go_back ( current_view = self . __class__ . __name__ ) return self . report_handler . tournament_matches ( tournament = selected_tournament ) else : self . user_selection () return _HELPER . print_report ( self . report_handler . data ) export_format = _HELPER . report_export_prompt () if export_format is not None : save_path = self . report_handler . init_export ( export_format ) _HELPER . print_success ( f \"rapport enregistr\u00e9 sous: { save_path } \" )","title":"user_selection()"},{"location":"reference/views/tournament_views/","text":"DeleteTournamentMenu \u00b6 View for tournament deletion Attributes: Name Type Description selected_tournament Tournament Tournament selected by user for deletion. __init__ ( self , tournament_id = None ) special \u00b6 Constructor for DeleteTournamentMenu. Parameters: Name Type Description Default tournament_id int Optional tournament id to be loaded. Defaults to None. None Source code in views/tournament_views.py def __init__ ( self , tournament_id : int = None ): \"\"\"Constructor for DeleteTournamentMenu. Args: tournament_id (int, optional): Optional tournament id to be loaded. Defaults to None. \"\"\" _HELPER . print_title ( \"suppression d'un tournoi\" ) self . cli_argument_handler ( tournament_id = tournament_id ) if self . selected_tournament is None : _HELPER . print_error ( \"aucun tournoi cr\u00e9\u00e9.\" ) _HELPER . go_back ( current_view = self . __class__ . __name__ ) return self . confirm_selection () _HELPER . go_back ( current_view = self . __class__ . __name__ ) cli_argument_handler ( self , tournament_id ) \u00b6 Handles eventual tournament id passed at instantiation. Parameters: Name Type Description Default tournament_id str Optional tournament id to be loaded. required Source code in views/tournament_views.py def cli_argument_handler ( self , tournament_id : str ): \"\"\"Handles eventual tournament id passed at instantiation. Args: tournament_id (str): Optional tournament id to be loaded. \"\"\" tournament_exists = DatabaseHandler () . helper . is_tournament_id_in_database ( tournament_id = tournament_id ) if tournament_id is not None and not tournament_exists : _HELPER . print_error ( f \"le tournoi n\u00b0 { tournament_id } n'est pas disponible.\" ) if tournament_id is not None and tournament_exists : self . selected_tournament = DatabaseHandler () . helper . get_tournament_object_from_id_str ( tournament_id = str ( tournament_id ) ) else : self . selected_tournament = _HELPER . select_tournament () confirm_selection ( self ) \u00b6 Prompts the user to confirm tournament deletion. Source code in views/tournament_views.py def confirm_selection ( self ): \"\"\"Prompts the user to confirm tournament deletion.\"\"\" _HELPER . print_warning ( f \"Vous allez supprimer d\u00e9finitivement le tournoi ' { self . selected_tournament . name } '\" ) confirm = typer . confirm ( \"Confirmer la suppression ?\" ) if confirm : self . delete_tournament () else : typer . secho ( \" \\n Le tournoi n'a pas \u00e9t\u00e9 supprim\u00e9\" , fg = typer . colors . GREEN ) delete_tournament ( self ) \u00b6 Uses database handler to delete tournament. Source code in views/tournament_views.py def delete_tournament ( self ): \"\"\"Uses database handler to delete tournament.\"\"\" DatabaseHandler () . delete_tournament ( tournament = self . selected_tournament ) EditTournamentMenu \u00b6 View for tournament editing. Attributes: Name Type Description selected_tournament Tournament Tournament selected by user for edit. original_tournament_copy Tournament Deep copy of initial Tournament state for modification check. __init__ ( self , tournament_id = None ) special \u00b6 Constructor for EditTournamentMenu. Parameters: Name Type Description Default tournament_id int Optional tournament id to be loaded. Defaults to None. None Source code in views/tournament_views.py def __init__ ( self , tournament_id : int = None ): \"\"\"Constructor for EditTournamentMenu. Args: tournament_id (int, optional): Optional tournament id to be loaded. Defaults to None. \"\"\" _HELPER . print_title ( \"modification d'un tournoi\" ) self . cli_argument_handler ( tournament_id = tournament_id ) if self . selected_tournament is None : _HELPER . print_error ( \"aucun tournoi cr\u00e9\u00e9.\" ) _HELPER . go_back ( current_view = self . __class__ . __name__ ) return self . original_tournament_copy = deepcopy ( self . selected_tournament ) self . select_edit () if self . is_tournament_edited (): self . confirm_settings () self . save_tournament () else : _HELPER . print_success ( \"aucune modification effectu\u00e9e.\" ) _HELPER . go_back ( current_view = self . __class__ . __name__ ) cli_argument_handler ( self , tournament_id ) \u00b6 Handles eventual tournament id passed at instantiation. Parameters: Name Type Description Default tournament_id str Optional tournament id to be loaded. required Source code in views/tournament_views.py def cli_argument_handler ( self , tournament_id : str ): \"\"\"Handles eventual tournament id passed at instantiation. Args: tournament_id (str): Optional tournament id to be loaded. \"\"\" tournament_exists = DatabaseHandler () . helper . is_tournament_id_in_database ( tournament_id = tournament_id ) if tournament_id is not None and not tournament_exists : _HELPER . print_error ( f \"le tournoi n\u00b0 { tournament_id } n'est pas disponible.\" ) if tournament_id is not None and tournament_exists : self . selected_tournament = DatabaseHandler () . helper . get_tournament_object_from_id_str ( tournament_id = str ( tournament_id ) ) else : self . selected_tournament = _HELPER . select_tournament () confirm_settings ( self ) \u00b6 Prompts the user to confirm the settings previously entered. Exceptions: Type Description typer.Exit Exits if the user cancels the creation. Source code in views/tournament_views.py def confirm_settings ( self ): \"\"\"Prompts the user to confirm the settings previously entered. Raises: typer.Exit: Exits if the user cancels the creation. \"\"\" self . list_settings () confirm = typer . confirm ( \" \\n Souhaitez vous confirmer la modification de ce tournoi ?\" ) if not confirm : _HELPER . print_error ( \"annulation. Le tournoi n'a pas \u00e9t\u00e9 modifi\u00e9.\" ) raise typer . Exit is_tournament_edited ( self ) \u00b6 Compares selected tournament object and original tournament copy for difference. Returns: Type Description bool The Tournament attributes were modified. Source code in views/tournament_views.py def is_tournament_edited ( self ): \"\"\"Compares selected tournament object and original tournament copy for difference. Returns: bool: The Tournament attributes were modified. \"\"\" if self . selected_tournament . name != self . original_tournament_copy . name : return True elif self . selected_tournament . location != self . original_tournament_copy . location : return True elif self . selected_tournament . date != self . original_tournament_copy . date : return True elif self . selected_tournament . description != self . original_tournament_copy . description : return True else : return False list_settings ( self ) \u00b6 Displays all previously entered tournament settings. Source code in views/tournament_views.py def list_settings ( self ): \"\"\"Displays all previously entered tournament settings.\"\"\" _HELPER . print_info ( \"nouvelles informations du tournoi:\" ) parameter = typer . style ( \"Nom: \" , bold = True ) typer . echo ( parameter + self . selected_tournament . name ) parameter = typer . style ( \"Lieu: \" , bold = True ) typer . echo ( parameter + self . selected_tournament . location ) parameter = typer . style ( \"Date: \" , bold = True ) typer . echo ( parameter + self . selected_tournament . date ) parameter = typer . style ( \"Description: \" , bold = True ) typer . echo ( parameter + self . selected_tournament . description ) save_tournament ( self ) \u00b6 Uses database handler to save edited tournament. Source code in views/tournament_views.py def save_tournament ( self ): \"\"\"Uses database handler to save edited tournament.\"\"\" # Tranform list of Player objects to list of player ids self . selected_tournament . players = [ x . id_num for x in self . selected_tournament . players ] DatabaseHandler () . create_tournament ( name = self . selected_tournament . name , location = self . selected_tournament . location , date = self . selected_tournament . date , number_of_rounds = int ( self . selected_tournament . number_of_rounds ), time_control = self . selected_tournament . time_control , description = self . selected_tournament . description , players = self . selected_tournament . players , leaderboard = self . selected_tournament . leaderboard , is_finished = self . selected_tournament . is_finished , id_num = self . selected_tournament . id_num , ) _HELPER . print_success ( f \"le tournoi n\u00b0 { str ( self . selected_tournament . id_num ) } a \u00e9t\u00e9 modifi\u00e9.\" ) select_edit ( self ) \u00b6 Enumerates all tournament's settings and asks for edit. Source code in views/tournament_views.py def select_edit ( self ): \"\"\"Enumerates all tournament's settings and asks for edit.\"\"\" _HELPER . print_info ( \"informations actuelles du tournoi:\" ) self . selected_tournament . name = _HELPER . edit_prompt ( field_title = \"Nom\" , value = self . selected_tournament . name ) self . selected_tournament . location = _HELPER . edit_prompt ( field_title = \"Lieu\" , value = self . selected_tournament . location ) self . selected_tournament . date = _HELPER . edit_prompt ( field_title = \"Date\" , value = self . selected_tournament . date ) self . selected_tournament . description = _HELPER . edit_prompt ( field_title = \"Description\" , value = self . selected_tournament . description ) LoadTournamentMenu \u00b6 View displayed for tournament loading. Attributes: Name Type Description available_tournaments list Unfinished tournaments available for loading. __init__ ( self , tournament_id = None ) special \u00b6 Constructor for LoadTournamentMenu. Parameters: Name Type Description Default tournament_id int Optional tournament id to be loaded. Defaults to None. None Source code in views/tournament_views.py def __init__ ( self , tournament_id : int = None ): \"\"\"Constructor for LoadTournamentMenu. Args: tournament_id (int, optional): Optional tournament id to be loaded. Defaults to None. \"\"\" _HELPER . print_title ( \"chargement d'un tournoi\" ) self . available_tournaments = DatabaseHandler () . helper . get_unfinished_tournaments () self . cli_argument_handler ( tournament_id = tournament_id ) self . display_unfinished_tournaments () if len ( self . available_tournaments ) == 0 : _HELPER . print_error ( \"aucun tournoi en cours.\" ) _HELPER . go_back ( current_view = self . __class__ . __name__ ) return self . user_selection () _HELPER . go_back ( current_view = self . __class__ . __name__ ) cli_argument_handler ( self , tournament_id ) \u00b6 Handles eventual tournament id passed at instantiation. Parameters: Name Type Description Default tournament_id str Optional tournament id to be loaded. required Source code in views/tournament_views.py def cli_argument_handler ( self , tournament_id : str ): \"\"\"Handles eventual tournament id passed at instantiation. Args: tournament_id (str): Optional tournament id to be loaded. \"\"\" tournament_is_available = ( DatabaseHandler () . helper . get_tournament_object_from_id_str ( tournament_id = str ( tournament_id )) in self . available_tournaments ) if tournament_id is not None and not tournament_is_available : _HELPER . print_error ( f \"le tournoi n\u00b0 { tournament_id } n'est pas disponible.\" , ) elif tournament_id is not None and tournament_is_available : self . start_tournament ( tournament_id = tournament_id ) _HELPER . go_back ( current_view = self . __class__ . __name__ ) display_unfinished_tournaments ( self ) \u00b6 Uses database handler to find and display unfinished tournament for the user to choose from. Source code in views/tournament_views.py def display_unfinished_tournaments ( self ): \"\"\"Uses database handler to find and display unfinished tournament for the user to choose from.\"\"\" for tournament in self . available_tournaments : typer . secho ( f \" - Tournoi n\u00b0 { tournament . id_num } -\" , fg = typer . colors . CYAN ) parameter = typer . style ( \"Nom: \" , bold = True ) typer . echo ( parameter + tournament . name ) parameter = typer . style ( \"Date: \" , bold = True ) typer . echo ( parameter + tournament . date + \" \\n \" ) start_tournament ( self , tournament_id ) \u00b6 Opens the Game Menu for selected tournament. Parameters: Name Type Description Default tournament_id int Unique id of the tournament to be loaded. required Source code in views/tournament_views.py def start_tournament ( self , tournament_id ): \"\"\"Opens the Game Menu for selected tournament. Args: tournament_id (int): Unique id of the tournament to be loaded. \"\"\" GameMenu ( tournament_id ) user_selection ( self ) \u00b6 Prompts the user to select a tournament to be loaded. Source code in views/tournament_views.py def user_selection ( self ): \"\"\"Prompts the user to select a tournament to be loaded.\"\"\" selection = typer . prompt ( \"Entrez un num\u00e9ro de tournoi\" ) available_ids = [ x . id_num for x in self . available_tournaments ] while not selection . isnumeric () or int ( selection ) not in available_ids : _HELPER . print_error ( f \"pas de tournoi avec le num\u00e9ro { selection } \" ) self . user_selection () return self . start_tournament ( int ( selection )) NewTournamentMenu \u00b6 View for new tournament creation. Attributes: Name Type Description tournament_name str Name of the tournament. location str Location of the tournament. date str Date of the tournament. number_of_rounds str Number of rounds to be played. time_control str Type of time control. description str Description of the tournament. created_tournament_id int Unique id of the created tournament. __init__ ( self ) special \u00b6 Constructor for NewTournamentMenu. Source code in views/tournament_views.py def __init__ ( self ): \"\"\"Constructor for NewTournamentMenu.\"\"\" _HELPER . print_title ( \"cr\u00e9ation d'un tournoi\" ) self . tournament_name = \"\" self . location = \"\" self . date = \"\" self . number_of_rounds = \"\" self . time_control = \"\" self . description = \"\" self . players = [] self . created_tournament_id = None self . settings_prompt () self . add_players () self . confirm_settings () self . save_tournament () self . start_tournament () add_players ( self ) \u00b6 Prompts the user to select the participating players. Source code in views/tournament_views.py def add_players ( self ): \"\"\"Prompts the user to select the participating players.\"\"\" typer . secho ( \" \\n Entrez le num\u00e9ro d'un joueur \u00e0 ajouter \\n \" , fg = typer . colors . BLUE ) _HELPER . list_all_players () while len ( self . players ) < 8 : selection = typer . prompt ( f \"Joueur ( { str ( len ( self . players )) } /8)\" ) if _HELPER . player_exists ( selected_id = selection , already_taken_ids = self . players ): self . players . append ( int ( selection )) confirm_settings ( self ) \u00b6 Prompts the user to confirm the settings previously entered. Exceptions: Type Description typer.Exit Exits if the user cancels the creation. Source code in views/tournament_views.py def confirm_settings ( self ): \"\"\"Prompts the user to confirm the settings previously entered. Raises: typer.Exit: Exits if the user cancels the creation. \"\"\" self . list_settings () self . list_participating_players () confirm = typer . confirm ( \" \\n Souhaitez vous confirmer la cr\u00e9ation de ce tournoi ?\" ) if not confirm : typer . print_error ( \"annulation. Le tournoi n'a pas \u00e9t\u00e9 cr\u00e9\u00e9.\" ) raise typer . Exit list_participating_players ( self ) \u00b6 Displays selected participating players by their name. Source code in views/tournament_views.py def list_participating_players ( self ): \"\"\"Displays selected participating players by their name.\"\"\" _HELPER . print_info ( \"liste des joueurs: \" ) players_name = DatabaseHandler () . helper . get_players_names ( players_sample = self . players ) for name in players_name : typer . echo ( f \" - { name } \" ) list_settings ( self ) \u00b6 Displays all previously entered tournament settings. Source code in views/tournament_views.py def list_settings ( self ): \"\"\"Displays all previously entered tournament settings.\"\"\" _HELPER . print_info ( \"param\u00e8tres du tournoi:\" ) parameter = typer . style ( \"Nom: \" , bold = True ) typer . echo ( parameter + self . tournament_name ) parameter = typer . style ( \"Lieu: \" , bold = True ) typer . echo ( parameter + self . location ) parameter = typer . style ( \"Date: \" , bold = True ) typer . echo ( parameter + self . date ) parameter = typer . style ( \"Nombre de rounds: \" , bold = True ) typer . echo ( parameter + self . number_of_rounds ) parameter = typer . style ( \"Contr\u00f4le du temps: \" , bold = True ) typer . echo ( parameter + self . time_control ) parameter = typer . style ( \"Description: \" , bold = True ) typer . echo ( parameter + self . description ) save_tournament ( self ) \u00b6 Uses database handler to save created tournament. Source code in views/tournament_views.py def save_tournament ( self ): \"\"\"Uses database handler to save created tournament.\"\"\" self . created_tournament_id = DatabaseHandler () . create_tournament ( name = self . tournament_name , location = self . location , date = self . date , number_of_rounds = int ( self . number_of_rounds ), time_control = self . time_control , description = self . description , players = self . players , leaderboard = {}, ) _HELPER . print_success ( \"le tournoi a \u00e9t\u00e9 cr\u00e9\u00e9.\" ) settings_prompt ( self ) \u00b6 Prompts the user to input the different tournament settings. Source code in views/tournament_views.py def settings_prompt ( self ): \"\"\"Prompts the user to input the different tournament settings.\"\"\" _HELPER . print_info ( \"entrez les informations du tournoi.\" ) while len ( self . tournament_name ) == 0 : self . tournament_name = typer . prompt ( \"Nom du tournoi\" ) while len ( self . location ) == 0 : self . location = typer . prompt ( \"Lieu\" ) while not _HELPER . date_is_valid ( date = self . date ): self . date = typer . prompt ( \"Date (JJ/MM/AAAA)\" ) while not self . number_of_rounds . isnumeric (): self . number_of_rounds = typer . prompt ( \"Nombre de round\" ) while not self . time_control_is_valid (): self . time_control = typer . prompt ( \"Contr\u00f4le du temps\" ) while len ( self . description ) == 0 : self . description = typer . prompt ( \"Description\" ) start_tournament ( self ) \u00b6 Starts created tournament if the user select so. Source code in views/tournament_views.py def start_tournament ( self ): \"\"\"Starts created tournament if the user select so.\"\"\" confirm = typer . confirm ( \" \\n Souhaitez vous commencer le tournoi ?\" ) if confirm : GameMenu ( tournament_id = self . created_tournament_id ) else : _HELPER . go_back ( current_view = self . __class__ . __name__ ) time_control_is_valid ( self ) \u00b6 Verifies if the type of time control entered by the user is valid. Returns: Type Description bool Time control is valid. Source code in views/tournament_views.py def time_control_is_valid ( self ): \"\"\"Verifies if the type of time control entered by the user is valid. Returns: bool: Time control is valid. \"\"\" if self . time_control . lower () == \"bullet\" : self . time_control = \"Bullet\" return True elif self . time_control . lower () == \"blitz\" : self . time_control = \"Blitz\" return True elif self . time_control . lower () == \"coup rapide\" : self . time_control = \"Coup Rapide\" return True else : if len ( self . time_control ) > 0 : _HELPER . print_error ( \"entr\u00e9e incorrect. Entrez Bullet, Blitz ou Coup Rapide.\" ) return False TournamentMenu \u00b6 View for tournament related operations. __init__ ( self ) special \u00b6 Constructor for TournamentMenu. Source code in views/tournament_views.py def __init__ ( self ): \"\"\"Constructor for TournamentMenu.\"\"\" _HELPER . print_title ( \"menu des tournois\" ) self . print_menu () self . user_selection () print_menu ( self ) \u00b6 Displays the different menu options. Source code in views/tournament_views.py def print_menu ( self ): \"\"\"Displays the different menu options.\"\"\" number = typer . style ( \"1. \" , bold = True ) typer . echo ( number + \"Reprendre un tournoi\" ) number = typer . style ( \"2. \" , bold = True ) typer . echo ( number + \"Cr\u00e9er un nouveau tournoi\" ) number = typer . style ( \"3. \" , bold = True ) typer . echo ( number + \"Modifier un tournoi\" ) number = typer . style ( \"4. \" , bold = True ) typer . echo ( number + \"Supprimer un tournoi\" ) number = typer . style ( \"5. \" , bold = True ) typer . echo ( number + \"Afficher tous les tournois\" ) number = typer . style ( \" \\n 0. \" , bold = True ) typer . echo ( number + \"Retour\" ) user_selection ( self ) \u00b6 Prompts the user to select an option. Source code in views/tournament_views.py def user_selection ( self ): \"\"\"Prompts the user to select an option.\"\"\" selection = typer . prompt ( \"Entrez votre s\u00e9lection: \" ) if selection == \"0\" : typer . echo ( \" \\n\\n \" ) _HELPER . go_back ( current_view = self . __class__ . __name__ ) elif selection == \"1\" : typer . echo ( \" \\n\\n \" ) LoadTournamentMenu () elif selection == \"2\" : typer . echo ( \" \\n\\n \" ) NewTournamentMenu () elif selection == \"3\" : typer . echo ( \" \\n\\n \" ) EditTournamentMenu () elif selection == \"4\" : typer . echo ( \" \\n\\n \" ) DeleteTournamentMenu () elif selection == \"5\" : typer . echo ( \" \\n\\n \" ) _HELPER . list_all_tournaments () typer . echo ( \" \\n \" ) self . user_selection () else : self . user_selection ()","title":"tournament_views.py"},{"location":"reference/views/tournament_views/#views.tournament_views.DeleteTournamentMenu","text":"View for tournament deletion Attributes: Name Type Description selected_tournament Tournament Tournament selected by user for deletion.","title":"DeleteTournamentMenu"},{"location":"reference/views/tournament_views/#views.tournament_views.DeleteTournamentMenu.__init__","text":"Constructor for DeleteTournamentMenu. Parameters: Name Type Description Default tournament_id int Optional tournament id to be loaded. Defaults to None. None Source code in views/tournament_views.py def __init__ ( self , tournament_id : int = None ): \"\"\"Constructor for DeleteTournamentMenu. Args: tournament_id (int, optional): Optional tournament id to be loaded. Defaults to None. \"\"\" _HELPER . print_title ( \"suppression d'un tournoi\" ) self . cli_argument_handler ( tournament_id = tournament_id ) if self . selected_tournament is None : _HELPER . print_error ( \"aucun tournoi cr\u00e9\u00e9.\" ) _HELPER . go_back ( current_view = self . __class__ . __name__ ) return self . confirm_selection () _HELPER . go_back ( current_view = self . __class__ . __name__ )","title":"__init__()"},{"location":"reference/views/tournament_views/#views.tournament_views.DeleteTournamentMenu.cli_argument_handler","text":"Handles eventual tournament id passed at instantiation. Parameters: Name Type Description Default tournament_id str Optional tournament id to be loaded. required Source code in views/tournament_views.py def cli_argument_handler ( self , tournament_id : str ): \"\"\"Handles eventual tournament id passed at instantiation. Args: tournament_id (str): Optional tournament id to be loaded. \"\"\" tournament_exists = DatabaseHandler () . helper . is_tournament_id_in_database ( tournament_id = tournament_id ) if tournament_id is not None and not tournament_exists : _HELPER . print_error ( f \"le tournoi n\u00b0 { tournament_id } n'est pas disponible.\" ) if tournament_id is not None and tournament_exists : self . selected_tournament = DatabaseHandler () . helper . get_tournament_object_from_id_str ( tournament_id = str ( tournament_id ) ) else : self . selected_tournament = _HELPER . select_tournament ()","title":"cli_argument_handler()"},{"location":"reference/views/tournament_views/#views.tournament_views.DeleteTournamentMenu.confirm_selection","text":"Prompts the user to confirm tournament deletion. Source code in views/tournament_views.py def confirm_selection ( self ): \"\"\"Prompts the user to confirm tournament deletion.\"\"\" _HELPER . print_warning ( f \"Vous allez supprimer d\u00e9finitivement le tournoi ' { self . selected_tournament . name } '\" ) confirm = typer . confirm ( \"Confirmer la suppression ?\" ) if confirm : self . delete_tournament () else : typer . secho ( \" \\n Le tournoi n'a pas \u00e9t\u00e9 supprim\u00e9\" , fg = typer . colors . GREEN )","title":"confirm_selection()"},{"location":"reference/views/tournament_views/#views.tournament_views.DeleteTournamentMenu.delete_tournament","text":"Uses database handler to delete tournament. Source code in views/tournament_views.py def delete_tournament ( self ): \"\"\"Uses database handler to delete tournament.\"\"\" DatabaseHandler () . delete_tournament ( tournament = self . selected_tournament )","title":"delete_tournament()"},{"location":"reference/views/tournament_views/#views.tournament_views.EditTournamentMenu","text":"View for tournament editing. Attributes: Name Type Description selected_tournament Tournament Tournament selected by user for edit. original_tournament_copy Tournament Deep copy of initial Tournament state for modification check.","title":"EditTournamentMenu"},{"location":"reference/views/tournament_views/#views.tournament_views.EditTournamentMenu.__init__","text":"Constructor for EditTournamentMenu. Parameters: Name Type Description Default tournament_id int Optional tournament id to be loaded. Defaults to None. None Source code in views/tournament_views.py def __init__ ( self , tournament_id : int = None ): \"\"\"Constructor for EditTournamentMenu. Args: tournament_id (int, optional): Optional tournament id to be loaded. Defaults to None. \"\"\" _HELPER . print_title ( \"modification d'un tournoi\" ) self . cli_argument_handler ( tournament_id = tournament_id ) if self . selected_tournament is None : _HELPER . print_error ( \"aucun tournoi cr\u00e9\u00e9.\" ) _HELPER . go_back ( current_view = self . __class__ . __name__ ) return self . original_tournament_copy = deepcopy ( self . selected_tournament ) self . select_edit () if self . is_tournament_edited (): self . confirm_settings () self . save_tournament () else : _HELPER . print_success ( \"aucune modification effectu\u00e9e.\" ) _HELPER . go_back ( current_view = self . __class__ . __name__ )","title":"__init__()"},{"location":"reference/views/tournament_views/#views.tournament_views.EditTournamentMenu.cli_argument_handler","text":"Handles eventual tournament id passed at instantiation. Parameters: Name Type Description Default tournament_id str Optional tournament id to be loaded. required Source code in views/tournament_views.py def cli_argument_handler ( self , tournament_id : str ): \"\"\"Handles eventual tournament id passed at instantiation. Args: tournament_id (str): Optional tournament id to be loaded. \"\"\" tournament_exists = DatabaseHandler () . helper . is_tournament_id_in_database ( tournament_id = tournament_id ) if tournament_id is not None and not tournament_exists : _HELPER . print_error ( f \"le tournoi n\u00b0 { tournament_id } n'est pas disponible.\" ) if tournament_id is not None and tournament_exists : self . selected_tournament = DatabaseHandler () . helper . get_tournament_object_from_id_str ( tournament_id = str ( tournament_id ) ) else : self . selected_tournament = _HELPER . select_tournament ()","title":"cli_argument_handler()"},{"location":"reference/views/tournament_views/#views.tournament_views.EditTournamentMenu.confirm_settings","text":"Prompts the user to confirm the settings previously entered. Exceptions: Type Description typer.Exit Exits if the user cancels the creation. Source code in views/tournament_views.py def confirm_settings ( self ): \"\"\"Prompts the user to confirm the settings previously entered. Raises: typer.Exit: Exits if the user cancels the creation. \"\"\" self . list_settings () confirm = typer . confirm ( \" \\n Souhaitez vous confirmer la modification de ce tournoi ?\" ) if not confirm : _HELPER . print_error ( \"annulation. Le tournoi n'a pas \u00e9t\u00e9 modifi\u00e9.\" ) raise typer . Exit","title":"confirm_settings()"},{"location":"reference/views/tournament_views/#views.tournament_views.EditTournamentMenu.is_tournament_edited","text":"Compares selected tournament object and original tournament copy for difference. Returns: Type Description bool The Tournament attributes were modified. Source code in views/tournament_views.py def is_tournament_edited ( self ): \"\"\"Compares selected tournament object and original tournament copy for difference. Returns: bool: The Tournament attributes were modified. \"\"\" if self . selected_tournament . name != self . original_tournament_copy . name : return True elif self . selected_tournament . location != self . original_tournament_copy . location : return True elif self . selected_tournament . date != self . original_tournament_copy . date : return True elif self . selected_tournament . description != self . original_tournament_copy . description : return True else : return False","title":"is_tournament_edited()"},{"location":"reference/views/tournament_views/#views.tournament_views.EditTournamentMenu.list_settings","text":"Displays all previously entered tournament settings. Source code in views/tournament_views.py def list_settings ( self ): \"\"\"Displays all previously entered tournament settings.\"\"\" _HELPER . print_info ( \"nouvelles informations du tournoi:\" ) parameter = typer . style ( \"Nom: \" , bold = True ) typer . echo ( parameter + self . selected_tournament . name ) parameter = typer . style ( \"Lieu: \" , bold = True ) typer . echo ( parameter + self . selected_tournament . location ) parameter = typer . style ( \"Date: \" , bold = True ) typer . echo ( parameter + self . selected_tournament . date ) parameter = typer . style ( \"Description: \" , bold = True ) typer . echo ( parameter + self . selected_tournament . description )","title":"list_settings()"},{"location":"reference/views/tournament_views/#views.tournament_views.EditTournamentMenu.save_tournament","text":"Uses database handler to save edited tournament. Source code in views/tournament_views.py def save_tournament ( self ): \"\"\"Uses database handler to save edited tournament.\"\"\" # Tranform list of Player objects to list of player ids self . selected_tournament . players = [ x . id_num for x in self . selected_tournament . players ] DatabaseHandler () . create_tournament ( name = self . selected_tournament . name , location = self . selected_tournament . location , date = self . selected_tournament . date , number_of_rounds = int ( self . selected_tournament . number_of_rounds ), time_control = self . selected_tournament . time_control , description = self . selected_tournament . description , players = self . selected_tournament . players , leaderboard = self . selected_tournament . leaderboard , is_finished = self . selected_tournament . is_finished , id_num = self . selected_tournament . id_num , ) _HELPER . print_success ( f \"le tournoi n\u00b0 { str ( self . selected_tournament . id_num ) } a \u00e9t\u00e9 modifi\u00e9.\" )","title":"save_tournament()"},{"location":"reference/views/tournament_views/#views.tournament_views.EditTournamentMenu.select_edit","text":"Enumerates all tournament's settings and asks for edit. Source code in views/tournament_views.py def select_edit ( self ): \"\"\"Enumerates all tournament's settings and asks for edit.\"\"\" _HELPER . print_info ( \"informations actuelles du tournoi:\" ) self . selected_tournament . name = _HELPER . edit_prompt ( field_title = \"Nom\" , value = self . selected_tournament . name ) self . selected_tournament . location = _HELPER . edit_prompt ( field_title = \"Lieu\" , value = self . selected_tournament . location ) self . selected_tournament . date = _HELPER . edit_prompt ( field_title = \"Date\" , value = self . selected_tournament . date ) self . selected_tournament . description = _HELPER . edit_prompt ( field_title = \"Description\" , value = self . selected_tournament . description )","title":"select_edit()"},{"location":"reference/views/tournament_views/#views.tournament_views.LoadTournamentMenu","text":"View displayed for tournament loading. Attributes: Name Type Description available_tournaments list Unfinished tournaments available for loading.","title":"LoadTournamentMenu"},{"location":"reference/views/tournament_views/#views.tournament_views.LoadTournamentMenu.__init__","text":"Constructor for LoadTournamentMenu. Parameters: Name Type Description Default tournament_id int Optional tournament id to be loaded. Defaults to None. None Source code in views/tournament_views.py def __init__ ( self , tournament_id : int = None ): \"\"\"Constructor for LoadTournamentMenu. Args: tournament_id (int, optional): Optional tournament id to be loaded. Defaults to None. \"\"\" _HELPER . print_title ( \"chargement d'un tournoi\" ) self . available_tournaments = DatabaseHandler () . helper . get_unfinished_tournaments () self . cli_argument_handler ( tournament_id = tournament_id ) self . display_unfinished_tournaments () if len ( self . available_tournaments ) == 0 : _HELPER . print_error ( \"aucun tournoi en cours.\" ) _HELPER . go_back ( current_view = self . __class__ . __name__ ) return self . user_selection () _HELPER . go_back ( current_view = self . __class__ . __name__ )","title":"__init__()"},{"location":"reference/views/tournament_views/#views.tournament_views.LoadTournamentMenu.cli_argument_handler","text":"Handles eventual tournament id passed at instantiation. Parameters: Name Type Description Default tournament_id str Optional tournament id to be loaded. required Source code in views/tournament_views.py def cli_argument_handler ( self , tournament_id : str ): \"\"\"Handles eventual tournament id passed at instantiation. Args: tournament_id (str): Optional tournament id to be loaded. \"\"\" tournament_is_available = ( DatabaseHandler () . helper . get_tournament_object_from_id_str ( tournament_id = str ( tournament_id )) in self . available_tournaments ) if tournament_id is not None and not tournament_is_available : _HELPER . print_error ( f \"le tournoi n\u00b0 { tournament_id } n'est pas disponible.\" , ) elif tournament_id is not None and tournament_is_available : self . start_tournament ( tournament_id = tournament_id ) _HELPER . go_back ( current_view = self . __class__ . __name__ )","title":"cli_argument_handler()"},{"location":"reference/views/tournament_views/#views.tournament_views.LoadTournamentMenu.display_unfinished_tournaments","text":"Uses database handler to find and display unfinished tournament for the user to choose from. Source code in views/tournament_views.py def display_unfinished_tournaments ( self ): \"\"\"Uses database handler to find and display unfinished tournament for the user to choose from.\"\"\" for tournament in self . available_tournaments : typer . secho ( f \" - Tournoi n\u00b0 { tournament . id_num } -\" , fg = typer . colors . CYAN ) parameter = typer . style ( \"Nom: \" , bold = True ) typer . echo ( parameter + tournament . name ) parameter = typer . style ( \"Date: \" , bold = True ) typer . echo ( parameter + tournament . date + \" \\n \" )","title":"display_unfinished_tournaments()"},{"location":"reference/views/tournament_views/#views.tournament_views.LoadTournamentMenu.start_tournament","text":"Opens the Game Menu for selected tournament. Parameters: Name Type Description Default tournament_id int Unique id of the tournament to be loaded. required Source code in views/tournament_views.py def start_tournament ( self , tournament_id ): \"\"\"Opens the Game Menu for selected tournament. Args: tournament_id (int): Unique id of the tournament to be loaded. \"\"\" GameMenu ( tournament_id )","title":"start_tournament()"},{"location":"reference/views/tournament_views/#views.tournament_views.LoadTournamentMenu.user_selection","text":"Prompts the user to select a tournament to be loaded. Source code in views/tournament_views.py def user_selection ( self ): \"\"\"Prompts the user to select a tournament to be loaded.\"\"\" selection = typer . prompt ( \"Entrez un num\u00e9ro de tournoi\" ) available_ids = [ x . id_num for x in self . available_tournaments ] while not selection . isnumeric () or int ( selection ) not in available_ids : _HELPER . print_error ( f \"pas de tournoi avec le num\u00e9ro { selection } \" ) self . user_selection () return self . start_tournament ( int ( selection ))","title":"user_selection()"},{"location":"reference/views/tournament_views/#views.tournament_views.NewTournamentMenu","text":"View for new tournament creation. Attributes: Name Type Description tournament_name str Name of the tournament. location str Location of the tournament. date str Date of the tournament. number_of_rounds str Number of rounds to be played. time_control str Type of time control. description str Description of the tournament. created_tournament_id int Unique id of the created tournament.","title":"NewTournamentMenu"},{"location":"reference/views/tournament_views/#views.tournament_views.NewTournamentMenu.__init__","text":"Constructor for NewTournamentMenu. Source code in views/tournament_views.py def __init__ ( self ): \"\"\"Constructor for NewTournamentMenu.\"\"\" _HELPER . print_title ( \"cr\u00e9ation d'un tournoi\" ) self . tournament_name = \"\" self . location = \"\" self . date = \"\" self . number_of_rounds = \"\" self . time_control = \"\" self . description = \"\" self . players = [] self . created_tournament_id = None self . settings_prompt () self . add_players () self . confirm_settings () self . save_tournament () self . start_tournament ()","title":"__init__()"},{"location":"reference/views/tournament_views/#views.tournament_views.NewTournamentMenu.add_players","text":"Prompts the user to select the participating players. Source code in views/tournament_views.py def add_players ( self ): \"\"\"Prompts the user to select the participating players.\"\"\" typer . secho ( \" \\n Entrez le num\u00e9ro d'un joueur \u00e0 ajouter \\n \" , fg = typer . colors . BLUE ) _HELPER . list_all_players () while len ( self . players ) < 8 : selection = typer . prompt ( f \"Joueur ( { str ( len ( self . players )) } /8)\" ) if _HELPER . player_exists ( selected_id = selection , already_taken_ids = self . players ): self . players . append ( int ( selection ))","title":"add_players()"},{"location":"reference/views/tournament_views/#views.tournament_views.NewTournamentMenu.confirm_settings","text":"Prompts the user to confirm the settings previously entered. Exceptions: Type Description typer.Exit Exits if the user cancels the creation. Source code in views/tournament_views.py def confirm_settings ( self ): \"\"\"Prompts the user to confirm the settings previously entered. Raises: typer.Exit: Exits if the user cancels the creation. \"\"\" self . list_settings () self . list_participating_players () confirm = typer . confirm ( \" \\n Souhaitez vous confirmer la cr\u00e9ation de ce tournoi ?\" ) if not confirm : typer . print_error ( \"annulation. Le tournoi n'a pas \u00e9t\u00e9 cr\u00e9\u00e9.\" ) raise typer . Exit","title":"confirm_settings()"},{"location":"reference/views/tournament_views/#views.tournament_views.NewTournamentMenu.list_participating_players","text":"Displays selected participating players by their name. Source code in views/tournament_views.py def list_participating_players ( self ): \"\"\"Displays selected participating players by their name.\"\"\" _HELPER . print_info ( \"liste des joueurs: \" ) players_name = DatabaseHandler () . helper . get_players_names ( players_sample = self . players ) for name in players_name : typer . echo ( f \" - { name } \" )","title":"list_participating_players()"},{"location":"reference/views/tournament_views/#views.tournament_views.NewTournamentMenu.list_settings","text":"Displays all previously entered tournament settings. Source code in views/tournament_views.py def list_settings ( self ): \"\"\"Displays all previously entered tournament settings.\"\"\" _HELPER . print_info ( \"param\u00e8tres du tournoi:\" ) parameter = typer . style ( \"Nom: \" , bold = True ) typer . echo ( parameter + self . tournament_name ) parameter = typer . style ( \"Lieu: \" , bold = True ) typer . echo ( parameter + self . location ) parameter = typer . style ( \"Date: \" , bold = True ) typer . echo ( parameter + self . date ) parameter = typer . style ( \"Nombre de rounds: \" , bold = True ) typer . echo ( parameter + self . number_of_rounds ) parameter = typer . style ( \"Contr\u00f4le du temps: \" , bold = True ) typer . echo ( parameter + self . time_control ) parameter = typer . style ( \"Description: \" , bold = True ) typer . echo ( parameter + self . description )","title":"list_settings()"},{"location":"reference/views/tournament_views/#views.tournament_views.NewTournamentMenu.save_tournament","text":"Uses database handler to save created tournament. Source code in views/tournament_views.py def save_tournament ( self ): \"\"\"Uses database handler to save created tournament.\"\"\" self . created_tournament_id = DatabaseHandler () . create_tournament ( name = self . tournament_name , location = self . location , date = self . date , number_of_rounds = int ( self . number_of_rounds ), time_control = self . time_control , description = self . description , players = self . players , leaderboard = {}, ) _HELPER . print_success ( \"le tournoi a \u00e9t\u00e9 cr\u00e9\u00e9.\" )","title":"save_tournament()"},{"location":"reference/views/tournament_views/#views.tournament_views.NewTournamentMenu.settings_prompt","text":"Prompts the user to input the different tournament settings. Source code in views/tournament_views.py def settings_prompt ( self ): \"\"\"Prompts the user to input the different tournament settings.\"\"\" _HELPER . print_info ( \"entrez les informations du tournoi.\" ) while len ( self . tournament_name ) == 0 : self . tournament_name = typer . prompt ( \"Nom du tournoi\" ) while len ( self . location ) == 0 : self . location = typer . prompt ( \"Lieu\" ) while not _HELPER . date_is_valid ( date = self . date ): self . date = typer . prompt ( \"Date (JJ/MM/AAAA)\" ) while not self . number_of_rounds . isnumeric (): self . number_of_rounds = typer . prompt ( \"Nombre de round\" ) while not self . time_control_is_valid (): self . time_control = typer . prompt ( \"Contr\u00f4le du temps\" ) while len ( self . description ) == 0 : self . description = typer . prompt ( \"Description\" )","title":"settings_prompt()"},{"location":"reference/views/tournament_views/#views.tournament_views.NewTournamentMenu.start_tournament","text":"Starts created tournament if the user select so. Source code in views/tournament_views.py def start_tournament ( self ): \"\"\"Starts created tournament if the user select so.\"\"\" confirm = typer . confirm ( \" \\n Souhaitez vous commencer le tournoi ?\" ) if confirm : GameMenu ( tournament_id = self . created_tournament_id ) else : _HELPER . go_back ( current_view = self . __class__ . __name__ )","title":"start_tournament()"},{"location":"reference/views/tournament_views/#views.tournament_views.NewTournamentMenu.time_control_is_valid","text":"Verifies if the type of time control entered by the user is valid. Returns: Type Description bool Time control is valid. Source code in views/tournament_views.py def time_control_is_valid ( self ): \"\"\"Verifies if the type of time control entered by the user is valid. Returns: bool: Time control is valid. \"\"\" if self . time_control . lower () == \"bullet\" : self . time_control = \"Bullet\" return True elif self . time_control . lower () == \"blitz\" : self . time_control = \"Blitz\" return True elif self . time_control . lower () == \"coup rapide\" : self . time_control = \"Coup Rapide\" return True else : if len ( self . time_control ) > 0 : _HELPER . print_error ( \"entr\u00e9e incorrect. Entrez Bullet, Blitz ou Coup Rapide.\" ) return False","title":"time_control_is_valid()"},{"location":"reference/views/tournament_views/#views.tournament_views.TournamentMenu","text":"View for tournament related operations.","title":"TournamentMenu"},{"location":"reference/views/tournament_views/#views.tournament_views.TournamentMenu.__init__","text":"Constructor for TournamentMenu. Source code in views/tournament_views.py def __init__ ( self ): \"\"\"Constructor for TournamentMenu.\"\"\" _HELPER . print_title ( \"menu des tournois\" ) self . print_menu () self . user_selection ()","title":"__init__()"},{"location":"reference/views/tournament_views/#views.tournament_views.TournamentMenu.print_menu","text":"Displays the different menu options. Source code in views/tournament_views.py def print_menu ( self ): \"\"\"Displays the different menu options.\"\"\" number = typer . style ( \"1. \" , bold = True ) typer . echo ( number + \"Reprendre un tournoi\" ) number = typer . style ( \"2. \" , bold = True ) typer . echo ( number + \"Cr\u00e9er un nouveau tournoi\" ) number = typer . style ( \"3. \" , bold = True ) typer . echo ( number + \"Modifier un tournoi\" ) number = typer . style ( \"4. \" , bold = True ) typer . echo ( number + \"Supprimer un tournoi\" ) number = typer . style ( \"5. \" , bold = True ) typer . echo ( number + \"Afficher tous les tournois\" ) number = typer . style ( \" \\n 0. \" , bold = True ) typer . echo ( number + \"Retour\" )","title":"print_menu()"},{"location":"reference/views/tournament_views/#views.tournament_views.TournamentMenu.user_selection","text":"Prompts the user to select an option. Source code in views/tournament_views.py def user_selection ( self ): \"\"\"Prompts the user to select an option.\"\"\" selection = typer . prompt ( \"Entrez votre s\u00e9lection: \" ) if selection == \"0\" : typer . echo ( \" \\n\\n \" ) _HELPER . go_back ( current_view = self . __class__ . __name__ ) elif selection == \"1\" : typer . echo ( \" \\n\\n \" ) LoadTournamentMenu () elif selection == \"2\" : typer . echo ( \" \\n\\n \" ) NewTournamentMenu () elif selection == \"3\" : typer . echo ( \" \\n\\n \" ) EditTournamentMenu () elif selection == \"4\" : typer . echo ( \" \\n\\n \" ) DeleteTournamentMenu () elif selection == \"5\" : typer . echo ( \" \\n\\n \" ) _HELPER . list_all_tournaments () typer . echo ( \" \\n \" ) self . user_selection () else : self . user_selection ()","title":"user_selection()"},{"location":"reference/views/typer_app/","text":"","title":"typer_app.py"}]}